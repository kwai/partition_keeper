syntax = "proto3";

package colossusdb;

import "google/protobuf/timestamp.proto";
import "teams/reco-arch/colossusdb/proto/common.proto";

// 数据复制/同步服务
service ReplicatorService {
  // get replicator info
  rpc GetInfo(GetInfoRequest) returns (GetInfoResponse);

  // replicate data
  rpc Replicate(ReplicateRequest) returns (ReplicateResponse);

  // compare the offset sizes between partitions
  rpc OffsetComparison(OffsetComparisonRequest) returns (OffsetComparisonResponse);

  // check offset and get checkpoint info
  rpc DeriveCheckpointFiles(DeriveCheckpointFilesRequest) returns (DeriveCheckpointFilesResponse);

  // sync file data
  rpc FileSync(FileSyncRequest) returns (FileSyncResponse);

  // finish sync file data
  rpc FinishFileSync(FinishFileSyncRequest) returns (ErrorStatus);
}

message DeriveCheckpointFilesRequest {
  int32 table_id = 1;
  int32 partition_id = 2;
  string node_unique_id = 3;
  map<string, string> offset = 4;
}

message DeriveCheckpointFilesResponse {
  ErrorStatus status = 1;
  string dir = 2;
  repeated string files = 3;
  map<string, string> checkpoint_offset = 4;
}

message OffsetComparisonRequest {
  int64 table_id = 1;
  int32 partition_id = 2;
  map<string, string> offset = 3;
}

message OffsetComparisonResponse {
  ErrorStatus status = 1;
  bool sender_larger = 2;
}

message FileSyncRequest {
  int32 table_id = 1;
  int32 partition_id = 2;
  string node_unique_id = 3;
  string dir = 4;
  string file_name = 5;
  uint64 file_offset = 6;
  bool restart = 7;
}

message FileSyncResponse {
  ErrorStatus status = 1;
  string dir = 2;
  string file_name = 3;
  bytes buffer = 4;
  bool eof = 5;
}

message FinishFileSyncRequest {
  int32 table_id = 1;
  int32 partition_id = 2;
  string node_unique_id = 3;
  string dir = 4;
}

message PartitionReplicatorInfo {
  string table_name = 1;
  int32 partition_id = 2;

  // if ready for serve replication
  bool ready = 3;

  // data type and storing format
  string data_type = 4;
  string data_format = 5;

  // engine type
  string engine_type = 14;
  
  // total key num
  int64 key_num = 6;
  google.protobuf.Timestamp last_pop_time = 7;
  google.protobuf.Timestamp last_message_time = 8;
  int64 last_message_offset = 9;

  // optional informations
  string hub = 10;
  int32 state = 11;
  int64 total_size = 12;
  int64 valid_key_num = 13;
}

message GetInfoRequest {
  string table_name = 1;

  // partition ids which need get
  // if empty request all partitions
  repeated int32 partition_ids = 2;
}

message GetInfoResponse {
  ErrorStatus status = 1;
  repeated PartitionReplicatorInfo infos = 2;
}

message ReplicateRequest {
  string table_name = 1;
  int32 partition_id = 2;

  // biz defined, represent the page location of this call
  string page_token = 3;

  // Optional. biz defined. maxium items get at once
  int32 page_size = 4;

  // Optional. request format
  string format = 5;

  // Optional. replicate expired
  bool include_expired = 6;

  // Optional. 被调的 kafka offset 必须大于等于 min_offset
  int64 min_offset = 7;

  // Optional.  被调的消费进度 必须大于等于 min_message_time 
  google.protobuf.Timestamp min_message_time = 8;
}

message ReplicateResponse {
  // status
  // if server reach rate limit, will return RESOURCE_EXHAUSTED code
  ErrorStatus status = 1;

  // Optional. biz defined, next page token
  string next_page_token = 2;

  // Optional. format of data
  string format = 3;

  // biz defined
  repeated bytes data = 4;

  // Optional. biz defined
  repeated bytes metadata = 5;
}
