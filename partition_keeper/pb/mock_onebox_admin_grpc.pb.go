// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: teams/reco-arch/colossusdb/proto/mock_onebox_admin.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MockOneboxAdmin_StopNode_FullMethodName  = "/colossusdb.MockOneboxAdmin/StopNode"
	MockOneboxAdmin_StartNode_FullMethodName = "/colossusdb.MockOneboxAdmin/StartNode"
)

// MockOneboxAdminClient is the client API for MockOneboxAdmin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MockOneboxAdminClient interface {
	// POST
	StopNode(ctx context.Context, in *StopNodeRequest, opts ...grpc.CallOption) (*ErrorStatusResponse, error)
	// POST
	StartNode(ctx context.Context, in *StartNodeRequest, opts ...grpc.CallOption) (*ErrorStatusResponse, error)
}

type mockOneboxAdminClient struct {
	cc grpc.ClientConnInterface
}

func NewMockOneboxAdminClient(cc grpc.ClientConnInterface) MockOneboxAdminClient {
	return &mockOneboxAdminClient{cc}
}

func (c *mockOneboxAdminClient) StopNode(ctx context.Context, in *StopNodeRequest, opts ...grpc.CallOption) (*ErrorStatusResponse, error) {
	out := new(ErrorStatusResponse)
	err := c.cc.Invoke(ctx, MockOneboxAdmin_StopNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mockOneboxAdminClient) StartNode(ctx context.Context, in *StartNodeRequest, opts ...grpc.CallOption) (*ErrorStatusResponse, error) {
	out := new(ErrorStatusResponse)
	err := c.cc.Invoke(ctx, MockOneboxAdmin_StartNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MockOneboxAdminServer is the server API for MockOneboxAdmin service.
// All implementations must embed UnimplementedMockOneboxAdminServer
// for forward compatibility
type MockOneboxAdminServer interface {
	// POST
	StopNode(context.Context, *StopNodeRequest) (*ErrorStatusResponse, error)
	// POST
	StartNode(context.Context, *StartNodeRequest) (*ErrorStatusResponse, error)
	mustEmbedUnimplementedMockOneboxAdminServer()
}

// UnimplementedMockOneboxAdminServer must be embedded to have forward compatible implementations.
type UnimplementedMockOneboxAdminServer struct {
}

func (UnimplementedMockOneboxAdminServer) StopNode(context.Context, *StopNodeRequest) (*ErrorStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopNode not implemented")
}
func (UnimplementedMockOneboxAdminServer) StartNode(context.Context, *StartNodeRequest) (*ErrorStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartNode not implemented")
}
func (UnimplementedMockOneboxAdminServer) mustEmbedUnimplementedMockOneboxAdminServer() {}

// UnsafeMockOneboxAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MockOneboxAdminServer will
// result in compilation errors.
type UnsafeMockOneboxAdminServer interface {
	mustEmbedUnimplementedMockOneboxAdminServer()
}

func RegisterMockOneboxAdminServer(s grpc.ServiceRegistrar, srv MockOneboxAdminServer) {
	s.RegisterService(&MockOneboxAdmin_ServiceDesc, srv)
}

func _MockOneboxAdmin_StopNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockOneboxAdminServer).StopNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MockOneboxAdmin_StopNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockOneboxAdminServer).StopNode(ctx, req.(*StopNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MockOneboxAdmin_StartNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockOneboxAdminServer).StartNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MockOneboxAdmin_StartNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockOneboxAdminServer).StartNode(ctx, req.(*StartNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MockOneboxAdmin_ServiceDesc is the grpc.ServiceDesc for MockOneboxAdmin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MockOneboxAdmin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "colossusdb.MockOneboxAdmin",
	HandlerType: (*MockOneboxAdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StopNode",
			Handler:    _MockOneboxAdmin_StopNode_Handler,
		},
		{
			MethodName: "StartNode",
			Handler:    _MockOneboxAdmin_StartNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teams/reco-arch/colossusdb/proto/mock_onebox_admin.proto",
}
