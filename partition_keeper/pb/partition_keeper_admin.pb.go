// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.0
// 	protoc        (unknown)
// source: teams/reco-arch/colossusdb/proto/partition_keeper_admin.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ServiceType int32

const (
	ServiceType_invalid                     ServiceType = 0
	ServiceType_colossusdb_embedding_server ServiceType = 1
	ServiceType_colossusdb_rodis            ServiceType = 2
	ServiceType_colossusdb_feart_server     ServiceType = 3
	ServiceType_colossusdb_dummy            ServiceType = 4
	ServiceType_colossusdb_feature_server   ServiceType = 5
	ServiceType_colossusdb_partition_server ServiceType = 6
	ServiceType_colossusdb_sim_cache_server ServiceType = 7
	ServiceType_colossusdb_kgnn             ServiceType = 8
	ServiceType_colossusdb_sim_server       ServiceType = 9
	ServiceType_colossusdb_clotho           ServiceType = 10
)

// Enum value maps for ServiceType.
var (
	ServiceType_name = map[int32]string{
		0:  "invalid",
		1:  "colossusdb_embedding_server",
		2:  "colossusdb_rodis",
		3:  "colossusdb_feart_server",
		4:  "colossusdb_dummy",
		5:  "colossusdb_feature_server",
		6:  "colossusdb_partition_server",
		7:  "colossusdb_sim_cache_server",
		8:  "colossusdb_kgnn",
		9:  "colossusdb_sim_server",
		10: "colossusdb_clotho",
	}
	ServiceType_value = map[string]int32{
		"invalid":                     0,
		"colossusdb_embedding_server": 1,
		"colossusdb_rodis":            2,
		"colossusdb_feart_server":     3,
		"colossusdb_dummy":            4,
		"colossusdb_feature_server":   5,
		"colossusdb_partition_server": 6,
		"colossusdb_sim_cache_server": 7,
		"colossusdb_kgnn":             8,
		"colossusdb_sim_server":       9,
		"colossusdb_clotho":           10,
	}
)

func (x ServiceType) Enum() *ServiceType {
	p := new(ServiceType)
	*p = x
	return p
}

func (x ServiceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceType) Descriptor() protoreflect.EnumDescriptor {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_enumTypes[0].Descriptor()
}

func (ServiceType) Type() protoreflect.EnumType {
	return &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_enumTypes[0]
}

func (x ServiceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceType.Descriptor instead.
func (ServiceType) EnumDescriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{0}
}

type NodeFailureDomainType int32

const (
	NodeFailureDomainType_HOST    NodeFailureDomainType = 0
	NodeFailureDomainType_PROCESS NodeFailureDomainType = 1
	NodeFailureDomainType_RACK    NodeFailureDomainType = 2
)

// Enum value maps for NodeFailureDomainType.
var (
	NodeFailureDomainType_name = map[int32]string{
		0: "HOST",
		1: "PROCESS",
		2: "RACK",
	}
	NodeFailureDomainType_value = map[string]int32{
		"HOST":    0,
		"PROCESS": 1,
		"RACK":    2,
	}
)

func (x NodeFailureDomainType) Enum() *NodeFailureDomainType {
	p := new(NodeFailureDomainType)
	*p = x
	return p
}

func (x NodeFailureDomainType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeFailureDomainType) Descriptor() protoreflect.EnumDescriptor {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_enumTypes[1].Descriptor()
}

func (NodeFailureDomainType) Type() protoreflect.EnumType {
	return &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_enumTypes[1]
}

func (x NodeFailureDomainType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeFailureDomainType.Descriptor instead.
func (NodeFailureDomainType) EnumDescriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{1}
}

type TaskNotifyMode int32

const (
	TaskNotifyMode_NOTIFY_LEADER       TaskNotifyMode = 0
	TaskNotifyMode_NOTIFY_ANY          TaskNotifyMode = 1
	TaskNotifyMode_NOTIFY_ALL          TaskNotifyMode = 2
	TaskNotifyMode_NOTIFY_EVERY_REGION TaskNotifyMode = 3
)

// Enum value maps for TaskNotifyMode.
var (
	TaskNotifyMode_name = map[int32]string{
		0: "NOTIFY_LEADER",
		1: "NOTIFY_ANY",
		2: "NOTIFY_ALL",
		3: "NOTIFY_EVERY_REGION",
	}
	TaskNotifyMode_value = map[string]int32{
		"NOTIFY_LEADER":       0,
		"NOTIFY_ANY":          1,
		"NOTIFY_ALL":          2,
		"NOTIFY_EVERY_REGION": 3,
	}
)

func (x TaskNotifyMode) Enum() *TaskNotifyMode {
	p := new(TaskNotifyMode)
	*p = x
	return p
}

func (x TaskNotifyMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskNotifyMode) Descriptor() protoreflect.EnumDescriptor {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_enumTypes[2].Descriptor()
}

func (TaskNotifyMode) Type() protoreflect.EnumType {
	return &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_enumTypes[2]
}

func (x TaskNotifyMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskNotifyMode.Descriptor instead.
func (TaskNotifyMode) EnumDescriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{2}
}

type AdminError_Code int32

const (
	AdminError_kOk                            AdminError_Code = 0
	AdminError_kWorkingInprogress             AdminError_Code = 1
	AdminError_kServiceExists                 AdminError_Code = 2
	AdminError_kServiceNotExists              AdminError_Code = 3
	AdminError_kServiceNotInServingState      AdminError_Code = 4
	AdminError_kTableExists                   AdminError_Code = 5
	AdminError_kTableNotExists                AdminError_Code = 6
	AdminError_kAccessZkError                 AdminError_Code = 7
	AdminError_kNotImplemented                AdminError_Code = 8
	AdminError_kNodeNotExisting               AdminError_Code = 9
	AdminError_kInvalidParameter              AdminError_Code = 10
	AdminError_kServerNotLeader               AdminError_Code = 11
	AdminError_kNotEnoughResource             AdminError_Code = 12
	AdminError_kDuplicateRequest              AdminError_Code = 13
	AdminError_kTaskNotExists                 AdminError_Code = 14
	AdminError_kTableNotEmpty                 AdminError_Code = 15
	AdminError_kTaskExists                    AdminError_Code = 16
	AdminError_kUnsupportedTaskName           AdminError_Code = 17
	AdminError_kDependencyServiceError        AdminError_Code = 18
	AdminError_kOccupiedTableInTrafficManager AdminError_Code = 19
	AdminError_kEmptyHttpBody                 AdminError_Code = 1001
	AdminError_kHttpDecodeFailed              AdminError_Code = 1002
	AdminError_kHttpPostFailed                AdminError_Code = 1003
)

// Enum value maps for AdminError_Code.
var (
	AdminError_Code_name = map[int32]string{
		0:    "kOk",
		1:    "kWorkingInprogress",
		2:    "kServiceExists",
		3:    "kServiceNotExists",
		4:    "kServiceNotInServingState",
		5:    "kTableExists",
		6:    "kTableNotExists",
		7:    "kAccessZkError",
		8:    "kNotImplemented",
		9:    "kNodeNotExisting",
		10:   "kInvalidParameter",
		11:   "kServerNotLeader",
		12:   "kNotEnoughResource",
		13:   "kDuplicateRequest",
		14:   "kTaskNotExists",
		15:   "kTableNotEmpty",
		16:   "kTaskExists",
		17:   "kUnsupportedTaskName",
		18:   "kDependencyServiceError",
		19:   "kOccupiedTableInTrafficManager",
		1001: "kEmptyHttpBody",
		1002: "kHttpDecodeFailed",
		1003: "kHttpPostFailed",
	}
	AdminError_Code_value = map[string]int32{
		"kOk":                            0,
		"kWorkingInprogress":             1,
		"kServiceExists":                 2,
		"kServiceNotExists":              3,
		"kServiceNotInServingState":      4,
		"kTableExists":                   5,
		"kTableNotExists":                6,
		"kAccessZkError":                 7,
		"kNotImplemented":                8,
		"kNodeNotExisting":               9,
		"kInvalidParameter":              10,
		"kServerNotLeader":               11,
		"kNotEnoughResource":             12,
		"kDuplicateRequest":              13,
		"kTaskNotExists":                 14,
		"kTableNotEmpty":                 15,
		"kTaskExists":                    16,
		"kUnsupportedTaskName":           17,
		"kDependencyServiceError":        18,
		"kOccupiedTableInTrafficManager": 19,
		"kEmptyHttpBody":                 1001,
		"kHttpDecodeFailed":              1002,
		"kHttpPostFailed":                1003,
	}
)

func (x AdminError_Code) Enum() *AdminError_Code {
	p := new(AdminError_Code)
	*p = x
	return p
}

func (x AdminError_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdminError_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_enumTypes[3].Descriptor()
}

func (AdminError_Code) Type() protoreflect.EnumType {
	return &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_enumTypes[3]
}

func (x AdminError_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdminError_Code.Descriptor instead.
func (AdminError_Code) EnumDescriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{0, 0}
}

type TaskExecInfo_FinishStatus int32

const (
	TaskExecInfo_kFinished  TaskExecInfo_FinishStatus = 0
	TaskExecInfo_kCancelled TaskExecInfo_FinishStatus = 1
)

// Enum value maps for TaskExecInfo_FinishStatus.
var (
	TaskExecInfo_FinishStatus_name = map[int32]string{
		0: "kFinished",
		1: "kCancelled",
	}
	TaskExecInfo_FinishStatus_value = map[string]int32{
		"kFinished":  0,
		"kCancelled": 1,
	}
)

func (x TaskExecInfo_FinishStatus) Enum() *TaskExecInfo_FinishStatus {
	p := new(TaskExecInfo_FinishStatus)
	*p = x
	return p
}

func (x TaskExecInfo_FinishStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskExecInfo_FinishStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_enumTypes[4].Descriptor()
}

func (TaskExecInfo_FinishStatus) Type() protoreflect.EnumType {
	return &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_enumTypes[4]
}

func (x TaskExecInfo_FinishStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskExecInfo_FinishStatus.Descriptor instead.
func (TaskExecInfo_FinishStatus) EnumDescriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{31, 0}
}

type AdminError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AdminError) Reset() {
	*x = AdminError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminError) ProtoMessage() {}

func (x *AdminError) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminError.ProtoReflect.Descriptor instead.
func (*AdminError) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{0}
}

type ListServicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListServicesRequest) Reset() {
	*x = ListServicesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListServicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListServicesRequest) ProtoMessage() {}

func (x *ListServicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListServicesRequest.ProtoReflect.Descriptor instead.
func (*ListServicesRequest) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{1}
}

type ListServicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       *ErrorStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status"`
	ServiceNames []string     `protobuf:"bytes,2,rep,name=service_names,json=serviceNames,proto3" json:"service_names"`
}

func (x *ListServicesResponse) Reset() {
	*x = ListServicesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListServicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListServicesResponse) ProtoMessage() {}

func (x *ListServicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListServicesResponse.ProtoReflect.Descriptor instead.
func (*ListServicesResponse) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{2}
}

func (x *ListServicesResponse) GetStatus() *ErrorStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListServicesResponse) GetServiceNames() []string {
	if x != nil {
		return x.ServiceNames
	}
	return nil
}

type NodeHints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hub string `protobuf:"bytes,1,opt,name=hub,proto3" json:"hub"`
}

func (x *NodeHints) Reset() {
	*x = NodeHints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeHints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeHints) ProtoMessage() {}

func (x *NodeHints) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeHints.ProtoReflect.Descriptor instead.
func (*NodeHints) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{3}
}

func (x *NodeHints) GetHub() string {
	if x != nil {
		return x.Hub
	}
	return ""
}

type ScheduleOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnablePrimaryScheduler bool `protobuf:"varint,1,opt,name=enable_primary_scheduler,json=enablePrimaryScheduler,proto3" json:"enable_primary_scheduler"`
	// a number between [1, 1000],
	// which means max_sched_ratio/1000 partitions will be scheduled at most
	MaxSchedRatio int32 `protobuf:"varint,2,opt,name=max_sched_ratio,json=maxSchedRatio,proto3" json:"max_sched_ratio"`
	// algorithm used to score a node
	Estimator string `protobuf:"bytes,3,opt,name=estimator,proto3" json:"estimator"`
	// request to rescore of all nodes currently in this service(offline nodes excepted)
	// before a new round of scheduler is running,
	// which implies that failure of a node's scoring will block the scheduler.
	//
	// cases that a node's score may fail:
	//  1. a newly registered node, which haven't reported its server info yet.
	//  2. a dead node, which can't report its server info
	//  3. an stated node, which don't report proper server info to related estimator
	//  4. a buggy node, which fail to report the valid server info
	//
	// if an estimator is changed,  the flag will be set automatically by the system.
	// which means that there's no need for an admin to set this flag manually in most cases.
	ForceRescoreNodes bool `protobuf:"varint,4,opt,name=force_rescore_nodes,json=forceRescoreNodes,proto3" json:"force_rescore_nodes"`
	// whether to do partition balancing during splitting
	EnableSplitBalancer bool `protobuf:"varint,5,opt,name=enable_split_balancer,json=enableSplitBalancer,proto3" json:"enable_split_balancer"`
	// whether to add replica first in hash group arranger
	HashArrangerAddReplicaFirst bool `protobuf:"varint,6,opt,name=hash_arranger_add_replica_first,json=hashArrangerAddReplicaFirst,proto3" json:"hash_arranger_add_replica_first"`
	// if add replica first in hash arranger, the actual replica count may exceed the
	// the estimated threshold during scheduling. the following option
	// specifies the max value which exceed the threshold.
	HashArrangerMaxOverflowReplicas int32 `protobuf:"varint,7,opt,name=hash_arranger_max_overflow_replicas,json=hashArrangerMaxOverflowReplicas,proto3" json:"hash_arranger_max_overflow_replicas"`
	// if a partition has learner(s), we call it learning partition.
	// we try to limit learning parts of nodes as a learning partition may
	// consume lots network (in/out) bandwith, no matter this node is learning
	// from others or learned by others
	//
	// a default value of 0 means no limitation, a negative value means limited all
	MaxLearningPartsPerNode int32 `protobuf:"varint,8,opt,name=max_learning_parts_per_node,json=maxLearningPartsPerNode,proto3" json:"max_learning_parts_per_node"`
}

func (x *ScheduleOptions) Reset() {
	*x = ScheduleOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleOptions) ProtoMessage() {}

func (x *ScheduleOptions) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleOptions.ProtoReflect.Descriptor instead.
func (*ScheduleOptions) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{4}
}

func (x *ScheduleOptions) GetEnablePrimaryScheduler() bool {
	if x != nil {
		return x.EnablePrimaryScheduler
	}
	return false
}

func (x *ScheduleOptions) GetMaxSchedRatio() int32 {
	if x != nil {
		return x.MaxSchedRatio
	}
	return 0
}

func (x *ScheduleOptions) GetEstimator() string {
	if x != nil {
		return x.Estimator
	}
	return ""
}

func (x *ScheduleOptions) GetForceRescoreNodes() bool {
	if x != nil {
		return x.ForceRescoreNodes
	}
	return false
}

func (x *ScheduleOptions) GetEnableSplitBalancer() bool {
	if x != nil {
		return x.EnableSplitBalancer
	}
	return false
}

func (x *ScheduleOptions) GetHashArrangerAddReplicaFirst() bool {
	if x != nil {
		return x.HashArrangerAddReplicaFirst
	}
	return false
}

func (x *ScheduleOptions) GetHashArrangerMaxOverflowReplicas() int32 {
	if x != nil {
		return x.HashArrangerMaxOverflowReplicas
	}
	return 0
}

func (x *ScheduleOptions) GetMaxLearningPartsPerNode() int32 {
	if x != nil {
		return x.MaxLearningPartsPerNode
	}
	return 0
}

type CreateServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name"`
	// name should be unique for different hubs
	NodesHubs         []*ReplicaHub         `protobuf:"bytes,2,rep,name=nodes_hubs,json=nodesHubs,proto3" json:"nodes_hubs"`
	ServiceType       ServiceType           `protobuf:"varint,3,opt,name=service_type,json=serviceType,proto3,enum=colossusdb.ServiceType" json:"service_type"`
	FailureDomainType NodeFailureDomainType `protobuf:"varint,4,opt,name=failure_domain_type,json=failureDomainType,proto3,enum=colossusdb.NodeFailureDomainType" json:"failure_domain_type"`
	StaticIndexed     bool                  `protobuf:"varint,5,opt,name=static_indexed,json=staticIndexed,proto3" json:"static_indexed"`
	UsePaz            bool                  `protobuf:"varint,6,opt,name=use_paz,json=usePaz,proto3" json:"use_paz"`
	ServiceKsn        string                `protobuf:"bytes,7,opt,name=service_ksn,json=serviceKsn,proto3" json:"service_ksn"`
}

func (x *CreateServiceRequest) Reset() {
	*x = CreateServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateServiceRequest) ProtoMessage() {}

func (x *CreateServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateServiceRequest.ProtoReflect.Descriptor instead.
func (*CreateServiceRequest) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{5}
}

func (x *CreateServiceRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *CreateServiceRequest) GetNodesHubs() []*ReplicaHub {
	if x != nil {
		return x.NodesHubs
	}
	return nil
}

func (x *CreateServiceRequest) GetServiceType() ServiceType {
	if x != nil {
		return x.ServiceType
	}
	return ServiceType_invalid
}

func (x *CreateServiceRequest) GetFailureDomainType() NodeFailureDomainType {
	if x != nil {
		return x.FailureDomainType
	}
	return NodeFailureDomainType_HOST
}

func (x *CreateServiceRequest) GetStaticIndexed() bool {
	if x != nil {
		return x.StaticIndexed
	}
	return false
}

func (x *CreateServiceRequest) GetUsePaz() bool {
	if x != nil {
		return x.UsePaz
	}
	return false
}

func (x *CreateServiceRequest) GetServiceKsn() string {
	if x != nil {
		return x.ServiceKsn
	}
	return ""
}

type DeleteServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name"`
}

func (x *DeleteServiceRequest) Reset() {
	*x = DeleteServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteServiceRequest) ProtoMessage() {}

func (x *DeleteServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteServiceRequest.ProtoReflect.Descriptor instead.
func (*DeleteServiceRequest) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteServiceRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

type QueryServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name"`
}

func (x *QueryServiceRequest) Reset() {
	*x = QueryServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryServiceRequest) ProtoMessage() {}

func (x *QueryServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryServiceRequest.ProtoReflect.Descriptor instead.
func (*QueryServiceRequest) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{7}
}

func (x *QueryServiceRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

type QueryServiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status            *ErrorStatus          `protobuf:"bytes,1,opt,name=status,proto3" json:"status"`
	NodesHubs         []*ReplicaHub         `protobuf:"bytes,2,rep,name=nodes_hubs,json=nodesHubs,proto3" json:"nodes_hubs"`
	ScheduleEnabled   bool                  `protobuf:"varint,3,opt,name=schedule_enabled,json=scheduleEnabled,proto3" json:"schedule_enabled"`
	ServiceType       ServiceType           `protobuf:"varint,4,opt,name=service_type,json=serviceType,proto3,enum=colossusdb.ServiceType" json:"service_type"`
	KessPollerEnabled bool                  `protobuf:"varint,5,opt,name=kess_poller_enabled,json=kessPollerEnabled,proto3" json:"kess_poller_enabled"`
	FailureDomainType NodeFailureDomainType `protobuf:"varint,6,opt,name=failure_domain_type,json=failureDomainType,proto3,enum=colossusdb.NodeFailureDomainType" json:"failure_domain_type"`
	StaticIndexed     bool                  `protobuf:"varint,7,opt,name=static_indexed,json=staticIndexed,proto3" json:"static_indexed"`
	SchedOpts         *ScheduleOptions      `protobuf:"bytes,8,opt,name=sched_opts,json=schedOpts,proto3" json:"sched_opts"`
	UsePaz            bool                  `protobuf:"varint,9,opt,name=use_paz,json=usePaz,proto3" json:"use_paz"`
	ServiceKsn        string                `protobuf:"bytes,10,opt,name=service_ksn,json=serviceKsn,proto3" json:"service_ksn"`
}

func (x *QueryServiceResponse) Reset() {
	*x = QueryServiceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryServiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryServiceResponse) ProtoMessage() {}

func (x *QueryServiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryServiceResponse.ProtoReflect.Descriptor instead.
func (*QueryServiceResponse) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{8}
}

func (x *QueryServiceResponse) GetStatus() *ErrorStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *QueryServiceResponse) GetNodesHubs() []*ReplicaHub {
	if x != nil {
		return x.NodesHubs
	}
	return nil
}

func (x *QueryServiceResponse) GetScheduleEnabled() bool {
	if x != nil {
		return x.ScheduleEnabled
	}
	return false
}

func (x *QueryServiceResponse) GetServiceType() ServiceType {
	if x != nil {
		return x.ServiceType
	}
	return ServiceType_invalid
}

func (x *QueryServiceResponse) GetKessPollerEnabled() bool {
	if x != nil {
		return x.KessPollerEnabled
	}
	return false
}

func (x *QueryServiceResponse) GetFailureDomainType() NodeFailureDomainType {
	if x != nil {
		return x.FailureDomainType
	}
	return NodeFailureDomainType_HOST
}

func (x *QueryServiceResponse) GetStaticIndexed() bool {
	if x != nil {
		return x.StaticIndexed
	}
	return false
}

func (x *QueryServiceResponse) GetSchedOpts() *ScheduleOptions {
	if x != nil {
		return x.SchedOpts
	}
	return nil
}

func (x *QueryServiceResponse) GetUsePaz() bool {
	if x != nil {
		return x.UsePaz
	}
	return false
}

func (x *QueryServiceResponse) GetServiceKsn() string {
	if x != nil {
		return x.ServiceKsn
	}
	return ""
}

type AddHubsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName string        `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name"`
	NodesHubs   []*ReplicaHub `protobuf:"bytes,2,rep,name=nodes_hubs,json=nodesHubs,proto3" json:"nodes_hubs"`
	// if true, added hubs will try to gather nodes from other hubs of same az
	TryGather bool `protobuf:"varint,3,opt,name=try_gather,json=tryGather,proto3" json:"try_gather"`
}

func (x *AddHubsRequest) Reset() {
	*x = AddHubsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddHubsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddHubsRequest) ProtoMessage() {}

func (x *AddHubsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddHubsRequest.ProtoReflect.Descriptor instead.
func (*AddHubsRequest) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{9}
}

func (x *AddHubsRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *AddHubsRequest) GetNodesHubs() []*ReplicaHub {
	if x != nil {
		return x.NodesHubs
	}
	return nil
}

func (x *AddHubsRequest) GetTryGather() bool {
	if x != nil {
		return x.TryGather
	}
	return false
}

type RemoveHubsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName string        `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name"`
	NodesHubs   []*ReplicaHub `protobuf:"bytes,2,rep,name=nodes_hubs,json=nodesHubs,proto3" json:"nodes_hubs"`
	// if true, removed hubs will try to remove nodes to other hubs of same az
	TryScatter bool `protobuf:"varint,3,opt,name=try_scatter,json=tryScatter,proto3" json:"try_scatter"`
}

func (x *RemoveHubsRequest) Reset() {
	*x = RemoveHubsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveHubsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveHubsRequest) ProtoMessage() {}

func (x *RemoveHubsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveHubsRequest.ProtoReflect.Descriptor instead.
func (*RemoveHubsRequest) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{10}
}

func (x *RemoveHubsRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *RemoveHubsRequest) GetNodesHubs() []*ReplicaHub {
	if x != nil {
		return x.NodesHubs
	}
	return nil
}

func (x *RemoveHubsRequest) GetTryScatter() bool {
	if x != nil {
		return x.TryScatter
	}
	return false
}

type UpdateHubsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name"`
	// currently only `disallowed_roles` fields are allow to be update
	NodesHubs []*ReplicaHub `protobuf:"bytes,2,rep,name=nodes_hubs,json=nodesHubs,proto3" json:"nodes_hubs"`
}

func (x *UpdateHubsRequest) Reset() {
	*x = UpdateHubsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHubsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHubsRequest) ProtoMessage() {}

func (x *UpdateHubsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHubsRequest.ProtoReflect.Descriptor instead.
func (*UpdateHubsRequest) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateHubsRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *UpdateHubsRequest) GetNodesHubs() []*ReplicaHub {
	if x != nil {
		return x.NodesHubs
	}
	return nil
}

type GiveHintsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name"`
	// <host:port>|host -> NodeHint
	// if hint_key(host or host:port) not exists, will create a new one
	// if hint_key(host or host:port) exists, will update hint
	//
	// hints are ONESHOT, which means that
	// the hint will be cleaned once it's evaluated,
	// no matter it's adopted or not
	Hints map[string]*NodeHints `protobuf:"bytes,2,rep,name=hints,proto3" json:"hints" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// if match_port is false, hint key with format host:port will stripped to host
	MatchPort bool `protobuf:"varint,3,opt,name=match_port,json=matchPort,proto3" json:"match_port"`
}

func (x *GiveHintsRequest) Reset() {
	*x = GiveHintsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GiveHintsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GiveHintsRequest) ProtoMessage() {}

func (x *GiveHintsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GiveHintsRequest.ProtoReflect.Descriptor instead.
func (*GiveHintsRequest) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{12}
}

func (x *GiveHintsRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *GiveHintsRequest) GetHints() map[string]*NodeHints {
	if x != nil {
		return x.Hints
	}
	return nil
}

func (x *GiveHintsRequest) GetMatchPort() bool {
	if x != nil {
		return x.MatchPort
	}
	return false
}

type RecallHintsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName string     `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name"`
	Nodes       []*RpcNode `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes"`
	// if match_port is true, then will remove hints of node_name:port
	// if match_port is false, then will remove hints of node_name
	MatchPort bool `protobuf:"varint,3,opt,name=match_port,json=matchPort,proto3" json:"match_port"`
}

func (x *RecallHintsRequest) Reset() {
	*x = RecallHintsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecallHintsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecallHintsRequest) ProtoMessage() {}

func (x *RecallHintsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecallHintsRequest.ProtoReflect.Descriptor instead.
func (*RecallHintsRequest) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{13}
}

func (x *RecallHintsRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *RecallHintsRequest) GetNodes() []*RpcNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *RecallHintsRequest) GetMatchPort() bool {
	if x != nil {
		return x.MatchPort
	}
	return false
}

type UpdateScheduleOptionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName        string           `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name"`
	SchedOpts          *ScheduleOptions `protobuf:"bytes,2,opt,name=sched_opts,json=schedOpts,proto3" json:"sched_opts"`
	UpdatedOptionNames []string         `protobuf:"bytes,3,rep,name=updated_option_names,json=updatedOptionNames,proto3" json:"updated_option_names"`
}

func (x *UpdateScheduleOptionsRequest) Reset() {
	*x = UpdateScheduleOptionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateScheduleOptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateScheduleOptionsRequest) ProtoMessage() {}

func (x *UpdateScheduleOptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateScheduleOptionsRequest.ProtoReflect.Descriptor instead.
func (*UpdateScheduleOptionsRequest) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateScheduleOptionsRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *UpdateScheduleOptionsRequest) GetSchedOpts() *ScheduleOptions {
	if x != nil {
		return x.SchedOpts
	}
	return nil
}

func (x *UpdateScheduleOptionsRequest) GetUpdatedOptionNames() []string {
	if x != nil {
		return x.UpdatedOptionNames
	}
	return nil
}

type PeriodicTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskName                string            `protobuf:"bytes,1,opt,name=task_name,json=taskName,proto3" json:"task_name"`
	FirstTriggerUnixSeconds int64             `protobuf:"varint,2,opt,name=first_trigger_unix_seconds,json=firstTriggerUnixSeconds,proto3" json:"first_trigger_unix_seconds"`
	PeriodSeconds           int64             `protobuf:"varint,3,opt,name=period_seconds,json=periodSeconds,proto3" json:"period_seconds"`
	MaxConcurrencyPerNode   int32             `protobuf:"varint,4,opt,name=max_concurrency_per_node,json=maxConcurrencyPerNode,proto3" json:"max_concurrency_per_node"`
	NotifyMode              TaskNotifyMode    `protobuf:"varint,5,opt,name=notify_mode,json=notifyMode,proto3,enum=colossusdb.TaskNotifyMode" json:"notify_mode"`
	Args                    map[string]string `protobuf:"bytes,6,rep,name=args,proto3" json:"args" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	KeepNums                int32             `protobuf:"varint,7,opt,name=keep_nums,json=keepNums,proto3" json:"keep_nums"`
	Paused                  bool              `protobuf:"varint,8,opt,name=paused,proto3" json:"paused"`
	MaxConcurrentNodes      int32             `protobuf:"varint,9,opt,name=max_concurrent_nodes,json=maxConcurrentNodes,proto3" json:"max_concurrent_nodes"`
	// please pay attention to the flags "paused" and "freezed".
	// "paused" is a soft status set by user, which can be reset by UpdateTask rpc.
	// "freezed" is a hard status set by partition-keeper, which means the
	// system MUST STOP the task execution for the sake of correct program logic, and
	// the status CAN ONLY be reset by the system itself.
	Freezed           bool  `protobuf:"varint,10,opt,name=freezed,proto3" json:"freezed"`
	MaxConcurrentHubs int32 `protobuf:"varint,11,opt,name=max_concurrent_hubs,json=maxConcurrentHubs,proto3" json:"max_concurrent_hubs"`
}

func (x *PeriodicTask) Reset() {
	*x = PeriodicTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeriodicTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeriodicTask) ProtoMessage() {}

func (x *PeriodicTask) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeriodicTask.ProtoReflect.Descriptor instead.
func (*PeriodicTask) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{15}
}

func (x *PeriodicTask) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *PeriodicTask) GetFirstTriggerUnixSeconds() int64 {
	if x != nil {
		return x.FirstTriggerUnixSeconds
	}
	return 0
}

func (x *PeriodicTask) GetPeriodSeconds() int64 {
	if x != nil {
		return x.PeriodSeconds
	}
	return 0
}

func (x *PeriodicTask) GetMaxConcurrencyPerNode() int32 {
	if x != nil {
		return x.MaxConcurrencyPerNode
	}
	return 0
}

func (x *PeriodicTask) GetNotifyMode() TaskNotifyMode {
	if x != nil {
		return x.NotifyMode
	}
	return TaskNotifyMode_NOTIFY_LEADER
}

func (x *PeriodicTask) GetArgs() map[string]string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *PeriodicTask) GetKeepNums() int32 {
	if x != nil {
		return x.KeepNums
	}
	return 0
}

func (x *PeriodicTask) GetPaused() bool {
	if x != nil {
		return x.Paused
	}
	return false
}

func (x *PeriodicTask) GetMaxConcurrentNodes() int32 {
	if x != nil {
		return x.MaxConcurrentNodes
	}
	return 0
}

func (x *PeriodicTask) GetFreezed() bool {
	if x != nil {
		return x.Freezed
	}
	return false
}

func (x *PeriodicTask) GetMaxConcurrentHubs() int32 {
	if x != nil {
		return x.MaxConcurrentHubs
	}
	return 0
}

type Table struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId    int32  `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id"`
	TableName  string `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name"`
	HashMethod string `protobuf:"bytes,3,opt,name=hash_method,json=hashMethod,proto3" json:"hash_method"`
	PartsCount int32  `protobuf:"varint,4,opt,name=parts_count,json=partsCount,proto3" json:"parts_count"`
	// stable configs for table
	JsonArgs        string `protobuf:"bytes,5,opt,name=json_args,json=jsonArgs,proto3" json:"json_args"`
	BelongToService string `protobuf:"bytes,6,opt,name=belong_to_service,json=belongToService,proto3" json:"belong_to_service"`
	// dynamic configs for table
	KconfPath                  string `protobuf:"bytes,7,opt,name=kconf_path,json=kconfPath,proto3" json:"kconf_path"`
	RecoverPartitionsFromRoute bool   `protobuf:"varint,8,opt,name=recover_partitions_from_route,json=recoverPartitionsFromRoute,proto3" json:"recover_partitions_from_route"`
	// a number between [0,100],
	// specify the percentage of nodes that will receive the table schedule
	// commands. this parameter only works in UpdateTableRequest. for
	// CreateTableRequest, despite other values may given, the schedule_grayscale
	// will reset to 100 if the table doesn't do recovery and 0 if it does.
	ScheduleGrayscale int32  `protobuf:"varint,9,opt,name=schedule_grayscale,json=scheduleGrayscale,proto3" json:"schedule_grayscale"`
	RestoreVersion    int64  `protobuf:"varint,10,opt,name=restore_version,json=restoreVersion,proto3" json:"restore_version"`
	SplitVersion      int32  `protobuf:"varint,11,opt,name=split_version,json=splitVersion,proto3" json:"split_version"`
	BaseTable         string `protobuf:"bytes,12,opt,name=base_table,json=baseTable,proto3" json:"base_table"`
}

func (x *Table) Reset() {
	*x = Table{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Table) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Table) ProtoMessage() {}

func (x *Table) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Table.ProtoReflect.Descriptor instead.
func (*Table) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{16}
}

func (x *Table) GetTableId() int32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *Table) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *Table) GetHashMethod() string {
	if x != nil {
		return x.HashMethod
	}
	return ""
}

func (x *Table) GetPartsCount() int32 {
	if x != nil {
		return x.PartsCount
	}
	return 0
}

func (x *Table) GetJsonArgs() string {
	if x != nil {
		return x.JsonArgs
	}
	return ""
}

func (x *Table) GetBelongToService() string {
	if x != nil {
		return x.BelongToService
	}
	return ""
}

func (x *Table) GetKconfPath() string {
	if x != nil {
		return x.KconfPath
	}
	return ""
}

func (x *Table) GetRecoverPartitionsFromRoute() bool {
	if x != nil {
		return x.RecoverPartitionsFromRoute
	}
	return false
}

func (x *Table) GetScheduleGrayscale() int32 {
	if x != nil {
		return x.ScheduleGrayscale
	}
	return 0
}

func (x *Table) GetRestoreVersion() int64 {
	if x != nil {
		return x.RestoreVersion
	}
	return 0
}

func (x *Table) GetSplitVersion() int32 {
	if x != nil {
		return x.SplitVersion
	}
	return 0
}

func (x *Table) GetBaseTable() string {
	if x != nil {
		return x.BaseTable
	}
	return ""
}

type CreateTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name"`
	// you can just keep table_id empty when create table
	Table            *Table `protobuf:"bytes,2,opt,name=table,proto3" json:"table"`
	RestorePath      string `protobuf:"bytes,3,opt,name=restore_path,json=restorePath,proto3" json:"restore_path"`
	TrafficKconfPath string `protobuf:"bytes,4,opt,name=traffic_kconf_path,json=trafficKconfPath,proto3" json:"traffic_kconf_path"`
}

func (x *CreateTableRequest) Reset() {
	*x = CreateTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTableRequest) ProtoMessage() {}

func (x *CreateTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTableRequest.ProtoReflect.Descriptor instead.
func (*CreateTableRequest) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{17}
}

func (x *CreateTableRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *CreateTableRequest) GetTable() *Table {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *CreateTableRequest) GetRestorePath() string {
	if x != nil {
		return x.RestorePath
	}
	return ""
}

func (x *CreateTableRequest) GetTrafficKconfPath() string {
	if x != nil {
		return x.TrafficKconfPath
	}
	return ""
}

type DeleteTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName         string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name"`
	TableName           string `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name"`
	CleanTaskSideEffect bool   `protobuf:"varint,3,opt,name=clean_task_side_effect,json=cleanTaskSideEffect,proto3" json:"clean_task_side_effect"`
	CleanDelayMinutes   int32  `protobuf:"varint,4,opt,name=clean_delay_minutes,json=cleanDelayMinutes,proto3" json:"clean_delay_minutes"`
}

func (x *DeleteTableRequest) Reset() {
	*x = DeleteTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTableRequest) ProtoMessage() {}

func (x *DeleteTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTableRequest.ProtoReflect.Descriptor instead.
func (*DeleteTableRequest) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{18}
}

func (x *DeleteTableRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *DeleteTableRequest) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *DeleteTableRequest) GetCleanTaskSideEffect() bool {
	if x != nil {
		return x.CleanTaskSideEffect
	}
	return false
}

func (x *DeleteTableRequest) GetCleanDelayMinutes() int32 {
	if x != nil {
		return x.CleanDelayMinutes
	}
	return 0
}

type RestoreOpts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxConcurrentNodesPerHub  int32 `protobuf:"varint,1,opt,name=max_concurrent_nodes_per_hub,json=maxConcurrentNodesPerHub,proto3" json:"max_concurrent_nodes_per_hub"`
	MaxConcurrentPartsPerNode int32 `protobuf:"varint,2,opt,name=max_concurrent_parts_per_node,json=maxConcurrentPartsPerNode,proto3" json:"max_concurrent_parts_per_node"`
}

func (x *RestoreOpts) Reset() {
	*x = RestoreOpts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreOpts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreOpts) ProtoMessage() {}

func (x *RestoreOpts) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreOpts.ProtoReflect.Descriptor instead.
func (*RestoreOpts) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{19}
}

func (x *RestoreOpts) GetMaxConcurrentNodesPerHub() int32 {
	if x != nil {
		return x.MaxConcurrentNodesPerHub
	}
	return 0
}

func (x *RestoreOpts) GetMaxConcurrentPartsPerNode() int32 {
	if x != nil {
		return x.MaxConcurrentPartsPerNode
	}
	return 0
}

type RestoreTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName string       `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name"`
	TableName   string       `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name"`
	RestorePath string       `protobuf:"bytes,3,opt,name=restore_path,json=restorePath,proto3" json:"restore_path"`
	Opts        *RestoreOpts `protobuf:"bytes,4,opt,name=opts,proto3" json:"opts"`
}

func (x *RestoreTableRequest) Reset() {
	*x = RestoreTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreTableRequest) ProtoMessage() {}

func (x *RestoreTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreTableRequest.ProtoReflect.Descriptor instead.
func (*RestoreTableRequest) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{20}
}

func (x *RestoreTableRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *RestoreTableRequest) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *RestoreTableRequest) GetRestorePath() string {
	if x != nil {
		return x.RestorePath
	}
	return ""
}

func (x *RestoreTableRequest) GetOpts() *RestoreOpts {
	if x != nil {
		return x.Opts
	}
	return nil
}

type ListTablesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name"`
}

func (x *ListTablesRequest) Reset() {
	*x = ListTablesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTablesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTablesRequest) ProtoMessage() {}

func (x *ListTablesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTablesRequest.ProtoReflect.Descriptor instead.
func (*ListTablesRequest) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{21}
}

func (x *ListTablesRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

type ListTablesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *ErrorStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status"`
	Tables []*Table     `protobuf:"bytes,2,rep,name=tables,proto3" json:"tables"`
}

func (x *ListTablesResponse) Reset() {
	*x = ListTablesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTablesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTablesResponse) ProtoMessage() {}

func (x *ListTablesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTablesResponse.ProtoReflect.Descriptor instead.
func (*ListTablesResponse) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{22}
}

func (x *ListTablesResponse) GetStatus() *ErrorStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListTablesResponse) GetTables() []*Table {
	if x != nil {
		return x.Tables
	}
	return nil
}

type QueryTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName    string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name"`
	TableName      string `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name"`
	WithTasks      bool   `protobuf:"varint,3,opt,name=with_tasks,json=withTasks,proto3" json:"with_tasks"`
	WithPartitions bool   `protobuf:"varint,4,opt,name=with_partitions,json=withPartitions,proto3" json:"with_partitions"`
}

func (x *QueryTableRequest) Reset() {
	*x = QueryTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTableRequest) ProtoMessage() {}

func (x *QueryTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTableRequest.ProtoReflect.Descriptor instead.
func (*QueryTableRequest) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{23}
}

func (x *QueryTableRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *QueryTableRequest) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *QueryTableRequest) GetWithTasks() bool {
	if x != nil {
		return x.WithTasks
	}
	return false
}

func (x *QueryTableRequest) GetWithPartitions() bool {
	if x != nil {
		return x.WithPartitions
	}
	return false
}

type QueryTableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     *ErrorStatus         `protobuf:"bytes,1,opt,name=status,proto3" json:"status"`
	Table      *Table               `protobuf:"bytes,2,opt,name=table,proto3" json:"table"`
	Tasks      []*PeriodicTask      `protobuf:"bytes,4,rep,name=tasks,proto3" json:"tasks"`
	Partitions []*PartitionPeerInfo `protobuf:"bytes,5,rep,name=partitions,proto3" json:"partitions"`
}

func (x *QueryTableResponse) Reset() {
	*x = QueryTableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTableResponse) ProtoMessage() {}

func (x *QueryTableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTableResponse.ProtoReflect.Descriptor instead.
func (*QueryTableResponse) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{24}
}

func (x *QueryTableResponse) GetStatus() *ErrorStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *QueryTableResponse) GetTable() *Table {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *QueryTableResponse) GetTasks() []*PeriodicTask {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *QueryTableResponse) GetPartitions() []*PartitionPeerInfo {
	if x != nil {
		return x.Partitions
	}
	return nil
}

type QueryPartitionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName   string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name"`
	TableName     string `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name"`
	FromPartition int32  `protobuf:"varint,3,opt,name=from_partition,json=fromPartition,proto3" json:"from_partition"`
	ToPartition   int32  `protobuf:"varint,4,opt,name=to_partition,json=toPartition,proto3" json:"to_partition"`
}

func (x *QueryPartitionRequest) Reset() {
	*x = QueryPartitionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPartitionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPartitionRequest) ProtoMessage() {}

func (x *QueryPartitionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPartitionRequest.ProtoReflect.Descriptor instead.
func (*QueryPartitionRequest) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{25}
}

func (x *QueryPartitionRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *QueryPartitionRequest) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *QueryPartitionRequest) GetFromPartition() int32 {
	if x != nil {
		return x.FromPartition
	}
	return 0
}

func (x *QueryPartitionRequest) GetToPartition() int32 {
	if x != nil {
		return x.ToPartition
	}
	return 0
}

type QueryPartitionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status          *ErrorStatus         `protobuf:"bytes,1,opt,name=status,proto3" json:"status"`
	TablePartsCount int32                `protobuf:"varint,2,opt,name=table_parts_count,json=tablePartsCount,proto3" json:"table_parts_count"`
	Partitions      []*PartitionPeerInfo `protobuf:"bytes,3,rep,name=partitions,proto3" json:"partitions"`
}

func (x *QueryPartitionResponse) Reset() {
	*x = QueryPartitionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPartitionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPartitionResponse) ProtoMessage() {}

func (x *QueryPartitionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPartitionResponse.ProtoReflect.Descriptor instead.
func (*QueryPartitionResponse) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{26}
}

func (x *QueryPartitionResponse) GetStatus() *ErrorStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *QueryPartitionResponse) GetTablePartsCount() int32 {
	if x != nil {
		return x.TablePartsCount
	}
	return 0
}

func (x *QueryPartitionResponse) GetPartitions() []*PartitionPeerInfo {
	if x != nil {
		return x.Partitions
	}
	return nil
}

type UpdateTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name"`
	// currently only schedule_grayscale supports update
	Table *Table `protobuf:"bytes,2,opt,name=table,proto3" json:"table"`
}

func (x *UpdateTableRequest) Reset() {
	*x = UpdateTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTableRequest) ProtoMessage() {}

func (x *UpdateTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTableRequest.ProtoReflect.Descriptor instead.
func (*UpdateTableRequest) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{27}
}

func (x *UpdateTableRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *UpdateTableRequest) GetTable() *Table {
	if x != nil {
		return x.Table
	}
	return nil
}

type UpdateTableJsonArgsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name"`
	TableName   string `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name"`
	JsonArgs    string `protobuf:"bytes,3,opt,name=json_args,json=jsonArgs,proto3" json:"json_args"`
}

func (x *UpdateTableJsonArgsRequest) Reset() {
	*x = UpdateTableJsonArgsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTableJsonArgsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTableJsonArgsRequest) ProtoMessage() {}

func (x *UpdateTableJsonArgsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTableJsonArgsRequest.ProtoReflect.Descriptor instead.
func (*UpdateTableJsonArgsRequest) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{28}
}

func (x *UpdateTableJsonArgsRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *UpdateTableJsonArgsRequest) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *UpdateTableJsonArgsRequest) GetJsonArgs() string {
	if x != nil {
		return x.JsonArgs
	}
	return ""
}

type SplitTableOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxConcurrentParts int32 `protobuf:"varint,1,opt,name=max_concurrent_parts,json=maxConcurrentParts,proto3" json:"max_concurrent_parts"`
	DelaySeconds       int32 `protobuf:"varint,2,opt,name=delay_seconds,json=delaySeconds,proto3" json:"delay_seconds"`
}

func (x *SplitTableOptions) Reset() {
	*x = SplitTableOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SplitTableOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitTableOptions) ProtoMessage() {}

func (x *SplitTableOptions) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitTableOptions.ProtoReflect.Descriptor instead.
func (*SplitTableOptions) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{29}
}

func (x *SplitTableOptions) GetMaxConcurrentParts() int32 {
	if x != nil {
		return x.MaxConcurrentParts
	}
	return 0
}

func (x *SplitTableOptions) GetDelaySeconds() int32 {
	if x != nil {
		return x.DelaySeconds
	}
	return 0
}

type SplitTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName     string             `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name"`
	TableName       string             `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name"`
	NewSplitVersion int32              `protobuf:"varint,3,opt,name=new_split_version,json=newSplitVersion,proto3" json:"new_split_version"`
	Options         *SplitTableOptions `protobuf:"bytes,4,opt,name=options,proto3" json:"options"`
}

func (x *SplitTableRequest) Reset() {
	*x = SplitTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SplitTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitTableRequest) ProtoMessage() {}

func (x *SplitTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitTableRequest.ProtoReflect.Descriptor instead.
func (*SplitTableRequest) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{30}
}

func (x *SplitTableRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *SplitTableRequest) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *SplitTableRequest) GetNewSplitVersion() int32 {
	if x != nil {
		return x.NewSplitVersion
	}
	return 0
}

func (x *SplitTableRequest) GetOptions() *SplitTableOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type TaskExecInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartSecond  int64                     `protobuf:"varint,1,opt,name=start_second,json=startSecond,proto3" json:"start_second"`
	FinishSecond int64                     `protobuf:"varint,2,opt,name=finish_second,json=finishSecond,proto3" json:"finish_second"`
	SessionId    int64                     `protobuf:"varint,3,opt,name=session_id,json=sessionId,proto3" json:"session_id"`
	Args         map[string]string         `protobuf:"bytes,4,rep,name=args,proto3" json:"args" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FinishStatus TaskExecInfo_FinishStatus `protobuf:"varint,5,opt,name=finish_status,json=finishStatus,proto3,enum=colossusdb.TaskExecInfo_FinishStatus" json:"finish_status"`
}

func (x *TaskExecInfo) Reset() {
	*x = TaskExecInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskExecInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskExecInfo) ProtoMessage() {}

func (x *TaskExecInfo) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskExecInfo.ProtoReflect.Descriptor instead.
func (*TaskExecInfo) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{31}
}

func (x *TaskExecInfo) GetStartSecond() int64 {
	if x != nil {
		return x.StartSecond
	}
	return 0
}

func (x *TaskExecInfo) GetFinishSecond() int64 {
	if x != nil {
		return x.FinishSecond
	}
	return 0
}

func (x *TaskExecInfo) GetSessionId() int64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *TaskExecInfo) GetArgs() map[string]string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *TaskExecInfo) GetFinishStatus() TaskExecInfo_FinishStatus {
	if x != nil {
		return x.FinishStatus
	}
	return TaskExecInfo_kFinished
}

type OperateTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName string        `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name"`
	TableName   string        `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name"`
	Task        *PeriodicTask `protobuf:"bytes,3,opt,name=task,proto3" json:"task"`
}

func (x *OperateTaskRequest) Reset() {
	*x = OperateTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperateTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperateTaskRequest) ProtoMessage() {}

func (x *OperateTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperateTaskRequest.ProtoReflect.Descriptor instead.
func (*OperateTaskRequest) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{32}
}

func (x *OperateTaskRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *OperateTaskRequest) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *OperateTaskRequest) GetTask() *PeriodicTask {
	if x != nil {
		return x.Task
	}
	return nil
}

type DeleteTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName         string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name"`
	TableName           string `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name"`
	TaskName            string `protobuf:"bytes,3,opt,name=task_name,json=taskName,proto3" json:"task_name"`
	CleanTaskSideEffect bool   `protobuf:"varint,4,opt,name=clean_task_side_effect,json=cleanTaskSideEffect,proto3" json:"clean_task_side_effect"`
	CleanDelayMinutes   int32  `protobuf:"varint,5,opt,name=clean_delay_minutes,json=cleanDelayMinutes,proto3" json:"clean_delay_minutes"`
}

func (x *DeleteTaskRequest) Reset() {
	*x = DeleteTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTaskRequest) ProtoMessage() {}

func (x *DeleteTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTaskRequest.ProtoReflect.Descriptor instead.
func (*DeleteTaskRequest) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{33}
}

func (x *DeleteTaskRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *DeleteTaskRequest) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *DeleteTaskRequest) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *DeleteTaskRequest) GetCleanTaskSideEffect() bool {
	if x != nil {
		return x.CleanTaskSideEffect
	}
	return false
}

func (x *DeleteTaskRequest) GetCleanDelayMinutes() int32 {
	if x != nil {
		return x.CleanDelayMinutes
	}
	return 0
}

type QueryTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name"`
	TableName   string `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name"`
	TaskName    string `protobuf:"bytes,3,opt,name=task_name,json=taskName,proto3" json:"task_name"`
}

func (x *QueryTaskRequest) Reset() {
	*x = QueryTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTaskRequest) ProtoMessage() {}

func (x *QueryTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTaskRequest.ProtoReflect.Descriptor instead.
func (*QueryTaskRequest) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{34}
}

func (x *QueryTaskRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *QueryTaskRequest) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *QueryTaskRequest) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

type QueryTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *ErrorStatus    `protobuf:"bytes,1,opt,name=status,proto3" json:"status"`
	Task   *PeriodicTask   `protobuf:"bytes,2,opt,name=task,proto3" json:"task"`
	Infos  []*TaskExecInfo `protobuf:"bytes,3,rep,name=infos,proto3" json:"infos"`
}

func (x *QueryTaskResponse) Reset() {
	*x = QueryTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTaskResponse) ProtoMessage() {}

func (x *QueryTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTaskResponse.ProtoReflect.Descriptor instead.
func (*QueryTaskResponse) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{35}
}

func (x *QueryTaskResponse) GetStatus() *ErrorStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *QueryTaskResponse) GetTask() *PeriodicTask {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *QueryTaskResponse) GetInfos() []*TaskExecInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

type TriggerDeleteTaskSideEffectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name"`
	TableName   string `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name"`
	TaskName    string `protobuf:"bytes,3,opt,name=task_name,json=taskName,proto3" json:"task_name"`
}

func (x *TriggerDeleteTaskSideEffectRequest) Reset() {
	*x = TriggerDeleteTaskSideEffectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerDeleteTaskSideEffectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerDeleteTaskSideEffectRequest) ProtoMessage() {}

func (x *TriggerDeleteTaskSideEffectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerDeleteTaskSideEffectRequest.ProtoReflect.Descriptor instead.
func (*TriggerDeleteTaskSideEffectRequest) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{36}
}

func (x *TriggerDeleteTaskSideEffectRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *TriggerDeleteTaskSideEffectRequest) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *TriggerDeleteTaskSideEffectRequest) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

type TaskReplicaExecution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node     string `protobuf:"bytes,1,opt,name=node,proto3" json:"node"`
	Progress int32  `protobuf:"varint,2,opt,name=progress,proto3" json:"progress"`
}

func (x *TaskReplicaExecution) Reset() {
	*x = TaskReplicaExecution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskReplicaExecution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskReplicaExecution) ProtoMessage() {}

func (x *TaskReplicaExecution) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskReplicaExecution.ProtoReflect.Descriptor instead.
func (*TaskReplicaExecution) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{37}
}

func (x *TaskReplicaExecution) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *TaskReplicaExecution) GetProgress() int32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

type TaskPartExecution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartitionId       int32                   `protobuf:"varint,1,opt,name=partition_id,json=partitionId,proto3" json:"partition_id"`
	ReplicaExecutions []*TaskReplicaExecution `protobuf:"bytes,2,rep,name=replica_executions,json=replicaExecutions,proto3" json:"replica_executions"`
	Finish            bool                    `protobuf:"varint,3,opt,name=finish,proto3" json:"finish"`
}

func (x *TaskPartExecution) Reset() {
	*x = TaskPartExecution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskPartExecution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskPartExecution) ProtoMessage() {}

func (x *TaskPartExecution) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskPartExecution.ProtoReflect.Descriptor instead.
func (*TaskPartExecution) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{38}
}

func (x *TaskPartExecution) GetPartitionId() int32 {
	if x != nil {
		return x.PartitionId
	}
	return 0
}

func (x *TaskPartExecution) GetReplicaExecutions() []*TaskReplicaExecution {
	if x != nil {
		return x.ReplicaExecutions
	}
	return nil
}

func (x *TaskPartExecution) GetFinish() bool {
	if x != nil {
		return x.Finish
	}
	return false
}

type QueryTaskCurrentExecutionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name"`
	TableName   string `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name"`
	TaskName    string `protobuf:"bytes,3,opt,name=task_name,json=taskName,proto3" json:"task_name"`
}

func (x *QueryTaskCurrentExecutionRequest) Reset() {
	*x = QueryTaskCurrentExecutionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTaskCurrentExecutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTaskCurrentExecutionRequest) ProtoMessage() {}

func (x *QueryTaskCurrentExecutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTaskCurrentExecutionRequest.ProtoReflect.Descriptor instead.
func (*QueryTaskCurrentExecutionRequest) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{39}
}

func (x *QueryTaskCurrentExecutionRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *QueryTaskCurrentExecutionRequest) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *QueryTaskCurrentExecutionRequest) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

type QueryTaskCurrentExecutionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     *ErrorStatus         `protobuf:"bytes,1,opt,name=status,proto3" json:"status"`
	Executions []*TaskPartExecution `protobuf:"bytes,2,rep,name=executions,proto3" json:"executions"`
}

func (x *QueryTaskCurrentExecutionResponse) Reset() {
	*x = QueryTaskCurrentExecutionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTaskCurrentExecutionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTaskCurrentExecutionResponse) ProtoMessage() {}

func (x *QueryTaskCurrentExecutionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTaskCurrentExecutionResponse.ProtoReflect.Descriptor instead.
func (*QueryTaskCurrentExecutionResponse) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{40}
}

func (x *QueryTaskCurrentExecutionResponse) GetStatus() *ErrorStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *QueryTaskCurrentExecutionResponse) GetExecutions() []*TaskPartExecution {
	if x != nil {
		return x.Executions
	}
	return nil
}

type AdminNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName string      `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name"`
	Nodes       []*RpcNode  `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes"`
	Op          AdminNodeOp `protobuf:"varint,3,opt,name=op,proto3,enum=colossusdb.AdminNodeOp" json:"op"`
	MatchPort   bool        `protobuf:"varint,4,opt,name=match_port,json=matchPort,proto3" json:"match_port"`
}

func (x *AdminNodeRequest) Reset() {
	*x = AdminNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminNodeRequest) ProtoMessage() {}

func (x *AdminNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminNodeRequest.ProtoReflect.Descriptor instead.
func (*AdminNodeRequest) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{41}
}

func (x *AdminNodeRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *AdminNodeRequest) GetNodes() []*RpcNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *AdminNodeRequest) GetOp() AdminNodeOp {
	if x != nil {
		return x.Op
	}
	return AdminNodeOp_kNoop
}

func (x *AdminNodeRequest) GetMatchPort() bool {
	if x != nil {
		return x.MatchPort
	}
	return false
}

type AdminNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      *ErrorStatus   `protobuf:"bytes,1,opt,name=status,proto3" json:"status"`
	NodeResults []*ErrorStatus `protobuf:"bytes,2,rep,name=node_results,json=nodeResults,proto3" json:"node_results"`
}

func (x *AdminNodeResponse) Reset() {
	*x = AdminNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminNodeResponse) ProtoMessage() {}

func (x *AdminNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminNodeResponse.ProtoReflect.Descriptor instead.
func (*AdminNodeResponse) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{42}
}

func (x *AdminNodeResponse) GetStatus() *ErrorStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *AdminNodeResponse) GetNodeResults() []*ErrorStatus {
	if x != nil {
		return x.NodeResults
	}
	return nil
}

type UpdateNodeWeightRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName string     `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name"`
	Nodes       []*RpcNode `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes"`
	Weights     []float32  `protobuf:"fixed32,3,rep,packed,name=weights,proto3" json:"weights"`
}

func (x *UpdateNodeWeightRequest) Reset() {
	*x = UpdateNodeWeightRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNodeWeightRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNodeWeightRequest) ProtoMessage() {}

func (x *UpdateNodeWeightRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNodeWeightRequest.ProtoReflect.Descriptor instead.
func (*UpdateNodeWeightRequest) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{43}
}

func (x *UpdateNodeWeightRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *UpdateNodeWeightRequest) GetNodes() []*RpcNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *UpdateNodeWeightRequest) GetWeights() []float32 {
	if x != nil {
		return x.Weights
	}
	return nil
}

type UpdateNodeWeightResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      *ErrorStatus   `protobuf:"bytes,1,opt,name=status,proto3" json:"status"`
	NodeResults []*ErrorStatus `protobuf:"bytes,2,rep,name=node_results,json=nodeResults,proto3" json:"node_results"`
}

func (x *UpdateNodeWeightResponse) Reset() {
	*x = UpdateNodeWeightResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNodeWeightResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNodeWeightResponse) ProtoMessage() {}

func (x *UpdateNodeWeightResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNodeWeightResponse.ProtoReflect.Descriptor instead.
func (*UpdateNodeWeightResponse) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{44}
}

func (x *UpdateNodeWeightResponse) GetStatus() *ErrorStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *UpdateNodeWeightResponse) GetNodeResults() []*ErrorStatus {
	if x != nil {
		return x.NodeResults
	}
	return nil
}

type ShrinkAzRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name"`
	Az          string `protobuf:"bytes,2,opt,name=az,proto3" json:"az"`
	// should be within (0, nodes_count(az))
	// error will be returned if new_size no larger than 0.
	// nothing will happen if new_size is no smaller than nodes_count(az)
	NewSize int32 `protobuf:"varint,3,opt,name=new_size,json=newSize,proto3" json:"new_size"`
}

func (x *ShrinkAzRequest) Reset() {
	*x = ShrinkAzRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShrinkAzRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShrinkAzRequest) ProtoMessage() {}

func (x *ShrinkAzRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShrinkAzRequest.ProtoReflect.Descriptor instead.
func (*ShrinkAzRequest) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{45}
}

func (x *ShrinkAzRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *ShrinkAzRequest) GetAz() string {
	if x != nil {
		return x.Az
	}
	return ""
}

func (x *ShrinkAzRequest) GetNewSize() int32 {
	if x != nil {
		return x.NewSize
	}
	return 0
}

type ShrinkAzResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *ErrorStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status"`
	Shrinked []*RpcNode   `protobuf:"bytes,2,rep,name=shrinked,proto3" json:"shrinked"`
}

func (x *ShrinkAzResponse) Reset() {
	*x = ShrinkAzResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShrinkAzResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShrinkAzResponse) ProtoMessage() {}

func (x *ShrinkAzResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShrinkAzResponse.ProtoReflect.Descriptor instead.
func (*ShrinkAzResponse) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{46}
}

func (x *ShrinkAzResponse) GetStatus() *ErrorStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ShrinkAzResponse) GetShrinked() []*RpcNode {
	if x != nil {
		return x.Shrinked
	}
	return nil
}

type ListNodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name"`
	// if az is not empty, then the hub_name field is ignored, and
	// the nodes belong to the given az will be returned
	Az string `protobuf:"bytes,3,opt,name=az,proto3" json:"az"`
	// if hub_name is "", then all nodes will be returned,
	// otherwise only nodes on this hub will be returned
	HubName string `protobuf:"bytes,2,opt,name=hub_name,json=hubName,proto3" json:"hub_name"`
	// if table_name is not empty, then NodeBrief in ListNodesResponse will
	// only take replicas for this given table into account.
	TableName string `protobuf:"bytes,4,opt,name=table_name,json=tableName,proto3" json:"table_name"`
}

func (x *ListNodesRequest) Reset() {
	*x = ListNodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodesRequest) ProtoMessage() {}

func (x *ListNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodesRequest.ProtoReflect.Descriptor instead.
func (*ListNodesRequest) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{47}
}

func (x *ListNodesRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *ListNodesRequest) GetAz() string {
	if x != nil {
		return x.Az
	}
	return ""
}

func (x *ListNodesRequest) GetHubName() string {
	if x != nil {
		return x.HubName
	}
	return ""
}

func (x *ListNodesRequest) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

type NodeBrief struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node           *RpcNode    `protobuf:"bytes,1,opt,name=node,proto3" json:"node"`
	Op             AdminNodeOp `protobuf:"varint,2,opt,name=op,proto3,enum=colossusdb.AdminNodeOp" json:"op"`
	IsAlive        bool        `protobuf:"varint,3,opt,name=is_alive,json=isAlive,proto3" json:"is_alive"`
	PrimaryCount   int32       `protobuf:"varint,4,opt,name=primary_count,json=primaryCount,proto3" json:"primary_count"`
	SecondaryCount int32       `protobuf:"varint,5,opt,name=secondary_count,json=secondaryCount,proto3" json:"secondary_count"`
	LearnerCount   int32       `protobuf:"varint,6,opt,name=learner_count,json=learnerCount,proto3" json:"learner_count"`
	HubName        string      `protobuf:"bytes,7,opt,name=hub_name,json=hubName,proto3" json:"hub_name"`
	EstimatedCount int32       `protobuf:"varint,8,opt,name=estimated_count,json=estimatedCount,proto3" json:"estimated_count"`
	NodeUniqId     string      `protobuf:"bytes,9,opt,name=node_uniq_id,json=nodeUniqId,proto3" json:"node_uniq_id"`
	NodeIndex      string      `protobuf:"bytes,10,opt,name=node_index,json=nodeIndex,proto3" json:"node_index"`
	Weight         float32     `protobuf:"fixed32,11,opt,name=weight,proto3" json:"weight"`
	Score          int32       `protobuf:"varint,12,opt,name=score,proto3" json:"score"`
}

func (x *NodeBrief) Reset() {
	*x = NodeBrief{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeBrief) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeBrief) ProtoMessage() {}

func (x *NodeBrief) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeBrief.ProtoReflect.Descriptor instead.
func (*NodeBrief) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{48}
}

func (x *NodeBrief) GetNode() *RpcNode {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *NodeBrief) GetOp() AdminNodeOp {
	if x != nil {
		return x.Op
	}
	return AdminNodeOp_kNoop
}

func (x *NodeBrief) GetIsAlive() bool {
	if x != nil {
		return x.IsAlive
	}
	return false
}

func (x *NodeBrief) GetPrimaryCount() int32 {
	if x != nil {
		return x.PrimaryCount
	}
	return 0
}

func (x *NodeBrief) GetSecondaryCount() int32 {
	if x != nil {
		return x.SecondaryCount
	}
	return 0
}

func (x *NodeBrief) GetLearnerCount() int32 {
	if x != nil {
		return x.LearnerCount
	}
	return 0
}

func (x *NodeBrief) GetHubName() string {
	if x != nil {
		return x.HubName
	}
	return ""
}

func (x *NodeBrief) GetEstimatedCount() int32 {
	if x != nil {
		return x.EstimatedCount
	}
	return 0
}

func (x *NodeBrief) GetNodeUniqId() string {
	if x != nil {
		return x.NodeUniqId
	}
	return ""
}

func (x *NodeBrief) GetNodeIndex() string {
	if x != nil {
		return x.NodeIndex
	}
	return ""
}

func (x *NodeBrief) GetWeight() float32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *NodeBrief) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

type ListNodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *ErrorStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status"`
	Nodes  []*NodeBrief `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes"`
}

func (x *ListNodesResponse) Reset() {
	*x = ListNodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodesResponse) ProtoMessage() {}

func (x *ListNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodesResponse.ProtoReflect.Descriptor instead.
func (*ListNodesResponse) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{49}
}

func (x *ListNodesResponse) GetStatus() *ErrorStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListNodesResponse) GetNodes() []*NodeBrief {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type QueryNodeInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name"`
	NodeName    string `protobuf:"bytes,2,opt,name=node_name,json=nodeName,proto3" json:"node_name"`
	Port        int32  `protobuf:"varint,3,opt,name=port,proto3" json:"port"`
	// if table_name is not empty, then NodeBrief & ReplicaInfo in
	// QueryNodeInfoResponse will only take replicas for this given table into
	// account.
	TableName string `protobuf:"bytes,4,opt,name=table_name,json=tableName,proto3" json:"table_name"`
	OnlyBrief bool   `protobuf:"varint,5,opt,name=only_brief,json=onlyBrief,proto3" json:"only_brief"`
	// currently port may not correct if requests is from krp,
	// so here we'd better have ability to skip port
	//
	// if this flag is false and we can't get exactly the same "node_name:port" pair, this query
	// will randomly return a node with the same node_name
	MatchPort bool `protobuf:"varint,6,opt,name=match_port,json=matchPort,proto3" json:"match_port"`
}

func (x *QueryNodeInfoRequest) Reset() {
	*x = QueryNodeInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryNodeInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryNodeInfoRequest) ProtoMessage() {}

func (x *QueryNodeInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryNodeInfoRequest.ProtoReflect.Descriptor instead.
func (*QueryNodeInfoRequest) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{50}
}

func (x *QueryNodeInfoRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *QueryNodeInfoRequest) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *QueryNodeInfoRequest) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *QueryNodeInfoRequest) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *QueryNodeInfoRequest) GetOnlyBrief() bool {
	if x != nil {
		return x.OnlyBrief
	}
	return false
}

func (x *QueryNodeInfoRequest) GetMatchPort() bool {
	if x != nil {
		return x.MatchPort
	}
	return false
}

type ReplicaInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName   string      `protobuf:"bytes,1,opt,name=table_name,json=tableName,proto3" json:"table_name"`
	PartitionId int32       `protobuf:"varint,2,opt,name=partition_id,json=partitionId,proto3" json:"partition_id"`
	Role        ReplicaRole `protobuf:"varint,3,opt,name=role,proto3,enum=colossusdb.ReplicaRole" json:"role"`
}

func (x *ReplicaInfo) Reset() {
	*x = ReplicaInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicaInfo) ProtoMessage() {}

func (x *ReplicaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicaInfo.ProtoReflect.Descriptor instead.
func (*ReplicaInfo) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{51}
}

func (x *ReplicaInfo) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *ReplicaInfo) GetPartitionId() int32 {
	if x != nil {
		return x.PartitionId
	}
	return 0
}

func (x *ReplicaInfo) GetRole() ReplicaRole {
	if x != nil {
		return x.Role
	}
	return ReplicaRole_kPrimary
}

type QueryNodeInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *ErrorStatus     `protobuf:"bytes,1,opt,name=status,proto3" json:"status"`
	Brief    *NodeBrief       `protobuf:"bytes,2,opt,name=brief,proto3" json:"brief"`
	Replicas []*ReplicaInfo   `protobuf:"bytes,3,rep,name=replicas,proto3" json:"replicas"`
	Resource map[string]int64 `protobuf:"bytes,4,rep,name=resource,proto3" json:"resource" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *QueryNodeInfoResponse) Reset() {
	*x = QueryNodeInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryNodeInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryNodeInfoResponse) ProtoMessage() {}

func (x *QueryNodeInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryNodeInfoResponse.ProtoReflect.Descriptor instead.
func (*QueryNodeInfoResponse) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{52}
}

func (x *QueryNodeInfoResponse) GetStatus() *ErrorStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *QueryNodeInfoResponse) GetBrief() *NodeBrief {
	if x != nil {
		return x.Brief
	}
	return nil
}

func (x *QueryNodeInfoResponse) GetReplicas() []*ReplicaInfo {
	if x != nil {
		return x.Replicas
	}
	return nil
}

func (x *QueryNodeInfoResponse) GetResource() map[string]int64 {
	if x != nil {
		return x.Resource
	}
	return nil
}

type QueryNodesInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName string     `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name"`
	Nodes       []*RpcNode `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes"`
	// if table_name is not empty, then NodeBrief & ReplicaInfo in
	// QueryNodesInfoResponse will only take replicas for this given table into
	// account.
	TableName string `protobuf:"bytes,3,opt,name=table_name,json=tableName,proto3" json:"table_name"`
	OnlyBrief bool   `protobuf:"varint,4,opt,name=only_brief,json=onlyBrief,proto3" json:"only_brief"`
	// currently port may not correct if requests is from krp,
	// so here we'd better have ability to skip port
	//
	// if this flag is false and we can't get exactly the same rpc_node, this query
	// will return randomly return a node which match the rpc_node.node_name
	MatchPort bool `protobuf:"varint,6,opt,name=match_port,json=matchPort,proto3" json:"match_port"`
}

func (x *QueryNodesInfoRequest) Reset() {
	*x = QueryNodesInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryNodesInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryNodesInfoRequest) ProtoMessage() {}

func (x *QueryNodesInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryNodesInfoRequest.ProtoReflect.Descriptor instead.
func (*QueryNodesInfoRequest) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{53}
}

func (x *QueryNodesInfoRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *QueryNodesInfoRequest) GetNodes() []*RpcNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *QueryNodesInfoRequest) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *QueryNodesInfoRequest) GetOnlyBrief() bool {
	if x != nil {
		return x.OnlyBrief
	}
	return false
}

func (x *QueryNodesInfoRequest) GetMatchPort() bool {
	if x != nil {
		return x.MatchPort
	}
	return false
}

type QueryNodesInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *ErrorStatus             `protobuf:"bytes,1,opt,name=status,proto3" json:"status"`
	Nodes  []*QueryNodeInfoResponse `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes"`
}

func (x *QueryNodesInfoResponse) Reset() {
	*x = QueryNodesInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryNodesInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryNodesInfoResponse) ProtoMessage() {}

func (x *QueryNodesInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryNodesInfoResponse.ProtoReflect.Descriptor instead.
func (*QueryNodesInfoResponse) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{54}
}

func (x *QueryNodesInfoResponse) GetStatus() *ErrorStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *QueryNodesInfoResponse) GetNodes() []*QueryNodeInfoResponse {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type SwitchSchedulerStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name"`
	Enable      bool   `protobuf:"varint,2,opt,name=enable,proto3" json:"enable"`
}

func (x *SwitchSchedulerStatusRequest) Reset() {
	*x = SwitchSchedulerStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchSchedulerStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchSchedulerStatusRequest) ProtoMessage() {}

func (x *SwitchSchedulerStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchSchedulerStatusRequest.ProtoReflect.Descriptor instead.
func (*SwitchSchedulerStatusRequest) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{55}
}

func (x *SwitchSchedulerStatusRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *SwitchSchedulerStatusRequest) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type SwitchKessPollerStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name"`
	Enable      bool   `protobuf:"varint,2,opt,name=enable,proto3" json:"enable"`
}

func (x *SwitchKessPollerStatusRequest) Reset() {
	*x = SwitchKessPollerStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchKessPollerStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchKessPollerStatusRequest) ProtoMessage() {}

func (x *SwitchKessPollerStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchKessPollerStatusRequest.ProtoReflect.Descriptor instead.
func (*SwitchKessPollerStatusRequest) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{56}
}

func (x *SwitchKessPollerStatusRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *SwitchKessPollerStatusRequest) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type ManualRemoveReplicasRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName string                                     `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name"`
	TableName   string                                     `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name"`
	Replicas    []*ManualRemoveReplicasRequest_ReplicaItem `protobuf:"bytes,3,rep,name=replicas,proto3" json:"replicas"`
}

func (x *ManualRemoveReplicasRequest) Reset() {
	*x = ManualRemoveReplicasRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManualRemoveReplicasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualRemoveReplicasRequest) ProtoMessage() {}

func (x *ManualRemoveReplicasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualRemoveReplicasRequest.ProtoReflect.Descriptor instead.
func (*ManualRemoveReplicasRequest) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{57}
}

func (x *ManualRemoveReplicasRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *ManualRemoveReplicasRequest) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *ManualRemoveReplicasRequest) GetReplicas() []*ManualRemoveReplicasRequest_ReplicaItem {
	if x != nil {
		return x.Replicas
	}
	return nil
}

type ManualRemoveReplicasResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status         *ErrorStatus   `protobuf:"bytes,1,opt,name=status,proto3" json:"status"`
	ReplicasResult []*ErrorStatus `protobuf:"bytes,2,rep,name=replicas_result,json=replicasResult,proto3" json:"replicas_result"`
}

func (x *ManualRemoveReplicasResponse) Reset() {
	*x = ManualRemoveReplicasResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManualRemoveReplicasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualRemoveReplicasResponse) ProtoMessage() {}

func (x *ManualRemoveReplicasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualRemoveReplicasResponse.ProtoReflect.Descriptor instead.
func (*ManualRemoveReplicasResponse) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{58}
}

func (x *ManualRemoveReplicasResponse) GetStatus() *ErrorStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ManualRemoveReplicasResponse) GetReplicasResult() []*ErrorStatus {
	if x != nil {
		return x.ReplicasResult
	}
	return nil
}

type ExpandAzsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName string                       `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name"`
	AzOptions   []*ExpandAzsRequest_AzOption `protobuf:"bytes,2,rep,name=az_options,json=azOptions,proto3" json:"az_options"`
}

func (x *ExpandAzsRequest) Reset() {
	*x = ExpandAzsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpandAzsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpandAzsRequest) ProtoMessage() {}

func (x *ExpandAzsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpandAzsRequest.ProtoReflect.Descriptor instead.
func (*ExpandAzsRequest) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{59}
}

func (x *ExpandAzsRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *ExpandAzsRequest) GetAzOptions() []*ExpandAzsRequest_AzOption {
	if x != nil {
		return x.AzOptions
	}
	return nil
}

type CancelExpandAzsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName string   `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name"`
	Azs         []string `protobuf:"bytes,2,rep,name=azs,proto3" json:"azs"`
}

func (x *CancelExpandAzsRequest) Reset() {
	*x = CancelExpandAzsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelExpandAzsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelExpandAzsRequest) ProtoMessage() {}

func (x *CancelExpandAzsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelExpandAzsRequest.ProtoReflect.Descriptor instead.
func (*CancelExpandAzsRequest) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{60}
}

func (x *CancelExpandAzsRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *CancelExpandAzsRequest) GetAzs() []string {
	if x != nil {
		return x.Azs
	}
	return nil
}

type ReplaceNodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName string     `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name"`
	SrcNodes    []*RpcNode `protobuf:"bytes,2,rep,name=src_nodes,json=srcNodes,proto3" json:"src_nodes"`
	DstNodes    []*RpcNode `protobuf:"bytes,3,rep,name=dst_nodes,json=dstNodes,proto3" json:"dst_nodes"`
}

func (x *ReplaceNodesRequest) Reset() {
	*x = ReplaceNodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplaceNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceNodesRequest) ProtoMessage() {}

func (x *ReplaceNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceNodesRequest.ProtoReflect.Descriptor instead.
func (*ReplaceNodesRequest) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{61}
}

func (x *ReplaceNodesRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *ReplaceNodesRequest) GetSrcNodes() []*RpcNode {
	if x != nil {
		return x.SrcNodes
	}
	return nil
}

func (x *ReplaceNodesRequest) GetDstNodes() []*RpcNode {
	if x != nil {
		return x.DstNodes
	}
	return nil
}

type AssignHubRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName string   `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name"`
	Node        *RpcNode `protobuf:"bytes,2,opt,name=node,proto3" json:"node"`
	Hub         string   `protobuf:"bytes,3,opt,name=hub,proto3" json:"hub"`
}

func (x *AssignHubRequest) Reset() {
	*x = AssignHubRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignHubRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignHubRequest) ProtoMessage() {}

func (x *AssignHubRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignHubRequest.ProtoReflect.Descriptor instead.
func (*AssignHubRequest) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{62}
}

func (x *AssignHubRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *AssignHubRequest) GetNode() *RpcNode {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *AssignHubRequest) GetHub() string {
	if x != nil {
		return x.Hub
	}
	return ""
}

type RemoveWatcherRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name"`
	WatcherName string `protobuf:"bytes,2,opt,name=watcher_name,json=watcherName,proto3" json:"watcher_name"`
}

func (x *RemoveWatcherRequest) Reset() {
	*x = RemoveWatcherRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveWatcherRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveWatcherRequest) ProtoMessage() {}

func (x *RemoveWatcherRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveWatcherRequest.ProtoReflect.Descriptor instead.
func (*RemoveWatcherRequest) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{63}
}

func (x *RemoveWatcherRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *RemoveWatcherRequest) GetWatcherName() string {
	if x != nil {
		return x.WatcherName
	}
	return ""
}

type ManualRemoveReplicasRequest_ReplicaItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartitionId int32 `protobuf:"varint,1,opt,name=partition_id,json=partitionId,proto3" json:"partition_id"`
	// you can specify either ip:port or node_uniq_id when you want to remove
	// replica. if both specified, node_uniq_id is prefered.
	Node       *RpcNode `protobuf:"bytes,2,opt,name=node,proto3" json:"node"`
	NodeUniqId string   `protobuf:"bytes,3,opt,name=node_uniq_id,json=nodeUniqId,proto3" json:"node_uniq_id"`
}

func (x *ManualRemoveReplicasRequest_ReplicaItem) Reset() {
	*x = ManualRemoveReplicasRequest_ReplicaItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManualRemoveReplicasRequest_ReplicaItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualRemoveReplicasRequest_ReplicaItem) ProtoMessage() {}

func (x *ManualRemoveReplicasRequest_ReplicaItem) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualRemoveReplicasRequest_ReplicaItem.ProtoReflect.Descriptor instead.
func (*ManualRemoveReplicasRequest_ReplicaItem) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{57, 0}
}

func (x *ManualRemoveReplicasRequest_ReplicaItem) GetPartitionId() int32 {
	if x != nil {
		return x.PartitionId
	}
	return 0
}

func (x *ManualRemoveReplicasRequest_ReplicaItem) GetNode() *RpcNode {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *ManualRemoveReplicasRequest_ReplicaItem) GetNodeUniqId() string {
	if x != nil {
		return x.NodeUniqId
	}
	return ""
}

type ExpandAzsRequest_AzOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Az      string `protobuf:"bytes,1,opt,name=az,proto3" json:"az"`
	NewSize int32  `protobuf:"varint,2,opt,name=new_size,json=newSize,proto3" json:"new_size"`
}

func (x *ExpandAzsRequest_AzOption) Reset() {
	*x = ExpandAzsRequest_AzOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpandAzsRequest_AzOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpandAzsRequest_AzOption) ProtoMessage() {}

func (x *ExpandAzsRequest_AzOption) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpandAzsRequest_AzOption.ProtoReflect.Descriptor instead.
func (*ExpandAzsRequest_AzOption) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP(), []int{59, 0}
}

func (x *ExpandAzsRequest_AzOption) GetAz() string {
	if x != nil {
		return x.Az
	}
	return ""
}

func (x *ExpandAzsRequest_AzOption) GetNewSize() int32 {
	if x != nil {
		return x.NewSize
	}
	return 0
}

var File_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto protoreflect.FileDescriptor

var file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDesc = []byte{
	0x0a, 0x3d, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x2d, 0x61, 0x72, 0x63,
	0x68, 0x2f, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x65,
	0x70, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x1a, 0x2d, 0x74, 0x65, 0x61,
	0x6d, 0x73, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x2d, 0x61, 0x72, 0x63, 0x68, 0x2f, 0x63, 0x6f, 0x6c,
	0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x38, 0x74, 0x65, 0x61, 0x6d,
	0x73, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x2d, 0x61, 0x72, 0x63, 0x68, 0x2f, 0x63, 0x6f, 0x6c, 0x6f,
	0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x99, 0x04, 0x0a, 0x0a, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0x8a, 0x04, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x07, 0x0a, 0x03,
	0x6b, 0x4f, 0x6b, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x12, 0x0a,
	0x0e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x10,
	0x02, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x74,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x6b, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x6b, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x10, 0x06, 0x12, 0x12,
	0x0a, 0x0e, 0x6b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5a, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x6b, 0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x65, 0x64, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x4e, 0x6f, 0x64, 0x65,
	0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x09, 0x12, 0x15, 0x0a,
	0x11, 0x6b, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x10, 0x0a, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e,
	0x6f, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x10, 0x0b, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x4e,
	0x6f, 0x74, 0x45, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x10, 0x0c, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x0d, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x54, 0x61,
	0x73, 0x6b, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x10, 0x0e, 0x12, 0x12, 0x0a,
	0x0e, 0x6b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x10,
	0x0f, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x10, 0x10, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x10, 0x11, 0x12, 0x1b, 0x0a, 0x17,
	0x6b, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x12, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x4f, 0x63,
	0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x10, 0x13, 0x12, 0x13, 0x0a,
	0x0e, 0x6b, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x74, 0x74, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x10,
	0xe9, 0x07, 0x12, 0x16, 0x0a, 0x11, 0x6b, 0x48, 0x74, 0x74, 0x70, 0x44, 0x65, 0x63, 0x6f, 0x64,
	0x65, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0xea, 0x07, 0x12, 0x14, 0x0a, 0x0f, 0x6b, 0x48,
	0x74, 0x74, 0x70, 0x50, 0x6f, 0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0xeb, 0x07,
	0x22, 0x15, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x6c, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x1d, 0x0a, 0x09, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x69, 0x6e,
	0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x68, 0x75, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x68, 0x75, 0x62, 0x22, 0xc7, 0x03, 0x0a, 0x0f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x5f,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d, 0x61, 0x78,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x73,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x5f, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x70, 0x6c, 0x69, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x1f,
	0x68, 0x61, 0x73, 0x68, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x64,
	0x64, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x68, 0x61, 0x73, 0x68, 0x41, 0x72, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x72, 0x41, 0x64, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x46, 0x69, 0x72,
	0x73, 0x74, 0x12, 0x4c, 0x0a, 0x23, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x1f, 0x68, 0x61, 0x73, 0x68, 0x41, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x4d, 0x61, 0x78,
	0x4f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73,
	0x12, 0x3c, 0x0a, 0x1b, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x73, 0x50, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0xe0,
	0x02, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x5f, 0x68, 0x75, 0x62, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x48, 0x75, 0x62, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x48, 0x75, 0x62,
	0x73, 0x12, 0x3a, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73,
	0x75, 0x73, 0x64, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x51, 0x0a,
	0x13, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6c,
	0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x5f, 0x70,
	0x61, 0x7a, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x73, 0x65, 0x50, 0x61, 0x7a,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6b, 0x73, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x73,
	0x6e, 0x22, 0x39, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x38, 0x0a, 0x13,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x85, 0x04, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x35, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x68, 0x75, 0x62, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64,
	0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x48, 0x75, 0x62, 0x52, 0x09, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x48, 0x75, 0x62, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x3a, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73,
	0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e,
	0x0a, 0x13, 0x6b, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6b, 0x65, 0x73,
	0x73, 0x50, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x51,
	0x0a, 0x13, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x63, 0x6f,
	0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x0a, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x5f, 0x6f, 0x70, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x4f, 0x70, 0x74, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x5f, 0x70, 0x61, 0x7a, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x73, 0x65, 0x50, 0x61, 0x7a, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6b, 0x73, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x73, 0x6e, 0x22, 0x89,
	0x01, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x48, 0x75, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x68, 0x75,
	0x62, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73,
	0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x48, 0x75, 0x62,
	0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x48, 0x75, 0x62, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x72, 0x79, 0x5f, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x74, 0x72, 0x79, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x22, 0x8e, 0x01, 0x0a, 0x11, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x75, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x68, 0x75, 0x62,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73,
	0x75, 0x73, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x48, 0x75, 0x62, 0x52,
	0x09, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x48, 0x75, 0x62, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72,
	0x79, 0x5f, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x74, 0x72, 0x79, 0x53, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x22, 0x6d, 0x0a, 0x11, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x75, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x68, 0x75, 0x62,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73,
	0x75, 0x73, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x48, 0x75, 0x62, 0x52,
	0x09, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x48, 0x75, 0x62, 0x73, 0x22, 0xe4, 0x01, 0x0a, 0x10, 0x47,
	0x69, 0x76, 0x65, 0x48, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x68, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x47,
	0x69, 0x76, 0x65, 0x48, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x48, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x68, 0x69, 0x6e, 0x74,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x72, 0x74,
	0x1a, 0x4f, 0x0a, 0x0a, 0x48, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x48, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x81, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x48, 0x69, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6c,
	0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x52, 0x70, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x50, 0x6f, 0x72, 0x74, 0x22, 0xaf, 0x01, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x5f, 0x6f, 0x70, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x4f, 0x70, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0xa7, 0x04, 0x0a, 0x0c, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x78, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x6d, 0x61, 0x78,
	0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x6d, 0x61, 0x78,
	0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x65, 0x72, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73,
	0x75, 0x73, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x36, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6b, 0x65, 0x65, 0x70, 0x5f,
	0x6e, 0x75, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6b, 0x65, 0x65, 0x70,
	0x4e, 0x75, 0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14,
	0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x43,
	0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f,
	0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x75, 0x62, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x48, 0x75, 0x62, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x41, 0x72, 0x67, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xca, 0x03, 0x0a, 0x05, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x68,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x73, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x72,
	0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x73, 0x6f, 0x6e, 0x5f,
	0x61, 0x72, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x73, 0x6f, 0x6e,
	0x41, 0x72, 0x67, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x74,
	0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x6b, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6b, 0x63, 0x6f, 0x6e, 0x66, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x41, 0x0a, 0x1d, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x67,
	0x72, 0x61, 0x79, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x61, 0x79, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x70,
	0x6c, 0x69, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xb1,
	0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73,
	0x75, 0x73, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f,
	0x6b, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x4b, 0x63, 0x6f, 0x6e, 0x66, 0x50, 0x61,
	0x74, 0x68, 0x22, 0xbb, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x63,
	0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x63, 0x6c, 0x65,
	0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x64, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f,
	0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x63,
	0x6c, 0x65, 0x61, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73,
	0x22, 0x8f, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4f, 0x70, 0x74, 0x73,
	0x12, 0x3e, 0x0a, 0x1c, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x68, 0x75, 0x62,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x50, 0x65, 0x72, 0x48, 0x75, 0x62,
	0x12, 0x40, 0x0a, 0x1d, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x73, 0x50, 0x65, 0x72, 0x4e, 0x6f,
	0x64, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x2b, 0x0a, 0x04, 0x6f, 0x70, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x4f, 0x70, 0x74, 0x73, 0x52, 0x04, 0x6f, 0x70, 0x74, 0x73, 0x22, 0x36, 0x0a, 0x11,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x70, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6c,
	0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x06, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f,
	0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x06,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0x9d, 0x01, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x77, 0x69, 0x74, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x27, 0x0a,
	0x0f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x77, 0x69, 0x74, 0x68, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xdd, 0x01, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27,
	0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75,
	0x73, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x3d, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f,
	0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa3, 0x01, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x66, 0x72, 0x6f, 0x6d,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x74, 0x6f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb4, 0x01, 0x0a,
	0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73,
	0x75, 0x73, 0x64, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73,
	0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x60, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x05,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f,
	0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x05,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x7b, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x4a, 0x73, 0x6f, 0x6e, 0x41, 0x72, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x61, 0x72,
	0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x73, 0x6f, 0x6e, 0x41, 0x72,
	0x67, 0x73, 0x22, 0x6a, 0x0a, 0x11, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x63,
	0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x6c,
	0x61, 0x79, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0xba,
	0x01, 0x0a, 0x11, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x70,
	0x6c, 0x69, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x6e, 0x65, 0x77, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62,
	0x2e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xe1, 0x02, 0x0a, 0x0c,
	0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x41, 0x72, 0x67, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x4a, 0x0a, 0x0d, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x41, 0x72, 0x67, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x2d, 0x0a, 0x0c, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x0d, 0x0a, 0x09, 0x6b, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x10, 0x00, 0x12,
	0x0e, 0x0a, 0x0a, 0x6b, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x10, 0x01, 0x22,
	0x84, 0x01, 0x0a, 0x12, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75,
	0x73, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x22, 0xd7, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x63,
	0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x63, 0x6c, 0x65,
	0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x64, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f,
	0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x63,
	0x6c, 0x65, 0x61, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73,
	0x22, 0x71, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6c, 0x6f,
	0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x61,
	0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73,
	0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x2e, 0x0a, 0x05, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73,
	0x75, 0x73, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x22, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x69,
	0x64, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x46,
	0x0a, 0x14, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0x9f, 0x01, 0x0a, 0x11, 0x54, 0x61, 0x73, 0x6b, 0x50,
	0x61, 0x72, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x4f, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f,
	0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x22, 0x81, 0x01, 0x0a, 0x20, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x93, 0x01, 0x0a,
	0x21, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a, 0x0a, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73,
	0x75, 0x73, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x74, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0xa8, 0x01, 0x0a, 0x10, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6c, 0x6f,
	0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x52, 0x70, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x4f, 0x70, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x1d,
	0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x80, 0x01,
	0x0a, 0x11, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6c,
	0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x22, 0x81, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x57,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x29, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x52, 0x70, 0x63, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x02, 0x52, 0x07, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x3a, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73,
	0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x5f,
	0x0a, 0x0f, 0x53, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x41, 0x7a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x61, 0x7a, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x61, 0x7a, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x22,
	0x74, 0x0a, 0x10, 0x53, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x41, 0x7a, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x73, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75,
	0x73, 0x64, 0x62, 0x2e, 0x52, 0x70, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x73, 0x68, 0x72,
	0x69, 0x6e, 0x6b, 0x65, 0x64, 0x22, 0x7f, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x61, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x61, 0x7a, 0x12, 0x19, 0x0a, 0x08,
	0x68, 0x75, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x68, 0x75, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x9e, 0x03, 0x0a, 0x09, 0x4e, 0x6f, 0x64, 0x65, 0x42,
	0x72, 0x69, 0x65, 0x66, 0x12, 0x27, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e,
	0x52, 0x70, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a,
	0x02, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6c, 0x6f,
	0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65,
	0x4f, 0x70, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x61, 0x6c, 0x69,
	0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x6c, 0x69, 0x76,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x75, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x75, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x75, 0x6e, 0x69, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6e, 0x6f, 0x64, 0x65, 0x55, 0x6e, 0x69, 0x71, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x71, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63,
	0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a,
	0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63,
	0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x72,
	0x69, 0x65, 0x66, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0xc7, 0x01, 0x0a, 0x14, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x62,
	0x72, 0x69, 0x65, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6f, 0x6e, 0x6c, 0x79,
	0x42, 0x72, 0x69, 0x65, 0x66, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x50, 0x6f, 0x72, 0x74, 0x22, 0x7c, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62,
	0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x22, 0xb4, 0x02, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x6f, 0x64, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63,
	0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a,
	0x05, 0x62, 0x72, 0x69, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63,
	0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x72,
	0x69, 0x65, 0x66, 0x52, 0x05, 0x62, 0x72, 0x69, 0x65, 0x66, 0x12, 0x33, 0x0a, 0x08, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63,
	0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12,
	0x4b, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0x3b, 0x0a, 0x0d,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc2, 0x01, 0x0a, 0x15, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73,
	0x64, 0x62, 0x2e, 0x52, 0x70, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x62, 0x72, 0x69, 0x65, 0x66, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6f, 0x6e, 0x6c, 0x79, 0x42, 0x72, 0x69, 0x65, 0x66, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x82,
	0x01, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6c, 0x6f,
	0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x05, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6c, 0x6f,
	0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x6f, 0x64, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x22, 0x59, 0x0a, 0x1c, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x5a,
	0x0a, 0x1d, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x4b, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xad, 0x02, 0x0a, 0x1b, 0x4d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x08,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x4d, 0x61, 0x6e, 0x75,
	0x61, 0x6c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x1a, 0x7b, 0x0a,
	0x0b, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x27, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x52, 0x70, 0x63, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x75, 0x6e, 0x69, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6e, 0x6f, 0x64, 0x65, 0x55, 0x6e, 0x69, 0x71, 0x49, 0x64, 0x22, 0x91, 0x01, 0x0a, 0x1c, 0x4d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f,
	0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x0a, 0x0f,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73,
	0x64, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xb2,
	0x01, 0x0a, 0x10, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x41, 0x7a, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x0a, 0x61, 0x7a, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6c,
	0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x41, 0x7a,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x7a, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x61, 0x7a, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x35, 0x0a, 0x08,
	0x41, 0x7a, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x61, 0x7a, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x61, 0x7a, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x53,
	0x69, 0x7a, 0x65, 0x22, 0x4d, 0x0a, 0x16, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x45, 0x78, 0x70,
	0x61, 0x6e, 0x64, 0x41, 0x7a, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x61, 0x7a, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x61,
	0x7a, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a,
	0x09, 0x73, 0x72, 0x63, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x52, 0x70,
	0x63, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x73, 0x72, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12,
	0x30, 0x0a, 0x09, 0x64, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e,
	0x52, 0x70, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x64, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x22, 0x70, 0x0a, 0x10, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x48, 0x75, 0x62, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75,
	0x73, 0x64, 0x62, 0x2e, 0x52, 0x70, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x68, 0x75, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x68, 0x75, 0x62, 0x22, 0x5c, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x2a, 0xac, 0x02, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x1f,
	0x0a, 0x1b, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x5f, 0x65, 0x6d, 0x62,
	0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x10, 0x01, 0x12,
	0x14, 0x0a, 0x10, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x5f, 0x72, 0x6f,
	0x64, 0x69, 0x73, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75,
	0x73, 0x64, 0x62, 0x5f, 0x66, 0x65, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62,
	0x5f, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x63, 0x6f, 0x6c, 0x6f,
	0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x10, 0x05, 0x12, 0x1f, 0x0a, 0x1b, 0x63, 0x6f, 0x6c, 0x6f, 0x73,
	0x73, 0x75, 0x73, 0x64, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x10, 0x06, 0x12, 0x1f, 0x0a, 0x1b, 0x63, 0x6f, 0x6c, 0x6f,
	0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x5f, 0x73, 0x69, 0x6d, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x63, 0x6f, 0x6c,
	0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x5f, 0x6b, 0x67, 0x6e, 0x6e, 0x10, 0x08, 0x12, 0x19,
	0x0a, 0x15, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x5f, 0x73, 0x69, 0x6d,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x10, 0x09, 0x12, 0x15, 0x0a, 0x11, 0x63, 0x6f, 0x6c,
	0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x5f, 0x63, 0x6c, 0x6f, 0x74, 0x68, 0x6f, 0x10, 0x0a,
	0x2a, 0x38, 0x0a, 0x15, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x4f, 0x53,
	0x54, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01,
	0x12, 0x08, 0x0a, 0x04, 0x52, 0x41, 0x43, 0x4b, 0x10, 0x02, 0x2a, 0x5c, 0x0a, 0x0e, 0x54, 0x61,
	0x73, 0x6b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x11, 0x0a, 0x0d,
	0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x10, 0x00, 0x12,
	0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0x01, 0x12,
	0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x02, 0x12,
	0x17, 0x0a, 0x13, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x45, 0x56, 0x45, 0x52, 0x59, 0x5f,
	0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x32, 0xf9, 0x19, 0x0a, 0x14, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x12, 0x51, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x12, 0x1f, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x20, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73,
	0x64, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73,
	0x75, 0x73, 0x64, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x20, 0x2e, 0x63, 0x6f, 0x6c, 0x6f,
	0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6f,
	0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x07,
	0x41, 0x64, 0x64, 0x48, 0x75, 0x62, 0x73, 0x12, 0x1a, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73,
	0x75, 0x73, 0x64, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x48, 0x75, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x75,
	0x62, 0x73, 0x12, 0x1d, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x75, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x75, 0x62, 0x73,
	0x12, 0x1d, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x48, 0x75, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1f, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x62, 0x0a, 0x15, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x2e, 0x63, 0x6f, 0x6c, 0x6f,
	0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x16, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x4b, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29,
	0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x4b, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6f, 0x6c, 0x6f,
	0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x15, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x28, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51,
	0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1f,
	0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x20, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4a, 0x0a, 0x09, 0x47, 0x69, 0x76, 0x65, 0x48, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1c,
	0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x47, 0x69, 0x76, 0x65,
	0x48, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63,
	0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a,
	0x0b, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x48, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1e, 0x2e, 0x63,
	0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c,
	0x48, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63,
	0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a,
	0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1e, 0x2e, 0x63,
	0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63,
	0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a,
	0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1e, 0x2e, 0x63,
	0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63,
	0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a,
	0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1e, 0x2e, 0x63,
	0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63,
	0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a,
	0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4a, 0x73, 0x6f, 0x6e,
	0x41, 0x72, 0x67, 0x73, 0x12, 0x26, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64,
	0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4a, 0x73, 0x6f,
	0x6e, 0x41, 0x72, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63,
	0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a,
	0x0a, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x1d, 0x2e, 0x63, 0x6f,
	0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x6f, 0x6c,
	0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1d, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73,
	0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73,
	0x75, 0x73, 0x64, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x0e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x27, 0x2e, 0x63, 0x6f, 0x6c, 0x6f,
	0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e,
	0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0c,
	0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1f, 0x2e, 0x63,
	0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c,
	0x0a, 0x0a, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1d, 0x2e, 0x63,
	0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6f,
	0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x0e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21,
	0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x22, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x12, 0x1e, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x1e, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x12, 0x1d, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1f, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x48, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1c,
	0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x63,
	0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x1b, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x53, 0x69, 0x64, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x2e, 0x2e, 0x63, 0x6f, 0x6c,
	0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x64, 0x65, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6f, 0x6c,
	0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x19, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73,
	0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75,
	0x73, 0x64, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x09, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x1c, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5d, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x23, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73,
	0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45,
	0x0a, 0x08, 0x53, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x41, 0x7a, 0x12, 0x1b, 0x2e, 0x63, 0x6f, 0x6c,
	0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x53, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x41, 0x7a,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73,
	0x75, 0x73, 0x64, 0x62, 0x2e, 0x53, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x41, 0x7a, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x09, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x41,
	0x7a, 0x73, 0x12, 0x1c, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e,
	0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x41, 0x7a, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1f, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x56, 0x0a, 0x0f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x45, 0x78, 0x70, 0x61, 0x6e,
	0x64, 0x41, 0x7a, 0x73, 0x12, 0x22, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64,
	0x62, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x41, 0x7a,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73,
	0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x09, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x48, 0x75, 0x62, 0x12, 0x1c, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75,
	0x73, 0x64, 0x62, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x48, 0x75, 0x62, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64,
	0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1f, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73,
	0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75,
	0x73, 0x64, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x12, 0x1c, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64,
	0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x54, 0x0a, 0x0d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x20, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64,
	0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x2e, 0x63, 0x6f, 0x6c, 0x6f,
	0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63,
	0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x52, 0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x72, 0x12, 0x20, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x26, 0x5a, 0x24, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6b, 0x75, 0x61, 0x69, 0x73, 0x68, 0x6f, 0x75, 0x2f, 0x63, 0x6f, 0x6c, 0x6f,
	0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2f, 0x70, 0x62, 0x3b, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescOnce sync.Once
	file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescData = file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDesc
)

func file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescGZIP() []byte {
	file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescOnce.Do(func() {
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescData = protoimpl.X.CompressGZIP(file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescData)
	})
	return file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDescData
}

var file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes = make([]protoimpl.MessageInfo, 70)
var file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_goTypes = []interface{}{
	(ServiceType)(0),                                // 0: colossusdb.ServiceType
	(NodeFailureDomainType)(0),                      // 1: colossusdb.NodeFailureDomainType
	(TaskNotifyMode)(0),                             // 2: colossusdb.TaskNotifyMode
	(AdminError_Code)(0),                            // 3: colossusdb.AdminError.Code
	(TaskExecInfo_FinishStatus)(0),                  // 4: colossusdb.TaskExecInfo.FinishStatus
	(*AdminError)(nil),                              // 5: colossusdb.AdminError
	(*ListServicesRequest)(nil),                     // 6: colossusdb.ListServicesRequest
	(*ListServicesResponse)(nil),                    // 7: colossusdb.ListServicesResponse
	(*NodeHints)(nil),                               // 8: colossusdb.NodeHints
	(*ScheduleOptions)(nil),                         // 9: colossusdb.ScheduleOptions
	(*CreateServiceRequest)(nil),                    // 10: colossusdb.CreateServiceRequest
	(*DeleteServiceRequest)(nil),                    // 11: colossusdb.DeleteServiceRequest
	(*QueryServiceRequest)(nil),                     // 12: colossusdb.QueryServiceRequest
	(*QueryServiceResponse)(nil),                    // 13: colossusdb.QueryServiceResponse
	(*AddHubsRequest)(nil),                          // 14: colossusdb.AddHubsRequest
	(*RemoveHubsRequest)(nil),                       // 15: colossusdb.RemoveHubsRequest
	(*UpdateHubsRequest)(nil),                       // 16: colossusdb.UpdateHubsRequest
	(*GiveHintsRequest)(nil),                        // 17: colossusdb.GiveHintsRequest
	(*RecallHintsRequest)(nil),                      // 18: colossusdb.RecallHintsRequest
	(*UpdateScheduleOptionsRequest)(nil),            // 19: colossusdb.UpdateScheduleOptionsRequest
	(*PeriodicTask)(nil),                            // 20: colossusdb.PeriodicTask
	(*Table)(nil),                                   // 21: colossusdb.Table
	(*CreateTableRequest)(nil),                      // 22: colossusdb.CreateTableRequest
	(*DeleteTableRequest)(nil),                      // 23: colossusdb.DeleteTableRequest
	(*RestoreOpts)(nil),                             // 24: colossusdb.RestoreOpts
	(*RestoreTableRequest)(nil),                     // 25: colossusdb.RestoreTableRequest
	(*ListTablesRequest)(nil),                       // 26: colossusdb.ListTablesRequest
	(*ListTablesResponse)(nil),                      // 27: colossusdb.ListTablesResponse
	(*QueryTableRequest)(nil),                       // 28: colossusdb.QueryTableRequest
	(*QueryTableResponse)(nil),                      // 29: colossusdb.QueryTableResponse
	(*QueryPartitionRequest)(nil),                   // 30: colossusdb.QueryPartitionRequest
	(*QueryPartitionResponse)(nil),                  // 31: colossusdb.QueryPartitionResponse
	(*UpdateTableRequest)(nil),                      // 32: colossusdb.UpdateTableRequest
	(*UpdateTableJsonArgsRequest)(nil),              // 33: colossusdb.UpdateTableJsonArgsRequest
	(*SplitTableOptions)(nil),                       // 34: colossusdb.SplitTableOptions
	(*SplitTableRequest)(nil),                       // 35: colossusdb.SplitTableRequest
	(*TaskExecInfo)(nil),                            // 36: colossusdb.TaskExecInfo
	(*OperateTaskRequest)(nil),                      // 37: colossusdb.OperateTaskRequest
	(*DeleteTaskRequest)(nil),                       // 38: colossusdb.DeleteTaskRequest
	(*QueryTaskRequest)(nil),                        // 39: colossusdb.QueryTaskRequest
	(*QueryTaskResponse)(nil),                       // 40: colossusdb.QueryTaskResponse
	(*TriggerDeleteTaskSideEffectRequest)(nil),      // 41: colossusdb.TriggerDeleteTaskSideEffectRequest
	(*TaskReplicaExecution)(nil),                    // 42: colossusdb.TaskReplicaExecution
	(*TaskPartExecution)(nil),                       // 43: colossusdb.TaskPartExecution
	(*QueryTaskCurrentExecutionRequest)(nil),        // 44: colossusdb.QueryTaskCurrentExecutionRequest
	(*QueryTaskCurrentExecutionResponse)(nil),       // 45: colossusdb.QueryTaskCurrentExecutionResponse
	(*AdminNodeRequest)(nil),                        // 46: colossusdb.AdminNodeRequest
	(*AdminNodeResponse)(nil),                       // 47: colossusdb.AdminNodeResponse
	(*UpdateNodeWeightRequest)(nil),                 // 48: colossusdb.UpdateNodeWeightRequest
	(*UpdateNodeWeightResponse)(nil),                // 49: colossusdb.UpdateNodeWeightResponse
	(*ShrinkAzRequest)(nil),                         // 50: colossusdb.ShrinkAzRequest
	(*ShrinkAzResponse)(nil),                        // 51: colossusdb.ShrinkAzResponse
	(*ListNodesRequest)(nil),                        // 52: colossusdb.ListNodesRequest
	(*NodeBrief)(nil),                               // 53: colossusdb.NodeBrief
	(*ListNodesResponse)(nil),                       // 54: colossusdb.ListNodesResponse
	(*QueryNodeInfoRequest)(nil),                    // 55: colossusdb.QueryNodeInfoRequest
	(*ReplicaInfo)(nil),                             // 56: colossusdb.ReplicaInfo
	(*QueryNodeInfoResponse)(nil),                   // 57: colossusdb.QueryNodeInfoResponse
	(*QueryNodesInfoRequest)(nil),                   // 58: colossusdb.QueryNodesInfoRequest
	(*QueryNodesInfoResponse)(nil),                  // 59: colossusdb.QueryNodesInfoResponse
	(*SwitchSchedulerStatusRequest)(nil),            // 60: colossusdb.SwitchSchedulerStatusRequest
	(*SwitchKessPollerStatusRequest)(nil),           // 61: colossusdb.SwitchKessPollerStatusRequest
	(*ManualRemoveReplicasRequest)(nil),             // 62: colossusdb.ManualRemoveReplicasRequest
	(*ManualRemoveReplicasResponse)(nil),            // 63: colossusdb.ManualRemoveReplicasResponse
	(*ExpandAzsRequest)(nil),                        // 64: colossusdb.ExpandAzsRequest
	(*CancelExpandAzsRequest)(nil),                  // 65: colossusdb.CancelExpandAzsRequest
	(*ReplaceNodesRequest)(nil),                     // 66: colossusdb.ReplaceNodesRequest
	(*AssignHubRequest)(nil),                        // 67: colossusdb.AssignHubRequest
	(*RemoveWatcherRequest)(nil),                    // 68: colossusdb.RemoveWatcherRequest
	nil,                                             // 69: colossusdb.GiveHintsRequest.HintsEntry
	nil,                                             // 70: colossusdb.PeriodicTask.ArgsEntry
	nil,                                             // 71: colossusdb.TaskExecInfo.ArgsEntry
	nil,                                             // 72: colossusdb.QueryNodeInfoResponse.ResourceEntry
	(*ManualRemoveReplicasRequest_ReplicaItem)(nil), // 73: colossusdb.ManualRemoveReplicasRequest.ReplicaItem
	(*ExpandAzsRequest_AzOption)(nil),               // 74: colossusdb.ExpandAzsRequest.AzOption
	(*ErrorStatus)(nil),                             // 75: colossusdb.ErrorStatus
	(*ReplicaHub)(nil),                              // 76: colossusdb.ReplicaHub
	(*RpcNode)(nil),                                 // 77: colossusdb.RpcNode
	(*PartitionPeerInfo)(nil),                       // 78: colossusdb.PartitionPeerInfo
	(AdminNodeOp)(0),                                // 79: colossusdb.AdminNodeOp
	(ReplicaRole)(0),                                // 80: colossusdb.ReplicaRole
	(*ErrorStatusResponse)(nil),                     // 81: colossusdb.ErrorStatusResponse
}
var file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_depIdxs = []int32{
	75,  // 0: colossusdb.ListServicesResponse.status:type_name -> colossusdb.ErrorStatus
	76,  // 1: colossusdb.CreateServiceRequest.nodes_hubs:type_name -> colossusdb.ReplicaHub
	0,   // 2: colossusdb.CreateServiceRequest.service_type:type_name -> colossusdb.ServiceType
	1,   // 3: colossusdb.CreateServiceRequest.failure_domain_type:type_name -> colossusdb.NodeFailureDomainType
	75,  // 4: colossusdb.QueryServiceResponse.status:type_name -> colossusdb.ErrorStatus
	76,  // 5: colossusdb.QueryServiceResponse.nodes_hubs:type_name -> colossusdb.ReplicaHub
	0,   // 6: colossusdb.QueryServiceResponse.service_type:type_name -> colossusdb.ServiceType
	1,   // 7: colossusdb.QueryServiceResponse.failure_domain_type:type_name -> colossusdb.NodeFailureDomainType
	9,   // 8: colossusdb.QueryServiceResponse.sched_opts:type_name -> colossusdb.ScheduleOptions
	76,  // 9: colossusdb.AddHubsRequest.nodes_hubs:type_name -> colossusdb.ReplicaHub
	76,  // 10: colossusdb.RemoveHubsRequest.nodes_hubs:type_name -> colossusdb.ReplicaHub
	76,  // 11: colossusdb.UpdateHubsRequest.nodes_hubs:type_name -> colossusdb.ReplicaHub
	69,  // 12: colossusdb.GiveHintsRequest.hints:type_name -> colossusdb.GiveHintsRequest.HintsEntry
	77,  // 13: colossusdb.RecallHintsRequest.nodes:type_name -> colossusdb.RpcNode
	9,   // 14: colossusdb.UpdateScheduleOptionsRequest.sched_opts:type_name -> colossusdb.ScheduleOptions
	2,   // 15: colossusdb.PeriodicTask.notify_mode:type_name -> colossusdb.TaskNotifyMode
	70,  // 16: colossusdb.PeriodicTask.args:type_name -> colossusdb.PeriodicTask.ArgsEntry
	21,  // 17: colossusdb.CreateTableRequest.table:type_name -> colossusdb.Table
	24,  // 18: colossusdb.RestoreTableRequest.opts:type_name -> colossusdb.RestoreOpts
	75,  // 19: colossusdb.ListTablesResponse.status:type_name -> colossusdb.ErrorStatus
	21,  // 20: colossusdb.ListTablesResponse.tables:type_name -> colossusdb.Table
	75,  // 21: colossusdb.QueryTableResponse.status:type_name -> colossusdb.ErrorStatus
	21,  // 22: colossusdb.QueryTableResponse.table:type_name -> colossusdb.Table
	20,  // 23: colossusdb.QueryTableResponse.tasks:type_name -> colossusdb.PeriodicTask
	78,  // 24: colossusdb.QueryTableResponse.partitions:type_name -> colossusdb.PartitionPeerInfo
	75,  // 25: colossusdb.QueryPartitionResponse.status:type_name -> colossusdb.ErrorStatus
	78,  // 26: colossusdb.QueryPartitionResponse.partitions:type_name -> colossusdb.PartitionPeerInfo
	21,  // 27: colossusdb.UpdateTableRequest.table:type_name -> colossusdb.Table
	34,  // 28: colossusdb.SplitTableRequest.options:type_name -> colossusdb.SplitTableOptions
	71,  // 29: colossusdb.TaskExecInfo.args:type_name -> colossusdb.TaskExecInfo.ArgsEntry
	4,   // 30: colossusdb.TaskExecInfo.finish_status:type_name -> colossusdb.TaskExecInfo.FinishStatus
	20,  // 31: colossusdb.OperateTaskRequest.task:type_name -> colossusdb.PeriodicTask
	75,  // 32: colossusdb.QueryTaskResponse.status:type_name -> colossusdb.ErrorStatus
	20,  // 33: colossusdb.QueryTaskResponse.task:type_name -> colossusdb.PeriodicTask
	36,  // 34: colossusdb.QueryTaskResponse.infos:type_name -> colossusdb.TaskExecInfo
	42,  // 35: colossusdb.TaskPartExecution.replica_executions:type_name -> colossusdb.TaskReplicaExecution
	75,  // 36: colossusdb.QueryTaskCurrentExecutionResponse.status:type_name -> colossusdb.ErrorStatus
	43,  // 37: colossusdb.QueryTaskCurrentExecutionResponse.executions:type_name -> colossusdb.TaskPartExecution
	77,  // 38: colossusdb.AdminNodeRequest.nodes:type_name -> colossusdb.RpcNode
	79,  // 39: colossusdb.AdminNodeRequest.op:type_name -> colossusdb.AdminNodeOp
	75,  // 40: colossusdb.AdminNodeResponse.status:type_name -> colossusdb.ErrorStatus
	75,  // 41: colossusdb.AdminNodeResponse.node_results:type_name -> colossusdb.ErrorStatus
	77,  // 42: colossusdb.UpdateNodeWeightRequest.nodes:type_name -> colossusdb.RpcNode
	75,  // 43: colossusdb.UpdateNodeWeightResponse.status:type_name -> colossusdb.ErrorStatus
	75,  // 44: colossusdb.UpdateNodeWeightResponse.node_results:type_name -> colossusdb.ErrorStatus
	75,  // 45: colossusdb.ShrinkAzResponse.status:type_name -> colossusdb.ErrorStatus
	77,  // 46: colossusdb.ShrinkAzResponse.shrinked:type_name -> colossusdb.RpcNode
	77,  // 47: colossusdb.NodeBrief.node:type_name -> colossusdb.RpcNode
	79,  // 48: colossusdb.NodeBrief.op:type_name -> colossusdb.AdminNodeOp
	75,  // 49: colossusdb.ListNodesResponse.status:type_name -> colossusdb.ErrorStatus
	53,  // 50: colossusdb.ListNodesResponse.nodes:type_name -> colossusdb.NodeBrief
	80,  // 51: colossusdb.ReplicaInfo.role:type_name -> colossusdb.ReplicaRole
	75,  // 52: colossusdb.QueryNodeInfoResponse.status:type_name -> colossusdb.ErrorStatus
	53,  // 53: colossusdb.QueryNodeInfoResponse.brief:type_name -> colossusdb.NodeBrief
	56,  // 54: colossusdb.QueryNodeInfoResponse.replicas:type_name -> colossusdb.ReplicaInfo
	72,  // 55: colossusdb.QueryNodeInfoResponse.resource:type_name -> colossusdb.QueryNodeInfoResponse.ResourceEntry
	77,  // 56: colossusdb.QueryNodesInfoRequest.nodes:type_name -> colossusdb.RpcNode
	75,  // 57: colossusdb.QueryNodesInfoResponse.status:type_name -> colossusdb.ErrorStatus
	57,  // 58: colossusdb.QueryNodesInfoResponse.nodes:type_name -> colossusdb.QueryNodeInfoResponse
	73,  // 59: colossusdb.ManualRemoveReplicasRequest.replicas:type_name -> colossusdb.ManualRemoveReplicasRequest.ReplicaItem
	75,  // 60: colossusdb.ManualRemoveReplicasResponse.status:type_name -> colossusdb.ErrorStatus
	75,  // 61: colossusdb.ManualRemoveReplicasResponse.replicas_result:type_name -> colossusdb.ErrorStatus
	74,  // 62: colossusdb.ExpandAzsRequest.az_options:type_name -> colossusdb.ExpandAzsRequest.AzOption
	77,  // 63: colossusdb.ReplaceNodesRequest.src_nodes:type_name -> colossusdb.RpcNode
	77,  // 64: colossusdb.ReplaceNodesRequest.dst_nodes:type_name -> colossusdb.RpcNode
	77,  // 65: colossusdb.AssignHubRequest.node:type_name -> colossusdb.RpcNode
	8,   // 66: colossusdb.GiveHintsRequest.HintsEntry.value:type_name -> colossusdb.NodeHints
	77,  // 67: colossusdb.ManualRemoveReplicasRequest.ReplicaItem.node:type_name -> colossusdb.RpcNode
	6,   // 68: colossusdb.PartitionKeeperAdmin.ListServices:input_type -> colossusdb.ListServicesRequest
	10,  // 69: colossusdb.PartitionKeeperAdmin.CreateService:input_type -> colossusdb.CreateServiceRequest
	11,  // 70: colossusdb.PartitionKeeperAdmin.DeleteService:input_type -> colossusdb.DeleteServiceRequest
	14,  // 71: colossusdb.PartitionKeeperAdmin.AddHubs:input_type -> colossusdb.AddHubsRequest
	15,  // 72: colossusdb.PartitionKeeperAdmin.RemoveHubs:input_type -> colossusdb.RemoveHubsRequest
	16,  // 73: colossusdb.PartitionKeeperAdmin.UpdateHubs:input_type -> colossusdb.UpdateHubsRequest
	60,  // 74: colossusdb.PartitionKeeperAdmin.SwitchSchedulerStatus:input_type -> colossusdb.SwitchSchedulerStatusRequest
	61,  // 75: colossusdb.PartitionKeeperAdmin.SwitchKessPollerStatus:input_type -> colossusdb.SwitchKessPollerStatusRequest
	19,  // 76: colossusdb.PartitionKeeperAdmin.UpdateScheduleOptions:input_type -> colossusdb.UpdateScheduleOptionsRequest
	12,  // 77: colossusdb.PartitionKeeperAdmin.QueryService:input_type -> colossusdb.QueryServiceRequest
	17,  // 78: colossusdb.PartitionKeeperAdmin.GiveHints:input_type -> colossusdb.GiveHintsRequest
	18,  // 79: colossusdb.PartitionKeeperAdmin.RecallHints:input_type -> colossusdb.RecallHintsRequest
	22,  // 80: colossusdb.PartitionKeeperAdmin.CreateTable:input_type -> colossusdb.CreateTableRequest
	23,  // 81: colossusdb.PartitionKeeperAdmin.DeleteTable:input_type -> colossusdb.DeleteTableRequest
	32,  // 82: colossusdb.PartitionKeeperAdmin.UpdateTable:input_type -> colossusdb.UpdateTableRequest
	33,  // 83: colossusdb.PartitionKeeperAdmin.UpdateTableJsonArgs:input_type -> colossusdb.UpdateTableJsonArgsRequest
	26,  // 84: colossusdb.PartitionKeeperAdmin.ListTables:input_type -> colossusdb.ListTablesRequest
	28,  // 85: colossusdb.PartitionKeeperAdmin.QueryTable:input_type -> colossusdb.QueryTableRequest
	62,  // 86: colossusdb.PartitionKeeperAdmin.RemoveReplicas:input_type -> colossusdb.ManualRemoveReplicasRequest
	25,  // 87: colossusdb.PartitionKeeperAdmin.RestoreTable:input_type -> colossusdb.RestoreTableRequest
	35,  // 88: colossusdb.PartitionKeeperAdmin.SplitTable:input_type -> colossusdb.SplitTableRequest
	30,  // 89: colossusdb.PartitionKeeperAdmin.QueryPartition:input_type -> colossusdb.QueryPartitionRequest
	37,  // 90: colossusdb.PartitionKeeperAdmin.CreateTask:input_type -> colossusdb.OperateTaskRequest
	37,  // 91: colossusdb.PartitionKeeperAdmin.UpdateTask:input_type -> colossusdb.OperateTaskRequest
	38,  // 92: colossusdb.PartitionKeeperAdmin.DeleteTask:input_type -> colossusdb.DeleteTaskRequest
	39,  // 93: colossusdb.PartitionKeeperAdmin.QueryTask:input_type -> colossusdb.QueryTaskRequest
	41,  // 94: colossusdb.PartitionKeeperAdmin.TriggerDeleteTaskSideEffect:input_type -> colossusdb.TriggerDeleteTaskSideEffectRequest
	44,  // 95: colossusdb.PartitionKeeperAdmin.QueryTaskCurrentExecution:input_type -> colossusdb.QueryTaskCurrentExecutionRequest
	46,  // 96: colossusdb.PartitionKeeperAdmin.AdminNode:input_type -> colossusdb.AdminNodeRequest
	48,  // 97: colossusdb.PartitionKeeperAdmin.UpdateNodeWeight:input_type -> colossusdb.UpdateNodeWeightRequest
	50,  // 98: colossusdb.PartitionKeeperAdmin.ShrinkAz:input_type -> colossusdb.ShrinkAzRequest
	64,  // 99: colossusdb.PartitionKeeperAdmin.ExpandAzs:input_type -> colossusdb.ExpandAzsRequest
	65,  // 100: colossusdb.PartitionKeeperAdmin.CancelExpandAzs:input_type -> colossusdb.CancelExpandAzsRequest
	67,  // 101: colossusdb.PartitionKeeperAdmin.AssignHub:input_type -> colossusdb.AssignHubRequest
	66,  // 102: colossusdb.PartitionKeeperAdmin.ReplaceNodes:input_type -> colossusdb.ReplaceNodesRequest
	52,  // 103: colossusdb.PartitionKeeperAdmin.ListNodes:input_type -> colossusdb.ListNodesRequest
	55,  // 104: colossusdb.PartitionKeeperAdmin.QueryNodeInfo:input_type -> colossusdb.QueryNodeInfoRequest
	58,  // 105: colossusdb.PartitionKeeperAdmin.QueryNodesInfo:input_type -> colossusdb.QueryNodesInfoRequest
	68,  // 106: colossusdb.PartitionKeeperAdmin.RemoveWatcher:input_type -> colossusdb.RemoveWatcherRequest
	7,   // 107: colossusdb.PartitionKeeperAdmin.ListServices:output_type -> colossusdb.ListServicesResponse
	81,  // 108: colossusdb.PartitionKeeperAdmin.CreateService:output_type -> colossusdb.ErrorStatusResponse
	81,  // 109: colossusdb.PartitionKeeperAdmin.DeleteService:output_type -> colossusdb.ErrorStatusResponse
	81,  // 110: colossusdb.PartitionKeeperAdmin.AddHubs:output_type -> colossusdb.ErrorStatusResponse
	81,  // 111: colossusdb.PartitionKeeperAdmin.RemoveHubs:output_type -> colossusdb.ErrorStatusResponse
	81,  // 112: colossusdb.PartitionKeeperAdmin.UpdateHubs:output_type -> colossusdb.ErrorStatusResponse
	81,  // 113: colossusdb.PartitionKeeperAdmin.SwitchSchedulerStatus:output_type -> colossusdb.ErrorStatusResponse
	81,  // 114: colossusdb.PartitionKeeperAdmin.SwitchKessPollerStatus:output_type -> colossusdb.ErrorStatusResponse
	81,  // 115: colossusdb.PartitionKeeperAdmin.UpdateScheduleOptions:output_type -> colossusdb.ErrorStatusResponse
	13,  // 116: colossusdb.PartitionKeeperAdmin.QueryService:output_type -> colossusdb.QueryServiceResponse
	81,  // 117: colossusdb.PartitionKeeperAdmin.GiveHints:output_type -> colossusdb.ErrorStatusResponse
	81,  // 118: colossusdb.PartitionKeeperAdmin.RecallHints:output_type -> colossusdb.ErrorStatusResponse
	81,  // 119: colossusdb.PartitionKeeperAdmin.CreateTable:output_type -> colossusdb.ErrorStatusResponse
	81,  // 120: colossusdb.PartitionKeeperAdmin.DeleteTable:output_type -> colossusdb.ErrorStatusResponse
	81,  // 121: colossusdb.PartitionKeeperAdmin.UpdateTable:output_type -> colossusdb.ErrorStatusResponse
	81,  // 122: colossusdb.PartitionKeeperAdmin.UpdateTableJsonArgs:output_type -> colossusdb.ErrorStatusResponse
	27,  // 123: colossusdb.PartitionKeeperAdmin.ListTables:output_type -> colossusdb.ListTablesResponse
	29,  // 124: colossusdb.PartitionKeeperAdmin.QueryTable:output_type -> colossusdb.QueryTableResponse
	63,  // 125: colossusdb.PartitionKeeperAdmin.RemoveReplicas:output_type -> colossusdb.ManualRemoveReplicasResponse
	81,  // 126: colossusdb.PartitionKeeperAdmin.RestoreTable:output_type -> colossusdb.ErrorStatusResponse
	81,  // 127: colossusdb.PartitionKeeperAdmin.SplitTable:output_type -> colossusdb.ErrorStatusResponse
	31,  // 128: colossusdb.PartitionKeeperAdmin.QueryPartition:output_type -> colossusdb.QueryPartitionResponse
	81,  // 129: colossusdb.PartitionKeeperAdmin.CreateTask:output_type -> colossusdb.ErrorStatusResponse
	81,  // 130: colossusdb.PartitionKeeperAdmin.UpdateTask:output_type -> colossusdb.ErrorStatusResponse
	81,  // 131: colossusdb.PartitionKeeperAdmin.DeleteTask:output_type -> colossusdb.ErrorStatusResponse
	40,  // 132: colossusdb.PartitionKeeperAdmin.QueryTask:output_type -> colossusdb.QueryTaskResponse
	81,  // 133: colossusdb.PartitionKeeperAdmin.TriggerDeleteTaskSideEffect:output_type -> colossusdb.ErrorStatusResponse
	45,  // 134: colossusdb.PartitionKeeperAdmin.QueryTaskCurrentExecution:output_type -> colossusdb.QueryTaskCurrentExecutionResponse
	47,  // 135: colossusdb.PartitionKeeperAdmin.AdminNode:output_type -> colossusdb.AdminNodeResponse
	49,  // 136: colossusdb.PartitionKeeperAdmin.UpdateNodeWeight:output_type -> colossusdb.UpdateNodeWeightResponse
	51,  // 137: colossusdb.PartitionKeeperAdmin.ShrinkAz:output_type -> colossusdb.ShrinkAzResponse
	81,  // 138: colossusdb.PartitionKeeperAdmin.ExpandAzs:output_type -> colossusdb.ErrorStatusResponse
	81,  // 139: colossusdb.PartitionKeeperAdmin.CancelExpandAzs:output_type -> colossusdb.ErrorStatusResponse
	81,  // 140: colossusdb.PartitionKeeperAdmin.AssignHub:output_type -> colossusdb.ErrorStatusResponse
	81,  // 141: colossusdb.PartitionKeeperAdmin.ReplaceNodes:output_type -> colossusdb.ErrorStatusResponse
	54,  // 142: colossusdb.PartitionKeeperAdmin.ListNodes:output_type -> colossusdb.ListNodesResponse
	57,  // 143: colossusdb.PartitionKeeperAdmin.QueryNodeInfo:output_type -> colossusdb.QueryNodeInfoResponse
	59,  // 144: colossusdb.PartitionKeeperAdmin.QueryNodesInfo:output_type -> colossusdb.QueryNodesInfoResponse
	81,  // 145: colossusdb.PartitionKeeperAdmin.RemoveWatcher:output_type -> colossusdb.ErrorStatusResponse
	107, // [107:146] is the sub-list for method output_type
	68,  // [68:107] is the sub-list for method input_type
	68,  // [68:68] is the sub-list for extension type_name
	68,  // [68:68] is the sub-list for extension extendee
	0,   // [0:68] is the sub-list for field type_name
}

func init() { file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_init() }
func file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_init() {
	if File_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto != nil {
		return
	}
	file_teams_reco_arch_colossusdb_proto_common_proto_init()
	file_teams_reco_arch_colossusdb_proto_partition_service_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListServicesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListServicesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeHints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryServiceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddHubsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveHubsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHubsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GiveHintsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecallHintsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateScheduleOptionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeriodicTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Table); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreOpts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTablesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTablesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPartitionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPartitionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTableJsonArgsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SplitTableOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SplitTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskExecInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperateTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerDeleteTaskSideEffectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskReplicaExecution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskPartExecution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTaskCurrentExecutionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTaskCurrentExecutionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNodeWeightRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNodeWeightResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShrinkAzRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShrinkAzResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeBrief); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryNodeInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicaInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryNodeInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryNodesInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryNodesInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchSchedulerStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchKessPollerStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManualRemoveReplicasRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManualRemoveReplicasResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpandAzsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelExpandAzsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplaceNodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignHubRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveWatcherRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManualRemoveReplicasRequest_ReplicaItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpandAzsRequest_AzOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   70,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_goTypes,
		DependencyIndexes: file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_depIdxs,
		EnumInfos:         file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_enumTypes,
		MessageInfos:      file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_msgTypes,
	}.Build()
	File_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto = out.File
	file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_rawDesc = nil
	file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_goTypes = nil
	file_teams_reco_arch_colossusdb_proto_partition_keeper_admin_proto_depIdxs = nil
}
