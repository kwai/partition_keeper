// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: teams/reco-arch/colossusdb/proto/partition_keeper_admin.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PartitionKeeperAdmin_ListServices_FullMethodName                = "/colossusdb.PartitionKeeperAdmin/ListServices"
	PartitionKeeperAdmin_CreateService_FullMethodName               = "/colossusdb.PartitionKeeperAdmin/CreateService"
	PartitionKeeperAdmin_DeleteService_FullMethodName               = "/colossusdb.PartitionKeeperAdmin/DeleteService"
	PartitionKeeperAdmin_AddHubs_FullMethodName                     = "/colossusdb.PartitionKeeperAdmin/AddHubs"
	PartitionKeeperAdmin_RemoveHubs_FullMethodName                  = "/colossusdb.PartitionKeeperAdmin/RemoveHubs"
	PartitionKeeperAdmin_UpdateHubs_FullMethodName                  = "/colossusdb.PartitionKeeperAdmin/UpdateHubs"
	PartitionKeeperAdmin_SwitchSchedulerStatus_FullMethodName       = "/colossusdb.PartitionKeeperAdmin/SwitchSchedulerStatus"
	PartitionKeeperAdmin_SwitchKessPollerStatus_FullMethodName      = "/colossusdb.PartitionKeeperAdmin/SwitchKessPollerStatus"
	PartitionKeeperAdmin_UpdateScheduleOptions_FullMethodName       = "/colossusdb.PartitionKeeperAdmin/UpdateScheduleOptions"
	PartitionKeeperAdmin_QueryService_FullMethodName                = "/colossusdb.PartitionKeeperAdmin/QueryService"
	PartitionKeeperAdmin_GiveHints_FullMethodName                   = "/colossusdb.PartitionKeeperAdmin/GiveHints"
	PartitionKeeperAdmin_RecallHints_FullMethodName                 = "/colossusdb.PartitionKeeperAdmin/RecallHints"
	PartitionKeeperAdmin_CreateTable_FullMethodName                 = "/colossusdb.PartitionKeeperAdmin/CreateTable"
	PartitionKeeperAdmin_DeleteTable_FullMethodName                 = "/colossusdb.PartitionKeeperAdmin/DeleteTable"
	PartitionKeeperAdmin_UpdateTable_FullMethodName                 = "/colossusdb.PartitionKeeperAdmin/UpdateTable"
	PartitionKeeperAdmin_UpdateTableJsonArgs_FullMethodName         = "/colossusdb.PartitionKeeperAdmin/UpdateTableJsonArgs"
	PartitionKeeperAdmin_ListTables_FullMethodName                  = "/colossusdb.PartitionKeeperAdmin/ListTables"
	PartitionKeeperAdmin_QueryTable_FullMethodName                  = "/colossusdb.PartitionKeeperAdmin/QueryTable"
	PartitionKeeperAdmin_RemoveReplicas_FullMethodName              = "/colossusdb.PartitionKeeperAdmin/RemoveReplicas"
	PartitionKeeperAdmin_RestoreTable_FullMethodName                = "/colossusdb.PartitionKeeperAdmin/RestoreTable"
	PartitionKeeperAdmin_SplitTable_FullMethodName                  = "/colossusdb.PartitionKeeperAdmin/SplitTable"
	PartitionKeeperAdmin_QueryPartition_FullMethodName              = "/colossusdb.PartitionKeeperAdmin/QueryPartition"
	PartitionKeeperAdmin_CreateTask_FullMethodName                  = "/colossusdb.PartitionKeeperAdmin/CreateTask"
	PartitionKeeperAdmin_UpdateTask_FullMethodName                  = "/colossusdb.PartitionKeeperAdmin/UpdateTask"
	PartitionKeeperAdmin_DeleteTask_FullMethodName                  = "/colossusdb.PartitionKeeperAdmin/DeleteTask"
	PartitionKeeperAdmin_QueryTask_FullMethodName                   = "/colossusdb.PartitionKeeperAdmin/QueryTask"
	PartitionKeeperAdmin_TriggerDeleteTaskSideEffect_FullMethodName = "/colossusdb.PartitionKeeperAdmin/TriggerDeleteTaskSideEffect"
	PartitionKeeperAdmin_QueryTaskCurrentExecution_FullMethodName   = "/colossusdb.PartitionKeeperAdmin/QueryTaskCurrentExecution"
	PartitionKeeperAdmin_AdminNode_FullMethodName                   = "/colossusdb.PartitionKeeperAdmin/AdminNode"
	PartitionKeeperAdmin_UpdateNodeWeight_FullMethodName            = "/colossusdb.PartitionKeeperAdmin/UpdateNodeWeight"
	PartitionKeeperAdmin_ShrinkAz_FullMethodName                    = "/colossusdb.PartitionKeeperAdmin/ShrinkAz"
	PartitionKeeperAdmin_ExpandAzs_FullMethodName                   = "/colossusdb.PartitionKeeperAdmin/ExpandAzs"
	PartitionKeeperAdmin_CancelExpandAzs_FullMethodName             = "/colossusdb.PartitionKeeperAdmin/CancelExpandAzs"
	PartitionKeeperAdmin_AssignHub_FullMethodName                   = "/colossusdb.PartitionKeeperAdmin/AssignHub"
	PartitionKeeperAdmin_ReplaceNodes_FullMethodName                = "/colossusdb.PartitionKeeperAdmin/ReplaceNodes"
	PartitionKeeperAdmin_ListNodes_FullMethodName                   = "/colossusdb.PartitionKeeperAdmin/ListNodes"
	PartitionKeeperAdmin_QueryNodeInfo_FullMethodName               = "/colossusdb.PartitionKeeperAdmin/QueryNodeInfo"
	PartitionKeeperAdmin_QueryNodesInfo_FullMethodName              = "/colossusdb.PartitionKeeperAdmin/QueryNodesInfo"
	PartitionKeeperAdmin_RemoveWatcher_FullMethodName               = "/colossusdb.PartitionKeeperAdmin/RemoveWatcher"
)

// PartitionKeeperAdminClient is the client API for PartitionKeeperAdmin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PartitionKeeperAdminClient interface {
	// service operations
	// GET
	ListServices(ctx context.Context, in *ListServicesRequest, opts ...grpc.CallOption) (*ListServicesResponse, error)
	// POST
	CreateService(ctx context.Context, in *CreateServiceRequest, opts ...grpc.CallOption) (*ErrorStatusResponse, error)
	// POST
	DeleteService(ctx context.Context, in *DeleteServiceRequest, opts ...grpc.CallOption) (*ErrorStatusResponse, error)
	// POST
	AddHubs(ctx context.Context, in *AddHubsRequest, opts ...grpc.CallOption) (*ErrorStatusResponse, error)
	// POST
	RemoveHubs(ctx context.Context, in *RemoveHubsRequest, opts ...grpc.CallOption) (*ErrorStatusResponse, error)
	// POST
	UpdateHubs(ctx context.Context, in *UpdateHubsRequest, opts ...grpc.CallOption) (*ErrorStatusResponse, error)
	// POST: enable or disable service scheduler
	SwitchSchedulerStatus(ctx context.Context, in *SwitchSchedulerStatusRequest, opts ...grpc.CallOption) (*ErrorStatusResponse, error)
	// POST: enable or disable service kess poller
	SwitchKessPollerStatus(ctx context.Context, in *SwitchKessPollerStatusRequest, opts ...grpc.CallOption) (*ErrorStatusResponse, error)
	// POST
	UpdateScheduleOptions(ctx context.Context, in *UpdateScheduleOptionsRequest, opts ...grpc.CallOption) (*ErrorStatusResponse, error)
	// GET
	QueryService(ctx context.Context, in *QueryServiceRequest, opts ...grpc.CallOption) (*QueryServiceResponse, error)
	// POST
	GiveHints(ctx context.Context, in *GiveHintsRequest, opts ...grpc.CallOption) (*ErrorStatusResponse, error)
	// POST
	RecallHints(ctx context.Context, in *RecallHintsRequest, opts ...grpc.CallOption) (*ErrorStatusResponse, error)
	// table operation
	// POST
	CreateTable(ctx context.Context, in *CreateTableRequest, opts ...grpc.CallOption) (*ErrorStatusResponse, error)
	// POST
	DeleteTable(ctx context.Context, in *DeleteTableRequest, opts ...grpc.CallOption) (*ErrorStatusResponse, error)
	// POST
	UpdateTable(ctx context.Context, in *UpdateTableRequest, opts ...grpc.CallOption) (*ErrorStatusResponse, error)
	// POST
	UpdateTableJsonArgs(ctx context.Context, in *UpdateTableJsonArgsRequest, opts ...grpc.CallOption) (*ErrorStatusResponse, error)
	// GET
	ListTables(ctx context.Context, in *ListTablesRequest, opts ...grpc.CallOption) (*ListTablesResponse, error)
	// GET
	QueryTable(ctx context.Context, in *QueryTableRequest, opts ...grpc.CallOption) (*QueryTableResponse, error)
	// POST
	RemoveReplicas(ctx context.Context, in *ManualRemoveReplicasRequest, opts ...grpc.CallOption) (*ManualRemoveReplicasResponse, error)
	// POST
	RestoreTable(ctx context.Context, in *RestoreTableRequest, opts ...grpc.CallOption) (*ErrorStatusResponse, error)
	// POST
	SplitTable(ctx context.Context, in *SplitTableRequest, opts ...grpc.CallOption) (*ErrorStatusResponse, error)
	// table partition operation
	// GET
	QueryPartition(ctx context.Context, in *QueryPartitionRequest, opts ...grpc.CallOption) (*QueryPartitionResponse, error)
	// table task operation
	// POST
	CreateTask(ctx context.Context, in *OperateTaskRequest, opts ...grpc.CallOption) (*ErrorStatusResponse, error)
	// POST
	UpdateTask(ctx context.Context, in *OperateTaskRequest, opts ...grpc.CallOption) (*ErrorStatusResponse, error)
	// POST
	DeleteTask(ctx context.Context, in *DeleteTaskRequest, opts ...grpc.CallOption) (*ErrorStatusResponse, error)
	// GET
	QueryTask(ctx context.Context, in *QueryTaskRequest, opts ...grpc.CallOption) (*QueryTaskResponse, error)
	// POST
	TriggerDeleteTaskSideEffect(ctx context.Context, in *TriggerDeleteTaskSideEffectRequest, opts ...grpc.CallOption) (*ErrorStatusResponse, error)
	// GET
	QueryTaskCurrentExecution(ctx context.Context, in *QueryTaskCurrentExecutionRequest, opts ...grpc.CallOption) (*QueryTaskCurrentExecutionResponse, error)
	// node operation
	// POST
	AdminNode(ctx context.Context, in *AdminNodeRequest, opts ...grpc.CallOption) (*AdminNodeResponse, error)
	// POST
	UpdateNodeWeight(ctx context.Context, in *UpdateNodeWeightRequest, opts ...grpc.CallOption) (*UpdateNodeWeightResponse, error)
	// POST
	ShrinkAz(ctx context.Context, in *ShrinkAzRequest, opts ...grpc.CallOption) (*ShrinkAzResponse, error)
	// POST
	ExpandAzs(ctx context.Context, in *ExpandAzsRequest, opts ...grpc.CallOption) (*ErrorStatusResponse, error)
	// POST
	CancelExpandAzs(ctx context.Context, in *CancelExpandAzsRequest, opts ...grpc.CallOption) (*ErrorStatusResponse, error)
	// POST
	AssignHub(ctx context.Context, in *AssignHubRequest, opts ...grpc.CallOption) (*ErrorStatusResponse, error)
	// POST
	ReplaceNodes(ctx context.Context, in *ReplaceNodesRequest, opts ...grpc.CallOption) (*ErrorStatusResponse, error)
	// GET
	ListNodes(ctx context.Context, in *ListNodesRequest, opts ...grpc.CallOption) (*ListNodesResponse, error)
	// GET
	QueryNodeInfo(ctx context.Context, in *QueryNodeInfoRequest, opts ...grpc.CallOption) (*QueryNodeInfoResponse, error)
	// POST
	QueryNodesInfo(ctx context.Context, in *QueryNodesInfoRequest, opts ...grpc.CallOption) (*QueryNodesInfoResponse, error)
	// POST
	RemoveWatcher(ctx context.Context, in *RemoveWatcherRequest, opts ...grpc.CallOption) (*ErrorStatusResponse, error)
}

type partitionKeeperAdminClient struct {
	cc grpc.ClientConnInterface
}

func NewPartitionKeeperAdminClient(cc grpc.ClientConnInterface) PartitionKeeperAdminClient {
	return &partitionKeeperAdminClient{cc}
}

func (c *partitionKeeperAdminClient) ListServices(ctx context.Context, in *ListServicesRequest, opts ...grpc.CallOption) (*ListServicesResponse, error) {
	out := new(ListServicesResponse)
	err := c.cc.Invoke(ctx, PartitionKeeperAdmin_ListServices_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionKeeperAdminClient) CreateService(ctx context.Context, in *CreateServiceRequest, opts ...grpc.CallOption) (*ErrorStatusResponse, error) {
	out := new(ErrorStatusResponse)
	err := c.cc.Invoke(ctx, PartitionKeeperAdmin_CreateService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionKeeperAdminClient) DeleteService(ctx context.Context, in *DeleteServiceRequest, opts ...grpc.CallOption) (*ErrorStatusResponse, error) {
	out := new(ErrorStatusResponse)
	err := c.cc.Invoke(ctx, PartitionKeeperAdmin_DeleteService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionKeeperAdminClient) AddHubs(ctx context.Context, in *AddHubsRequest, opts ...grpc.CallOption) (*ErrorStatusResponse, error) {
	out := new(ErrorStatusResponse)
	err := c.cc.Invoke(ctx, PartitionKeeperAdmin_AddHubs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionKeeperAdminClient) RemoveHubs(ctx context.Context, in *RemoveHubsRequest, opts ...grpc.CallOption) (*ErrorStatusResponse, error) {
	out := new(ErrorStatusResponse)
	err := c.cc.Invoke(ctx, PartitionKeeperAdmin_RemoveHubs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionKeeperAdminClient) UpdateHubs(ctx context.Context, in *UpdateHubsRequest, opts ...grpc.CallOption) (*ErrorStatusResponse, error) {
	out := new(ErrorStatusResponse)
	err := c.cc.Invoke(ctx, PartitionKeeperAdmin_UpdateHubs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionKeeperAdminClient) SwitchSchedulerStatus(ctx context.Context, in *SwitchSchedulerStatusRequest, opts ...grpc.CallOption) (*ErrorStatusResponse, error) {
	out := new(ErrorStatusResponse)
	err := c.cc.Invoke(ctx, PartitionKeeperAdmin_SwitchSchedulerStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionKeeperAdminClient) SwitchKessPollerStatus(ctx context.Context, in *SwitchKessPollerStatusRequest, opts ...grpc.CallOption) (*ErrorStatusResponse, error) {
	out := new(ErrorStatusResponse)
	err := c.cc.Invoke(ctx, PartitionKeeperAdmin_SwitchKessPollerStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionKeeperAdminClient) UpdateScheduleOptions(ctx context.Context, in *UpdateScheduleOptionsRequest, opts ...grpc.CallOption) (*ErrorStatusResponse, error) {
	out := new(ErrorStatusResponse)
	err := c.cc.Invoke(ctx, PartitionKeeperAdmin_UpdateScheduleOptions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionKeeperAdminClient) QueryService(ctx context.Context, in *QueryServiceRequest, opts ...grpc.CallOption) (*QueryServiceResponse, error) {
	out := new(QueryServiceResponse)
	err := c.cc.Invoke(ctx, PartitionKeeperAdmin_QueryService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionKeeperAdminClient) GiveHints(ctx context.Context, in *GiveHintsRequest, opts ...grpc.CallOption) (*ErrorStatusResponse, error) {
	out := new(ErrorStatusResponse)
	err := c.cc.Invoke(ctx, PartitionKeeperAdmin_GiveHints_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionKeeperAdminClient) RecallHints(ctx context.Context, in *RecallHintsRequest, opts ...grpc.CallOption) (*ErrorStatusResponse, error) {
	out := new(ErrorStatusResponse)
	err := c.cc.Invoke(ctx, PartitionKeeperAdmin_RecallHints_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionKeeperAdminClient) CreateTable(ctx context.Context, in *CreateTableRequest, opts ...grpc.CallOption) (*ErrorStatusResponse, error) {
	out := new(ErrorStatusResponse)
	err := c.cc.Invoke(ctx, PartitionKeeperAdmin_CreateTable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionKeeperAdminClient) DeleteTable(ctx context.Context, in *DeleteTableRequest, opts ...grpc.CallOption) (*ErrorStatusResponse, error) {
	out := new(ErrorStatusResponse)
	err := c.cc.Invoke(ctx, PartitionKeeperAdmin_DeleteTable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionKeeperAdminClient) UpdateTable(ctx context.Context, in *UpdateTableRequest, opts ...grpc.CallOption) (*ErrorStatusResponse, error) {
	out := new(ErrorStatusResponse)
	err := c.cc.Invoke(ctx, PartitionKeeperAdmin_UpdateTable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionKeeperAdminClient) UpdateTableJsonArgs(ctx context.Context, in *UpdateTableJsonArgsRequest, opts ...grpc.CallOption) (*ErrorStatusResponse, error) {
	out := new(ErrorStatusResponse)
	err := c.cc.Invoke(ctx, PartitionKeeperAdmin_UpdateTableJsonArgs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionKeeperAdminClient) ListTables(ctx context.Context, in *ListTablesRequest, opts ...grpc.CallOption) (*ListTablesResponse, error) {
	out := new(ListTablesResponse)
	err := c.cc.Invoke(ctx, PartitionKeeperAdmin_ListTables_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionKeeperAdminClient) QueryTable(ctx context.Context, in *QueryTableRequest, opts ...grpc.CallOption) (*QueryTableResponse, error) {
	out := new(QueryTableResponse)
	err := c.cc.Invoke(ctx, PartitionKeeperAdmin_QueryTable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionKeeperAdminClient) RemoveReplicas(ctx context.Context, in *ManualRemoveReplicasRequest, opts ...grpc.CallOption) (*ManualRemoveReplicasResponse, error) {
	out := new(ManualRemoveReplicasResponse)
	err := c.cc.Invoke(ctx, PartitionKeeperAdmin_RemoveReplicas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionKeeperAdminClient) RestoreTable(ctx context.Context, in *RestoreTableRequest, opts ...grpc.CallOption) (*ErrorStatusResponse, error) {
	out := new(ErrorStatusResponse)
	err := c.cc.Invoke(ctx, PartitionKeeperAdmin_RestoreTable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionKeeperAdminClient) SplitTable(ctx context.Context, in *SplitTableRequest, opts ...grpc.CallOption) (*ErrorStatusResponse, error) {
	out := new(ErrorStatusResponse)
	err := c.cc.Invoke(ctx, PartitionKeeperAdmin_SplitTable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionKeeperAdminClient) QueryPartition(ctx context.Context, in *QueryPartitionRequest, opts ...grpc.CallOption) (*QueryPartitionResponse, error) {
	out := new(QueryPartitionResponse)
	err := c.cc.Invoke(ctx, PartitionKeeperAdmin_QueryPartition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionKeeperAdminClient) CreateTask(ctx context.Context, in *OperateTaskRequest, opts ...grpc.CallOption) (*ErrorStatusResponse, error) {
	out := new(ErrorStatusResponse)
	err := c.cc.Invoke(ctx, PartitionKeeperAdmin_CreateTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionKeeperAdminClient) UpdateTask(ctx context.Context, in *OperateTaskRequest, opts ...grpc.CallOption) (*ErrorStatusResponse, error) {
	out := new(ErrorStatusResponse)
	err := c.cc.Invoke(ctx, PartitionKeeperAdmin_UpdateTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionKeeperAdminClient) DeleteTask(ctx context.Context, in *DeleteTaskRequest, opts ...grpc.CallOption) (*ErrorStatusResponse, error) {
	out := new(ErrorStatusResponse)
	err := c.cc.Invoke(ctx, PartitionKeeperAdmin_DeleteTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionKeeperAdminClient) QueryTask(ctx context.Context, in *QueryTaskRequest, opts ...grpc.CallOption) (*QueryTaskResponse, error) {
	out := new(QueryTaskResponse)
	err := c.cc.Invoke(ctx, PartitionKeeperAdmin_QueryTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionKeeperAdminClient) TriggerDeleteTaskSideEffect(ctx context.Context, in *TriggerDeleteTaskSideEffectRequest, opts ...grpc.CallOption) (*ErrorStatusResponse, error) {
	out := new(ErrorStatusResponse)
	err := c.cc.Invoke(ctx, PartitionKeeperAdmin_TriggerDeleteTaskSideEffect_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionKeeperAdminClient) QueryTaskCurrentExecution(ctx context.Context, in *QueryTaskCurrentExecutionRequest, opts ...grpc.CallOption) (*QueryTaskCurrentExecutionResponse, error) {
	out := new(QueryTaskCurrentExecutionResponse)
	err := c.cc.Invoke(ctx, PartitionKeeperAdmin_QueryTaskCurrentExecution_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionKeeperAdminClient) AdminNode(ctx context.Context, in *AdminNodeRequest, opts ...grpc.CallOption) (*AdminNodeResponse, error) {
	out := new(AdminNodeResponse)
	err := c.cc.Invoke(ctx, PartitionKeeperAdmin_AdminNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionKeeperAdminClient) UpdateNodeWeight(ctx context.Context, in *UpdateNodeWeightRequest, opts ...grpc.CallOption) (*UpdateNodeWeightResponse, error) {
	out := new(UpdateNodeWeightResponse)
	err := c.cc.Invoke(ctx, PartitionKeeperAdmin_UpdateNodeWeight_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionKeeperAdminClient) ShrinkAz(ctx context.Context, in *ShrinkAzRequest, opts ...grpc.CallOption) (*ShrinkAzResponse, error) {
	out := new(ShrinkAzResponse)
	err := c.cc.Invoke(ctx, PartitionKeeperAdmin_ShrinkAz_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionKeeperAdminClient) ExpandAzs(ctx context.Context, in *ExpandAzsRequest, opts ...grpc.CallOption) (*ErrorStatusResponse, error) {
	out := new(ErrorStatusResponse)
	err := c.cc.Invoke(ctx, PartitionKeeperAdmin_ExpandAzs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionKeeperAdminClient) CancelExpandAzs(ctx context.Context, in *CancelExpandAzsRequest, opts ...grpc.CallOption) (*ErrorStatusResponse, error) {
	out := new(ErrorStatusResponse)
	err := c.cc.Invoke(ctx, PartitionKeeperAdmin_CancelExpandAzs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionKeeperAdminClient) AssignHub(ctx context.Context, in *AssignHubRequest, opts ...grpc.CallOption) (*ErrorStatusResponse, error) {
	out := new(ErrorStatusResponse)
	err := c.cc.Invoke(ctx, PartitionKeeperAdmin_AssignHub_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionKeeperAdminClient) ReplaceNodes(ctx context.Context, in *ReplaceNodesRequest, opts ...grpc.CallOption) (*ErrorStatusResponse, error) {
	out := new(ErrorStatusResponse)
	err := c.cc.Invoke(ctx, PartitionKeeperAdmin_ReplaceNodes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionKeeperAdminClient) ListNodes(ctx context.Context, in *ListNodesRequest, opts ...grpc.CallOption) (*ListNodesResponse, error) {
	out := new(ListNodesResponse)
	err := c.cc.Invoke(ctx, PartitionKeeperAdmin_ListNodes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionKeeperAdminClient) QueryNodeInfo(ctx context.Context, in *QueryNodeInfoRequest, opts ...grpc.CallOption) (*QueryNodeInfoResponse, error) {
	out := new(QueryNodeInfoResponse)
	err := c.cc.Invoke(ctx, PartitionKeeperAdmin_QueryNodeInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionKeeperAdminClient) QueryNodesInfo(ctx context.Context, in *QueryNodesInfoRequest, opts ...grpc.CallOption) (*QueryNodesInfoResponse, error) {
	out := new(QueryNodesInfoResponse)
	err := c.cc.Invoke(ctx, PartitionKeeperAdmin_QueryNodesInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionKeeperAdminClient) RemoveWatcher(ctx context.Context, in *RemoveWatcherRequest, opts ...grpc.CallOption) (*ErrorStatusResponse, error) {
	out := new(ErrorStatusResponse)
	err := c.cc.Invoke(ctx, PartitionKeeperAdmin_RemoveWatcher_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PartitionKeeperAdminServer is the server API for PartitionKeeperAdmin service.
// All implementations must embed UnimplementedPartitionKeeperAdminServer
// for forward compatibility
type PartitionKeeperAdminServer interface {
	// service operations
	// GET
	ListServices(context.Context, *ListServicesRequest) (*ListServicesResponse, error)
	// POST
	CreateService(context.Context, *CreateServiceRequest) (*ErrorStatusResponse, error)
	// POST
	DeleteService(context.Context, *DeleteServiceRequest) (*ErrorStatusResponse, error)
	// POST
	AddHubs(context.Context, *AddHubsRequest) (*ErrorStatusResponse, error)
	// POST
	RemoveHubs(context.Context, *RemoveHubsRequest) (*ErrorStatusResponse, error)
	// POST
	UpdateHubs(context.Context, *UpdateHubsRequest) (*ErrorStatusResponse, error)
	// POST: enable or disable service scheduler
	SwitchSchedulerStatus(context.Context, *SwitchSchedulerStatusRequest) (*ErrorStatusResponse, error)
	// POST: enable or disable service kess poller
	SwitchKessPollerStatus(context.Context, *SwitchKessPollerStatusRequest) (*ErrorStatusResponse, error)
	// POST
	UpdateScheduleOptions(context.Context, *UpdateScheduleOptionsRequest) (*ErrorStatusResponse, error)
	// GET
	QueryService(context.Context, *QueryServiceRequest) (*QueryServiceResponse, error)
	// POST
	GiveHints(context.Context, *GiveHintsRequest) (*ErrorStatusResponse, error)
	// POST
	RecallHints(context.Context, *RecallHintsRequest) (*ErrorStatusResponse, error)
	// table operation
	// POST
	CreateTable(context.Context, *CreateTableRequest) (*ErrorStatusResponse, error)
	// POST
	DeleteTable(context.Context, *DeleteTableRequest) (*ErrorStatusResponse, error)
	// POST
	UpdateTable(context.Context, *UpdateTableRequest) (*ErrorStatusResponse, error)
	// POST
	UpdateTableJsonArgs(context.Context, *UpdateTableJsonArgsRequest) (*ErrorStatusResponse, error)
	// GET
	ListTables(context.Context, *ListTablesRequest) (*ListTablesResponse, error)
	// GET
	QueryTable(context.Context, *QueryTableRequest) (*QueryTableResponse, error)
	// POST
	RemoveReplicas(context.Context, *ManualRemoveReplicasRequest) (*ManualRemoveReplicasResponse, error)
	// POST
	RestoreTable(context.Context, *RestoreTableRequest) (*ErrorStatusResponse, error)
	// POST
	SplitTable(context.Context, *SplitTableRequest) (*ErrorStatusResponse, error)
	// table partition operation
	// GET
	QueryPartition(context.Context, *QueryPartitionRequest) (*QueryPartitionResponse, error)
	// table task operation
	// POST
	CreateTask(context.Context, *OperateTaskRequest) (*ErrorStatusResponse, error)
	// POST
	UpdateTask(context.Context, *OperateTaskRequest) (*ErrorStatusResponse, error)
	// POST
	DeleteTask(context.Context, *DeleteTaskRequest) (*ErrorStatusResponse, error)
	// GET
	QueryTask(context.Context, *QueryTaskRequest) (*QueryTaskResponse, error)
	// POST
	TriggerDeleteTaskSideEffect(context.Context, *TriggerDeleteTaskSideEffectRequest) (*ErrorStatusResponse, error)
	// GET
	QueryTaskCurrentExecution(context.Context, *QueryTaskCurrentExecutionRequest) (*QueryTaskCurrentExecutionResponse, error)
	// node operation
	// POST
	AdminNode(context.Context, *AdminNodeRequest) (*AdminNodeResponse, error)
	// POST
	UpdateNodeWeight(context.Context, *UpdateNodeWeightRequest) (*UpdateNodeWeightResponse, error)
	// POST
	ShrinkAz(context.Context, *ShrinkAzRequest) (*ShrinkAzResponse, error)
	// POST
	ExpandAzs(context.Context, *ExpandAzsRequest) (*ErrorStatusResponse, error)
	// POST
	CancelExpandAzs(context.Context, *CancelExpandAzsRequest) (*ErrorStatusResponse, error)
	// POST
	AssignHub(context.Context, *AssignHubRequest) (*ErrorStatusResponse, error)
	// POST
	ReplaceNodes(context.Context, *ReplaceNodesRequest) (*ErrorStatusResponse, error)
	// GET
	ListNodes(context.Context, *ListNodesRequest) (*ListNodesResponse, error)
	// GET
	QueryNodeInfo(context.Context, *QueryNodeInfoRequest) (*QueryNodeInfoResponse, error)
	// POST
	QueryNodesInfo(context.Context, *QueryNodesInfoRequest) (*QueryNodesInfoResponse, error)
	// POST
	RemoveWatcher(context.Context, *RemoveWatcherRequest) (*ErrorStatusResponse, error)
	mustEmbedUnimplementedPartitionKeeperAdminServer()
}

// UnimplementedPartitionKeeperAdminServer must be embedded to have forward compatible implementations.
type UnimplementedPartitionKeeperAdminServer struct {
}

func (UnimplementedPartitionKeeperAdminServer) ListServices(context.Context, *ListServicesRequest) (*ListServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServices not implemented")
}
func (UnimplementedPartitionKeeperAdminServer) CreateService(context.Context, *CreateServiceRequest) (*ErrorStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateService not implemented")
}
func (UnimplementedPartitionKeeperAdminServer) DeleteService(context.Context, *DeleteServiceRequest) (*ErrorStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteService not implemented")
}
func (UnimplementedPartitionKeeperAdminServer) AddHubs(context.Context, *AddHubsRequest) (*ErrorStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddHubs not implemented")
}
func (UnimplementedPartitionKeeperAdminServer) RemoveHubs(context.Context, *RemoveHubsRequest) (*ErrorStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveHubs not implemented")
}
func (UnimplementedPartitionKeeperAdminServer) UpdateHubs(context.Context, *UpdateHubsRequest) (*ErrorStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHubs not implemented")
}
func (UnimplementedPartitionKeeperAdminServer) SwitchSchedulerStatus(context.Context, *SwitchSchedulerStatusRequest) (*ErrorStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchSchedulerStatus not implemented")
}
func (UnimplementedPartitionKeeperAdminServer) SwitchKessPollerStatus(context.Context, *SwitchKessPollerStatusRequest) (*ErrorStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchKessPollerStatus not implemented")
}
func (UnimplementedPartitionKeeperAdminServer) UpdateScheduleOptions(context.Context, *UpdateScheduleOptionsRequest) (*ErrorStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScheduleOptions not implemented")
}
func (UnimplementedPartitionKeeperAdminServer) QueryService(context.Context, *QueryServiceRequest) (*QueryServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryService not implemented")
}
func (UnimplementedPartitionKeeperAdminServer) GiveHints(context.Context, *GiveHintsRequest) (*ErrorStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GiveHints not implemented")
}
func (UnimplementedPartitionKeeperAdminServer) RecallHints(context.Context, *RecallHintsRequest) (*ErrorStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecallHints not implemented")
}
func (UnimplementedPartitionKeeperAdminServer) CreateTable(context.Context, *CreateTableRequest) (*ErrorStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTable not implemented")
}
func (UnimplementedPartitionKeeperAdminServer) DeleteTable(context.Context, *DeleteTableRequest) (*ErrorStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTable not implemented")
}
func (UnimplementedPartitionKeeperAdminServer) UpdateTable(context.Context, *UpdateTableRequest) (*ErrorStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTable not implemented")
}
func (UnimplementedPartitionKeeperAdminServer) UpdateTableJsonArgs(context.Context, *UpdateTableJsonArgsRequest) (*ErrorStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTableJsonArgs not implemented")
}
func (UnimplementedPartitionKeeperAdminServer) ListTables(context.Context, *ListTablesRequest) (*ListTablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTables not implemented")
}
func (UnimplementedPartitionKeeperAdminServer) QueryTable(context.Context, *QueryTableRequest) (*QueryTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTable not implemented")
}
func (UnimplementedPartitionKeeperAdminServer) RemoveReplicas(context.Context, *ManualRemoveReplicasRequest) (*ManualRemoveReplicasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveReplicas not implemented")
}
func (UnimplementedPartitionKeeperAdminServer) RestoreTable(context.Context, *RestoreTableRequest) (*ErrorStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreTable not implemented")
}
func (UnimplementedPartitionKeeperAdminServer) SplitTable(context.Context, *SplitTableRequest) (*ErrorStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SplitTable not implemented")
}
func (UnimplementedPartitionKeeperAdminServer) QueryPartition(context.Context, *QueryPartitionRequest) (*QueryPartitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPartition not implemented")
}
func (UnimplementedPartitionKeeperAdminServer) CreateTask(context.Context, *OperateTaskRequest) (*ErrorStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (UnimplementedPartitionKeeperAdminServer) UpdateTask(context.Context, *OperateTaskRequest) (*ErrorStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTask not implemented")
}
func (UnimplementedPartitionKeeperAdminServer) DeleteTask(context.Context, *DeleteTaskRequest) (*ErrorStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTask not implemented")
}
func (UnimplementedPartitionKeeperAdminServer) QueryTask(context.Context, *QueryTaskRequest) (*QueryTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTask not implemented")
}
func (UnimplementedPartitionKeeperAdminServer) TriggerDeleteTaskSideEffect(context.Context, *TriggerDeleteTaskSideEffectRequest) (*ErrorStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerDeleteTaskSideEffect not implemented")
}
func (UnimplementedPartitionKeeperAdminServer) QueryTaskCurrentExecution(context.Context, *QueryTaskCurrentExecutionRequest) (*QueryTaskCurrentExecutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTaskCurrentExecution not implemented")
}
func (UnimplementedPartitionKeeperAdminServer) AdminNode(context.Context, *AdminNodeRequest) (*AdminNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminNode not implemented")
}
func (UnimplementedPartitionKeeperAdminServer) UpdateNodeWeight(context.Context, *UpdateNodeWeightRequest) (*UpdateNodeWeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNodeWeight not implemented")
}
func (UnimplementedPartitionKeeperAdminServer) ShrinkAz(context.Context, *ShrinkAzRequest) (*ShrinkAzResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShrinkAz not implemented")
}
func (UnimplementedPartitionKeeperAdminServer) ExpandAzs(context.Context, *ExpandAzsRequest) (*ErrorStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExpandAzs not implemented")
}
func (UnimplementedPartitionKeeperAdminServer) CancelExpandAzs(context.Context, *CancelExpandAzsRequest) (*ErrorStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelExpandAzs not implemented")
}
func (UnimplementedPartitionKeeperAdminServer) AssignHub(context.Context, *AssignHubRequest) (*ErrorStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignHub not implemented")
}
func (UnimplementedPartitionKeeperAdminServer) ReplaceNodes(context.Context, *ReplaceNodesRequest) (*ErrorStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplaceNodes not implemented")
}
func (UnimplementedPartitionKeeperAdminServer) ListNodes(context.Context, *ListNodesRequest) (*ListNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodes not implemented")
}
func (UnimplementedPartitionKeeperAdminServer) QueryNodeInfo(context.Context, *QueryNodeInfoRequest) (*QueryNodeInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryNodeInfo not implemented")
}
func (UnimplementedPartitionKeeperAdminServer) QueryNodesInfo(context.Context, *QueryNodesInfoRequest) (*QueryNodesInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryNodesInfo not implemented")
}
func (UnimplementedPartitionKeeperAdminServer) RemoveWatcher(context.Context, *RemoveWatcherRequest) (*ErrorStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveWatcher not implemented")
}
func (UnimplementedPartitionKeeperAdminServer) mustEmbedUnimplementedPartitionKeeperAdminServer() {}

// UnsafePartitionKeeperAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PartitionKeeperAdminServer will
// result in compilation errors.
type UnsafePartitionKeeperAdminServer interface {
	mustEmbedUnimplementedPartitionKeeperAdminServer()
}

func RegisterPartitionKeeperAdminServer(s grpc.ServiceRegistrar, srv PartitionKeeperAdminServer) {
	s.RegisterService(&PartitionKeeperAdmin_ServiceDesc, srv)
}

func _PartitionKeeperAdmin_ListServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionKeeperAdminServer).ListServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartitionKeeperAdmin_ListServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionKeeperAdminServer).ListServices(ctx, req.(*ListServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionKeeperAdmin_CreateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionKeeperAdminServer).CreateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartitionKeeperAdmin_CreateService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionKeeperAdminServer).CreateService(ctx, req.(*CreateServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionKeeperAdmin_DeleteService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionKeeperAdminServer).DeleteService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartitionKeeperAdmin_DeleteService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionKeeperAdminServer).DeleteService(ctx, req.(*DeleteServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionKeeperAdmin_AddHubs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddHubsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionKeeperAdminServer).AddHubs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartitionKeeperAdmin_AddHubs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionKeeperAdminServer).AddHubs(ctx, req.(*AddHubsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionKeeperAdmin_RemoveHubs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveHubsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionKeeperAdminServer).RemoveHubs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartitionKeeperAdmin_RemoveHubs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionKeeperAdminServer).RemoveHubs(ctx, req.(*RemoveHubsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionKeeperAdmin_UpdateHubs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHubsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionKeeperAdminServer).UpdateHubs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartitionKeeperAdmin_UpdateHubs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionKeeperAdminServer).UpdateHubs(ctx, req.(*UpdateHubsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionKeeperAdmin_SwitchSchedulerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchSchedulerStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionKeeperAdminServer).SwitchSchedulerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartitionKeeperAdmin_SwitchSchedulerStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionKeeperAdminServer).SwitchSchedulerStatus(ctx, req.(*SwitchSchedulerStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionKeeperAdmin_SwitchKessPollerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchKessPollerStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionKeeperAdminServer).SwitchKessPollerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartitionKeeperAdmin_SwitchKessPollerStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionKeeperAdminServer).SwitchKessPollerStatus(ctx, req.(*SwitchKessPollerStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionKeeperAdmin_UpdateScheduleOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateScheduleOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionKeeperAdminServer).UpdateScheduleOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartitionKeeperAdmin_UpdateScheduleOptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionKeeperAdminServer).UpdateScheduleOptions(ctx, req.(*UpdateScheduleOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionKeeperAdmin_QueryService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionKeeperAdminServer).QueryService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartitionKeeperAdmin_QueryService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionKeeperAdminServer).QueryService(ctx, req.(*QueryServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionKeeperAdmin_GiveHints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GiveHintsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionKeeperAdminServer).GiveHints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartitionKeeperAdmin_GiveHints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionKeeperAdminServer).GiveHints(ctx, req.(*GiveHintsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionKeeperAdmin_RecallHints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecallHintsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionKeeperAdminServer).RecallHints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartitionKeeperAdmin_RecallHints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionKeeperAdminServer).RecallHints(ctx, req.(*RecallHintsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionKeeperAdmin_CreateTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionKeeperAdminServer).CreateTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartitionKeeperAdmin_CreateTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionKeeperAdminServer).CreateTable(ctx, req.(*CreateTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionKeeperAdmin_DeleteTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionKeeperAdminServer).DeleteTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartitionKeeperAdmin_DeleteTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionKeeperAdminServer).DeleteTable(ctx, req.(*DeleteTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionKeeperAdmin_UpdateTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionKeeperAdminServer).UpdateTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartitionKeeperAdmin_UpdateTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionKeeperAdminServer).UpdateTable(ctx, req.(*UpdateTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionKeeperAdmin_UpdateTableJsonArgs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTableJsonArgsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionKeeperAdminServer).UpdateTableJsonArgs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartitionKeeperAdmin_UpdateTableJsonArgs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionKeeperAdminServer).UpdateTableJsonArgs(ctx, req.(*UpdateTableJsonArgsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionKeeperAdmin_ListTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionKeeperAdminServer).ListTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartitionKeeperAdmin_ListTables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionKeeperAdminServer).ListTables(ctx, req.(*ListTablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionKeeperAdmin_QueryTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionKeeperAdminServer).QueryTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartitionKeeperAdmin_QueryTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionKeeperAdminServer).QueryTable(ctx, req.(*QueryTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionKeeperAdmin_RemoveReplicas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManualRemoveReplicasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionKeeperAdminServer).RemoveReplicas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartitionKeeperAdmin_RemoveReplicas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionKeeperAdminServer).RemoveReplicas(ctx, req.(*ManualRemoveReplicasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionKeeperAdmin_RestoreTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionKeeperAdminServer).RestoreTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartitionKeeperAdmin_RestoreTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionKeeperAdminServer).RestoreTable(ctx, req.(*RestoreTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionKeeperAdmin_SplitTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SplitTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionKeeperAdminServer).SplitTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartitionKeeperAdmin_SplitTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionKeeperAdminServer).SplitTable(ctx, req.(*SplitTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionKeeperAdmin_QueryPartition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPartitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionKeeperAdminServer).QueryPartition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartitionKeeperAdmin_QueryPartition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionKeeperAdminServer).QueryPartition(ctx, req.(*QueryPartitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionKeeperAdmin_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionKeeperAdminServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartitionKeeperAdmin_CreateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionKeeperAdminServer).CreateTask(ctx, req.(*OperateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionKeeperAdmin_UpdateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionKeeperAdminServer).UpdateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartitionKeeperAdmin_UpdateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionKeeperAdminServer).UpdateTask(ctx, req.(*OperateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionKeeperAdmin_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionKeeperAdminServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartitionKeeperAdmin_DeleteTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionKeeperAdminServer).DeleteTask(ctx, req.(*DeleteTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionKeeperAdmin_QueryTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionKeeperAdminServer).QueryTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartitionKeeperAdmin_QueryTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionKeeperAdminServer).QueryTask(ctx, req.(*QueryTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionKeeperAdmin_TriggerDeleteTaskSideEffect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerDeleteTaskSideEffectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionKeeperAdminServer).TriggerDeleteTaskSideEffect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartitionKeeperAdmin_TriggerDeleteTaskSideEffect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionKeeperAdminServer).TriggerDeleteTaskSideEffect(ctx, req.(*TriggerDeleteTaskSideEffectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionKeeperAdmin_QueryTaskCurrentExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTaskCurrentExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionKeeperAdminServer).QueryTaskCurrentExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartitionKeeperAdmin_QueryTaskCurrentExecution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionKeeperAdminServer).QueryTaskCurrentExecution(ctx, req.(*QueryTaskCurrentExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionKeeperAdmin_AdminNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionKeeperAdminServer).AdminNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartitionKeeperAdmin_AdminNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionKeeperAdminServer).AdminNode(ctx, req.(*AdminNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionKeeperAdmin_UpdateNodeWeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNodeWeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionKeeperAdminServer).UpdateNodeWeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartitionKeeperAdmin_UpdateNodeWeight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionKeeperAdminServer).UpdateNodeWeight(ctx, req.(*UpdateNodeWeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionKeeperAdmin_ShrinkAz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShrinkAzRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionKeeperAdminServer).ShrinkAz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartitionKeeperAdmin_ShrinkAz_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionKeeperAdminServer).ShrinkAz(ctx, req.(*ShrinkAzRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionKeeperAdmin_ExpandAzs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpandAzsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionKeeperAdminServer).ExpandAzs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartitionKeeperAdmin_ExpandAzs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionKeeperAdminServer).ExpandAzs(ctx, req.(*ExpandAzsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionKeeperAdmin_CancelExpandAzs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelExpandAzsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionKeeperAdminServer).CancelExpandAzs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartitionKeeperAdmin_CancelExpandAzs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionKeeperAdminServer).CancelExpandAzs(ctx, req.(*CancelExpandAzsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionKeeperAdmin_AssignHub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignHubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionKeeperAdminServer).AssignHub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartitionKeeperAdmin_AssignHub_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionKeeperAdminServer).AssignHub(ctx, req.(*AssignHubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionKeeperAdmin_ReplaceNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplaceNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionKeeperAdminServer).ReplaceNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartitionKeeperAdmin_ReplaceNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionKeeperAdminServer).ReplaceNodes(ctx, req.(*ReplaceNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionKeeperAdmin_ListNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionKeeperAdminServer).ListNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartitionKeeperAdmin_ListNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionKeeperAdminServer).ListNodes(ctx, req.(*ListNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionKeeperAdmin_QueryNodeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNodeInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionKeeperAdminServer).QueryNodeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartitionKeeperAdmin_QueryNodeInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionKeeperAdminServer).QueryNodeInfo(ctx, req.(*QueryNodeInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionKeeperAdmin_QueryNodesInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNodesInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionKeeperAdminServer).QueryNodesInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartitionKeeperAdmin_QueryNodesInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionKeeperAdminServer).QueryNodesInfo(ctx, req.(*QueryNodesInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionKeeperAdmin_RemoveWatcher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveWatcherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionKeeperAdminServer).RemoveWatcher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartitionKeeperAdmin_RemoveWatcher_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionKeeperAdminServer).RemoveWatcher(ctx, req.(*RemoveWatcherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PartitionKeeperAdmin_ServiceDesc is the grpc.ServiceDesc for PartitionKeeperAdmin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PartitionKeeperAdmin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "colossusdb.PartitionKeeperAdmin",
	HandlerType: (*PartitionKeeperAdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListServices",
			Handler:    _PartitionKeeperAdmin_ListServices_Handler,
		},
		{
			MethodName: "CreateService",
			Handler:    _PartitionKeeperAdmin_CreateService_Handler,
		},
		{
			MethodName: "DeleteService",
			Handler:    _PartitionKeeperAdmin_DeleteService_Handler,
		},
		{
			MethodName: "AddHubs",
			Handler:    _PartitionKeeperAdmin_AddHubs_Handler,
		},
		{
			MethodName: "RemoveHubs",
			Handler:    _PartitionKeeperAdmin_RemoveHubs_Handler,
		},
		{
			MethodName: "UpdateHubs",
			Handler:    _PartitionKeeperAdmin_UpdateHubs_Handler,
		},
		{
			MethodName: "SwitchSchedulerStatus",
			Handler:    _PartitionKeeperAdmin_SwitchSchedulerStatus_Handler,
		},
		{
			MethodName: "SwitchKessPollerStatus",
			Handler:    _PartitionKeeperAdmin_SwitchKessPollerStatus_Handler,
		},
		{
			MethodName: "UpdateScheduleOptions",
			Handler:    _PartitionKeeperAdmin_UpdateScheduleOptions_Handler,
		},
		{
			MethodName: "QueryService",
			Handler:    _PartitionKeeperAdmin_QueryService_Handler,
		},
		{
			MethodName: "GiveHints",
			Handler:    _PartitionKeeperAdmin_GiveHints_Handler,
		},
		{
			MethodName: "RecallHints",
			Handler:    _PartitionKeeperAdmin_RecallHints_Handler,
		},
		{
			MethodName: "CreateTable",
			Handler:    _PartitionKeeperAdmin_CreateTable_Handler,
		},
		{
			MethodName: "DeleteTable",
			Handler:    _PartitionKeeperAdmin_DeleteTable_Handler,
		},
		{
			MethodName: "UpdateTable",
			Handler:    _PartitionKeeperAdmin_UpdateTable_Handler,
		},
		{
			MethodName: "UpdateTableJsonArgs",
			Handler:    _PartitionKeeperAdmin_UpdateTableJsonArgs_Handler,
		},
		{
			MethodName: "ListTables",
			Handler:    _PartitionKeeperAdmin_ListTables_Handler,
		},
		{
			MethodName: "QueryTable",
			Handler:    _PartitionKeeperAdmin_QueryTable_Handler,
		},
		{
			MethodName: "RemoveReplicas",
			Handler:    _PartitionKeeperAdmin_RemoveReplicas_Handler,
		},
		{
			MethodName: "RestoreTable",
			Handler:    _PartitionKeeperAdmin_RestoreTable_Handler,
		},
		{
			MethodName: "SplitTable",
			Handler:    _PartitionKeeperAdmin_SplitTable_Handler,
		},
		{
			MethodName: "QueryPartition",
			Handler:    _PartitionKeeperAdmin_QueryPartition_Handler,
		},
		{
			MethodName: "CreateTask",
			Handler:    _PartitionKeeperAdmin_CreateTask_Handler,
		},
		{
			MethodName: "UpdateTask",
			Handler:    _PartitionKeeperAdmin_UpdateTask_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _PartitionKeeperAdmin_DeleteTask_Handler,
		},
		{
			MethodName: "QueryTask",
			Handler:    _PartitionKeeperAdmin_QueryTask_Handler,
		},
		{
			MethodName: "TriggerDeleteTaskSideEffect",
			Handler:    _PartitionKeeperAdmin_TriggerDeleteTaskSideEffect_Handler,
		},
		{
			MethodName: "QueryTaskCurrentExecution",
			Handler:    _PartitionKeeperAdmin_QueryTaskCurrentExecution_Handler,
		},
		{
			MethodName: "AdminNode",
			Handler:    _PartitionKeeperAdmin_AdminNode_Handler,
		},
		{
			MethodName: "UpdateNodeWeight",
			Handler:    _PartitionKeeperAdmin_UpdateNodeWeight_Handler,
		},
		{
			MethodName: "ShrinkAz",
			Handler:    _PartitionKeeperAdmin_ShrinkAz_Handler,
		},
		{
			MethodName: "ExpandAzs",
			Handler:    _PartitionKeeperAdmin_ExpandAzs_Handler,
		},
		{
			MethodName: "CancelExpandAzs",
			Handler:    _PartitionKeeperAdmin_CancelExpandAzs_Handler,
		},
		{
			MethodName: "AssignHub",
			Handler:    _PartitionKeeperAdmin_AssignHub_Handler,
		},
		{
			MethodName: "ReplaceNodes",
			Handler:    _PartitionKeeperAdmin_ReplaceNodes_Handler,
		},
		{
			MethodName: "ListNodes",
			Handler:    _PartitionKeeperAdmin_ListNodes_Handler,
		},
		{
			MethodName: "QueryNodeInfo",
			Handler:    _PartitionKeeperAdmin_QueryNodeInfo_Handler,
		},
		{
			MethodName: "QueryNodesInfo",
			Handler:    _PartitionKeeperAdmin_QueryNodesInfo_Handler,
		},
		{
			MethodName: "RemoveWatcher",
			Handler:    _PartitionKeeperAdmin_RemoveWatcher_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teams/reco-arch/colossusdb/proto/partition_keeper_admin.proto",
}
