// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: teams/reco-arch/colossusdb/proto/tables_manager.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TablesManager_GetNextId_FullMethodName  = "/colossusdb.TablesManager/GetNextId"
	TablesManager_AllocateId_FullMethodName = "/colossusdb.TablesManager/AllocateId"
)

// TablesManagerClient is the client API for TablesManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TablesManagerClient interface {
	GetNextId(ctx context.Context, in *GetNextIdRequest, opts ...grpc.CallOption) (*GetNextIdResponse, error)
	AllocateId(ctx context.Context, in *AllocateIdRequest, opts ...grpc.CallOption) (*AllocateIdResponse, error)
}

type tablesManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewTablesManagerClient(cc grpc.ClientConnInterface) TablesManagerClient {
	return &tablesManagerClient{cc}
}

func (c *tablesManagerClient) GetNextId(ctx context.Context, in *GetNextIdRequest, opts ...grpc.CallOption) (*GetNextIdResponse, error) {
	out := new(GetNextIdResponse)
	err := c.cc.Invoke(ctx, TablesManager_GetNextId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tablesManagerClient) AllocateId(ctx context.Context, in *AllocateIdRequest, opts ...grpc.CallOption) (*AllocateIdResponse, error) {
	out := new(AllocateIdResponse)
	err := c.cc.Invoke(ctx, TablesManager_AllocateId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TablesManagerServer is the server API for TablesManager service.
// All implementations must embed UnimplementedTablesManagerServer
// for forward compatibility
type TablesManagerServer interface {
	GetNextId(context.Context, *GetNextIdRequest) (*GetNextIdResponse, error)
	AllocateId(context.Context, *AllocateIdRequest) (*AllocateIdResponse, error)
	mustEmbedUnimplementedTablesManagerServer()
}

// UnimplementedTablesManagerServer must be embedded to have forward compatible implementations.
type UnimplementedTablesManagerServer struct {
}

func (UnimplementedTablesManagerServer) GetNextId(context.Context, *GetNextIdRequest) (*GetNextIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextId not implemented")
}
func (UnimplementedTablesManagerServer) AllocateId(context.Context, *AllocateIdRequest) (*AllocateIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocateId not implemented")
}
func (UnimplementedTablesManagerServer) mustEmbedUnimplementedTablesManagerServer() {}

// UnsafeTablesManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TablesManagerServer will
// result in compilation errors.
type UnsafeTablesManagerServer interface {
	mustEmbedUnimplementedTablesManagerServer()
}

func RegisterTablesManagerServer(s grpc.ServiceRegistrar, srv TablesManagerServer) {
	s.RegisterService(&TablesManager_ServiceDesc, srv)
}

func _TablesManager_GetNextId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNextIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TablesManagerServer).GetNextId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TablesManager_GetNextId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TablesManagerServer).GetNextId(ctx, req.(*GetNextIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TablesManager_AllocateId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocateIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TablesManagerServer).AllocateId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TablesManager_AllocateId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TablesManagerServer).AllocateId(ctx, req.(*AllocateIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TablesManager_ServiceDesc is the grpc.ServiceDesc for TablesManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TablesManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "colossusdb.TablesManager",
	HandlerType: (*TablesManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNextId",
			Handler:    _TablesManager_GetNextId_Handler,
		},
		{
			MethodName: "AllocateId",
			Handler:    _TablesManager_AllocateId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teams/reco-arch/colossusdb/proto/tables_manager.proto",
}
