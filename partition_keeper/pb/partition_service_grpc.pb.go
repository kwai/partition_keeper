// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: teams/reco-arch/colossusdb/proto/partition_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PartitionService_AddReplica_FullMethodName           = "/colossusdb.PartitionService/AddReplica"
	PartitionService_Reconfigure_FullMethodName          = "/colossusdb.PartitionService/Reconfigure"
	PartitionService_RemoveReplica_FullMethodName        = "/colossusdb.PartitionService/RemoveReplica"
	PartitionService_GetReplicas_FullMethodName          = "/colossusdb.PartitionService/GetReplicas"
	PartitionService_HandleCustomCommand_FullMethodName  = "/colossusdb.PartitionService/HandleCustomCommand"
	PartitionService_ChangeAuthentication_FullMethodName = "/colossusdb.PartitionService/ChangeAuthentication"
	PartitionService_ReplicaSplit_FullMethodName         = "/colossusdb.PartitionService/ReplicaSplit"
	PartitionService_ReplicaSplitCleanup_FullMethodName  = "/colossusdb.PartitionService/ReplicaSplitCleanup"
	PartitionService_PrepareSwitchPrimary_FullMethodName = "/colossusdb.PartitionService/PrepareSwitchPrimary"
	PartitionService_GetReplicateInfo_FullMethodName     = "/colossusdb.PartitionService/GetReplicateInfo"
)

// PartitionServiceClient is the client API for PartitionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PartitionServiceClient interface {
	AddReplica(ctx context.Context, in *AddReplicaRequest, opts ...grpc.CallOption) (*ErrorStatus, error)
	Reconfigure(ctx context.Context, in *ReconfigPartitionRequest, opts ...grpc.CallOption) (*ErrorStatus, error)
	RemoveReplica(ctx context.Context, in *RemoveReplicaRequest, opts ...grpc.CallOption) (*ErrorStatus, error)
	GetReplicas(ctx context.Context, in *GetReplicasRequest, opts ...grpc.CallOption) (*GetReplicasResponse, error)
	HandleCustomCommand(ctx context.Context, in *CustomCommandRequest, opts ...grpc.CallOption) (*CustomCommandResponse, error)
	ChangeAuthentication(ctx context.Context, in *ChangeAuthenticationRequest, opts ...grpc.CallOption) (*ErrorStatus, error)
	ReplicaSplit(ctx context.Context, in *ReplicaSplitRequest, opts ...grpc.CallOption) (*ErrorStatus, error)
	ReplicaSplitCleanup(ctx context.Context, in *ReplicaSplitCleanupRequest, opts ...grpc.CallOption) (*ErrorStatus, error)
	PrepareSwitchPrimary(ctx context.Context, in *PrepareSwitchPrimaryRequest, opts ...grpc.CallOption) (*ErrorStatus, error)
	GetReplicateInfo(ctx context.Context, in *ReplicateInfoRequest, opts ...grpc.CallOption) (*ReplicateInfoResponse, error)
}

type partitionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPartitionServiceClient(cc grpc.ClientConnInterface) PartitionServiceClient {
	return &partitionServiceClient{cc}
}

func (c *partitionServiceClient) AddReplica(ctx context.Context, in *AddReplicaRequest, opts ...grpc.CallOption) (*ErrorStatus, error) {
	out := new(ErrorStatus)
	err := c.cc.Invoke(ctx, PartitionService_AddReplica_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionServiceClient) Reconfigure(ctx context.Context, in *ReconfigPartitionRequest, opts ...grpc.CallOption) (*ErrorStatus, error) {
	out := new(ErrorStatus)
	err := c.cc.Invoke(ctx, PartitionService_Reconfigure_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionServiceClient) RemoveReplica(ctx context.Context, in *RemoveReplicaRequest, opts ...grpc.CallOption) (*ErrorStatus, error) {
	out := new(ErrorStatus)
	err := c.cc.Invoke(ctx, PartitionService_RemoveReplica_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionServiceClient) GetReplicas(ctx context.Context, in *GetReplicasRequest, opts ...grpc.CallOption) (*GetReplicasResponse, error) {
	out := new(GetReplicasResponse)
	err := c.cc.Invoke(ctx, PartitionService_GetReplicas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionServiceClient) HandleCustomCommand(ctx context.Context, in *CustomCommandRequest, opts ...grpc.CallOption) (*CustomCommandResponse, error) {
	out := new(CustomCommandResponse)
	err := c.cc.Invoke(ctx, PartitionService_HandleCustomCommand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionServiceClient) ChangeAuthentication(ctx context.Context, in *ChangeAuthenticationRequest, opts ...grpc.CallOption) (*ErrorStatus, error) {
	out := new(ErrorStatus)
	err := c.cc.Invoke(ctx, PartitionService_ChangeAuthentication_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionServiceClient) ReplicaSplit(ctx context.Context, in *ReplicaSplitRequest, opts ...grpc.CallOption) (*ErrorStatus, error) {
	out := new(ErrorStatus)
	err := c.cc.Invoke(ctx, PartitionService_ReplicaSplit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionServiceClient) ReplicaSplitCleanup(ctx context.Context, in *ReplicaSplitCleanupRequest, opts ...grpc.CallOption) (*ErrorStatus, error) {
	out := new(ErrorStatus)
	err := c.cc.Invoke(ctx, PartitionService_ReplicaSplitCleanup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionServiceClient) PrepareSwitchPrimary(ctx context.Context, in *PrepareSwitchPrimaryRequest, opts ...grpc.CallOption) (*ErrorStatus, error) {
	out := new(ErrorStatus)
	err := c.cc.Invoke(ctx, PartitionService_PrepareSwitchPrimary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionServiceClient) GetReplicateInfo(ctx context.Context, in *ReplicateInfoRequest, opts ...grpc.CallOption) (*ReplicateInfoResponse, error) {
	out := new(ReplicateInfoResponse)
	err := c.cc.Invoke(ctx, PartitionService_GetReplicateInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PartitionServiceServer is the server API for PartitionService service.
// All implementations must embed UnimplementedPartitionServiceServer
// for forward compatibility
type PartitionServiceServer interface {
	AddReplica(context.Context, *AddReplicaRequest) (*ErrorStatus, error)
	Reconfigure(context.Context, *ReconfigPartitionRequest) (*ErrorStatus, error)
	RemoveReplica(context.Context, *RemoveReplicaRequest) (*ErrorStatus, error)
	GetReplicas(context.Context, *GetReplicasRequest) (*GetReplicasResponse, error)
	HandleCustomCommand(context.Context, *CustomCommandRequest) (*CustomCommandResponse, error)
	ChangeAuthentication(context.Context, *ChangeAuthenticationRequest) (*ErrorStatus, error)
	ReplicaSplit(context.Context, *ReplicaSplitRequest) (*ErrorStatus, error)
	ReplicaSplitCleanup(context.Context, *ReplicaSplitCleanupRequest) (*ErrorStatus, error)
	PrepareSwitchPrimary(context.Context, *PrepareSwitchPrimaryRequest) (*ErrorStatus, error)
	GetReplicateInfo(context.Context, *ReplicateInfoRequest) (*ReplicateInfoResponse, error)
	mustEmbedUnimplementedPartitionServiceServer()
}

// UnimplementedPartitionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPartitionServiceServer struct {
}

func (UnimplementedPartitionServiceServer) AddReplica(context.Context, *AddReplicaRequest) (*ErrorStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddReplica not implemented")
}
func (UnimplementedPartitionServiceServer) Reconfigure(context.Context, *ReconfigPartitionRequest) (*ErrorStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reconfigure not implemented")
}
func (UnimplementedPartitionServiceServer) RemoveReplica(context.Context, *RemoveReplicaRequest) (*ErrorStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveReplica not implemented")
}
func (UnimplementedPartitionServiceServer) GetReplicas(context.Context, *GetReplicasRequest) (*GetReplicasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReplicas not implemented")
}
func (UnimplementedPartitionServiceServer) HandleCustomCommand(context.Context, *CustomCommandRequest) (*CustomCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleCustomCommand not implemented")
}
func (UnimplementedPartitionServiceServer) ChangeAuthentication(context.Context, *ChangeAuthenticationRequest) (*ErrorStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeAuthentication not implemented")
}
func (UnimplementedPartitionServiceServer) ReplicaSplit(context.Context, *ReplicaSplitRequest) (*ErrorStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplicaSplit not implemented")
}
func (UnimplementedPartitionServiceServer) ReplicaSplitCleanup(context.Context, *ReplicaSplitCleanupRequest) (*ErrorStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplicaSplitCleanup not implemented")
}
func (UnimplementedPartitionServiceServer) PrepareSwitchPrimary(context.Context, *PrepareSwitchPrimaryRequest) (*ErrorStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareSwitchPrimary not implemented")
}
func (UnimplementedPartitionServiceServer) GetReplicateInfo(context.Context, *ReplicateInfoRequest) (*ReplicateInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReplicateInfo not implemented")
}
func (UnimplementedPartitionServiceServer) mustEmbedUnimplementedPartitionServiceServer() {}

// UnsafePartitionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PartitionServiceServer will
// result in compilation errors.
type UnsafePartitionServiceServer interface {
	mustEmbedUnimplementedPartitionServiceServer()
}

func RegisterPartitionServiceServer(s grpc.ServiceRegistrar, srv PartitionServiceServer) {
	s.RegisterService(&PartitionService_ServiceDesc, srv)
}

func _PartitionService_AddReplica_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddReplicaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionServiceServer).AddReplica(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartitionService_AddReplica_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionServiceServer).AddReplica(ctx, req.(*AddReplicaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionService_Reconfigure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReconfigPartitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionServiceServer).Reconfigure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartitionService_Reconfigure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionServiceServer).Reconfigure(ctx, req.(*ReconfigPartitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionService_RemoveReplica_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveReplicaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionServiceServer).RemoveReplica(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartitionService_RemoveReplica_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionServiceServer).RemoveReplica(ctx, req.(*RemoveReplicaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionService_GetReplicas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReplicasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionServiceServer).GetReplicas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartitionService_GetReplicas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionServiceServer).GetReplicas(ctx, req.(*GetReplicasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionService_HandleCustomCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionServiceServer).HandleCustomCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartitionService_HandleCustomCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionServiceServer).HandleCustomCommand(ctx, req.(*CustomCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionService_ChangeAuthentication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeAuthenticationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionServiceServer).ChangeAuthentication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartitionService_ChangeAuthentication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionServiceServer).ChangeAuthentication(ctx, req.(*ChangeAuthenticationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionService_ReplicaSplit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplicaSplitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionServiceServer).ReplicaSplit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartitionService_ReplicaSplit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionServiceServer).ReplicaSplit(ctx, req.(*ReplicaSplitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionService_ReplicaSplitCleanup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplicaSplitCleanupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionServiceServer).ReplicaSplitCleanup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartitionService_ReplicaSplitCleanup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionServiceServer).ReplicaSplitCleanup(ctx, req.(*ReplicaSplitCleanupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionService_PrepareSwitchPrimary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareSwitchPrimaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionServiceServer).PrepareSwitchPrimary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartitionService_PrepareSwitchPrimary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionServiceServer).PrepareSwitchPrimary(ctx, req.(*PrepareSwitchPrimaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionService_GetReplicateInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplicateInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionServiceServer).GetReplicateInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartitionService_GetReplicateInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionServiceServer).GetReplicateInfo(ctx, req.(*ReplicateInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PartitionService_ServiceDesc is the grpc.ServiceDesc for PartitionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PartitionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "colossusdb.PartitionService",
	HandlerType: (*PartitionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddReplica",
			Handler:    _PartitionService_AddReplica_Handler,
		},
		{
			MethodName: "Reconfigure",
			Handler:    _PartitionService_Reconfigure_Handler,
		},
		{
			MethodName: "RemoveReplica",
			Handler:    _PartitionService_RemoveReplica_Handler,
		},
		{
			MethodName: "GetReplicas",
			Handler:    _PartitionService_GetReplicas_Handler,
		},
		{
			MethodName: "HandleCustomCommand",
			Handler:    _PartitionService_HandleCustomCommand_Handler,
		},
		{
			MethodName: "ChangeAuthentication",
			Handler:    _PartitionService_ChangeAuthentication_Handler,
		},
		{
			MethodName: "ReplicaSplit",
			Handler:    _PartitionService_ReplicaSplit_Handler,
		},
		{
			MethodName: "ReplicaSplitCleanup",
			Handler:    _PartitionService_ReplicaSplitCleanup_Handler,
		},
		{
			MethodName: "PrepareSwitchPrimary",
			Handler:    _PartitionService_PrepareSwitchPrimary_Handler,
		},
		{
			MethodName: "GetReplicateInfo",
			Handler:    _PartitionService_GetReplicateInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teams/reco-arch/colossusdb/proto/partition_service.proto",
}
