// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: teams/reco-arch/colossusdb/proto/universal_discovery.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UniversalDiscovery_GetNodes_FullMethodName = "/colossusdb.UniversalDiscovery/GetNodes"
)

// UniversalDiscoveryClient is the client API for UniversalDiscovery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UniversalDiscoveryClient interface {
	GetNodes(ctx context.Context, in *GetNodesRequest, opts ...grpc.CallOption) (*GetNodesResponse, error)
}

type universalDiscoveryClient struct {
	cc grpc.ClientConnInterface
}

func NewUniversalDiscoveryClient(cc grpc.ClientConnInterface) UniversalDiscoveryClient {
	return &universalDiscoveryClient{cc}
}

func (c *universalDiscoveryClient) GetNodes(ctx context.Context, in *GetNodesRequest, opts ...grpc.CallOption) (*GetNodesResponse, error) {
	out := new(GetNodesResponse)
	err := c.cc.Invoke(ctx, UniversalDiscovery_GetNodes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UniversalDiscoveryServer is the server API for UniversalDiscovery service.
// All implementations must embed UnimplementedUniversalDiscoveryServer
// for forward compatibility
type UniversalDiscoveryServer interface {
	GetNodes(context.Context, *GetNodesRequest) (*GetNodesResponse, error)
	mustEmbedUnimplementedUniversalDiscoveryServer()
}

// UnimplementedUniversalDiscoveryServer must be embedded to have forward compatible implementations.
type UnimplementedUniversalDiscoveryServer struct {
}

func (UnimplementedUniversalDiscoveryServer) GetNodes(context.Context, *GetNodesRequest) (*GetNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodes not implemented")
}
func (UnimplementedUniversalDiscoveryServer) mustEmbedUnimplementedUniversalDiscoveryServer() {}

// UnsafeUniversalDiscoveryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UniversalDiscoveryServer will
// result in compilation errors.
type UnsafeUniversalDiscoveryServer interface {
	mustEmbedUnimplementedUniversalDiscoveryServer()
}

func RegisterUniversalDiscoveryServer(s grpc.ServiceRegistrar, srv UniversalDiscoveryServer) {
	s.RegisterService(&UniversalDiscovery_ServiceDesc, srv)
}

func _UniversalDiscovery_GetNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniversalDiscoveryServer).GetNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UniversalDiscovery_GetNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniversalDiscoveryServer).GetNodes(ctx, req.(*GetNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UniversalDiscovery_ServiceDesc is the grpc.ServiceDesc for UniversalDiscovery service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UniversalDiscovery_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "colossusdb.UniversalDiscovery",
	HandlerType: (*UniversalDiscoveryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNodes",
			Handler:    _UniversalDiscovery_GetNodes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teams/reco-arch/colossusdb/proto/universal_discovery.proto",
}
