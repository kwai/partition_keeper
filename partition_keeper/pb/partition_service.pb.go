// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.0
// 	protoc        (unknown)
// source: teams/reco-arch/colossusdb/proto/partition_service.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PartitionError_Code int32

const (
	PartitionError_kOK PartitionError_Code = 0
	// TODO: mark error code to a uniq range
	PartitionError_kReplicaExists      PartitionError_Code = 1
	PartitionError_kReplicaNotExists   PartitionError_Code = 2
	PartitionError_kUnknown            PartitionError_Code = 3
	PartitionError_kResourceExhausted  PartitionError_Code = 4
	PartitionError_kFailedPrecondition PartitionError_Code = 5
	PartitionError_kInvalidArgument    PartitionError_Code = 6
)

// Enum value maps for PartitionError_Code.
var (
	PartitionError_Code_name = map[int32]string{
		0: "kOK",
		1: "kReplicaExists",
		2: "kReplicaNotExists",
		3: "kUnknown",
		4: "kResourceExhausted",
		5: "kFailedPrecondition",
		6: "kInvalidArgument",
	}
	PartitionError_Code_value = map[string]int32{
		"kOK":                 0,
		"kReplicaExists":      1,
		"kReplicaNotExists":   2,
		"kUnknown":            3,
		"kResourceExhausted":  4,
		"kFailedPrecondition": 5,
		"kInvalidArgument":    6,
	}
)

func (x PartitionError_Code) Enum() *PartitionError_Code {
	p := new(PartitionError_Code)
	*p = x
	return p
}

func (x PartitionError_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PartitionError_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_teams_reco_arch_colossusdb_proto_partition_service_proto_enumTypes[0].Descriptor()
}

func (PartitionError_Code) Type() protoreflect.EnumType {
	return &file_teams_reco_arch_colossusdb_proto_partition_service_proto_enumTypes[0]
}

func (x PartitionError_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PartitionError_Code.Descriptor instead.
func (PartitionError_Code) EnumDescriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_service_proto_rawDescGZIP(), []int{0, 0}
}

type PartitionError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PartitionError) Reset() {
	*x = PartitionError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionError) ProtoMessage() {}

func (x *PartitionError) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionError.ProtoReflect.Descriptor instead.
func (*PartitionError) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_service_proto_rawDescGZIP(), []int{0}
}

type RpcNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// may be ip or hostname
	NodeName string `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name"`
	Port     int32  `protobuf:"varint,2,opt,name=port,proto3" json:"port"`
}

func (x *RpcNode) Reset() {
	*x = RpcNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpcNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcNode) ProtoMessage() {}

func (x *RpcNode) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcNode.ProtoReflect.Descriptor instead.
func (*RpcNode) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_service_proto_rawDescGZIP(), []int{1}
}

func (x *RpcNode) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *RpcNode) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type PartitionReplica struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role           ReplicaRole       `protobuf:"varint,1,opt,name=role,proto3,enum=colossusdb.ReplicaRole" json:"role"`
	Node           *RpcNode          `protobuf:"bytes,2,opt,name=node,proto3" json:"node"`
	StatisticsInfo map[string]string `protobuf:"bytes,3,rep,name=statistics_info,json=statisticsInfo,proto3" json:"statistics_info" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ReadyToPromote bool              `protobuf:"varint,4,opt,name=ready_to_promote,json=readyToPromote,proto3" json:"ready_to_promote"`
	HubName        string            `protobuf:"bytes,5,opt,name=hub_name,json=hubName,proto3" json:"hub_name"`
	NodeUniqueId   string            `protobuf:"bytes,6,opt,name=node_unique_id,json=nodeUniqueId,proto3" json:"node_unique_id"`
	RestoreVersion int64             `protobuf:"varint,7,opt,name=restore_version,json=restoreVersion,proto3" json:"restore_version"`
	// only used for report,
	// replica report its split cleanup progress to partition keeper
	SplitCleanupVersion int32 `protobuf:"varint,8,opt,name=split_cleanup_version,json=splitCleanupVersion,proto3" json:"split_cleanup_version"`
}

func (x *PartitionReplica) Reset() {
	*x = PartitionReplica{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionReplica) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionReplica) ProtoMessage() {}

func (x *PartitionReplica) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionReplica.ProtoReflect.Descriptor instead.
func (*PartitionReplica) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_service_proto_rawDescGZIP(), []int{2}
}

func (x *PartitionReplica) GetRole() ReplicaRole {
	if x != nil {
		return x.Role
	}
	return ReplicaRole_kPrimary
}

func (x *PartitionReplica) GetNode() *RpcNode {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *PartitionReplica) GetStatisticsInfo() map[string]string {
	if x != nil {
		return x.StatisticsInfo
	}
	return nil
}

func (x *PartitionReplica) GetReadyToPromote() bool {
	if x != nil {
		return x.ReadyToPromote
	}
	return false
}

func (x *PartitionReplica) GetHubName() string {
	if x != nil {
		return x.HubName
	}
	return ""
}

func (x *PartitionReplica) GetNodeUniqueId() string {
	if x != nil {
		return x.NodeUniqueId
	}
	return ""
}

func (x *PartitionReplica) GetRestoreVersion() int64 {
	if x != nil {
		return x.RestoreVersion
	}
	return 0
}

func (x *PartitionReplica) GetSplitCleanupVersion() int32 {
	if x != nil {
		return x.SplitCleanupVersion
	}
	return 0
}

type PartitionPeerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MembershipVersion int64               `protobuf:"varint,1,opt,name=membership_version,json=membershipVersion,proto3" json:"membership_version"`
	Peers             []*PartitionReplica `protobuf:"bytes,2,rep,name=peers,proto3" json:"peers"`
	// when do reconfiguration,
	// partition keeper will send partition new split version to every replica.
	//
	// when do report, every replica will report its newest split version
	SplitVersion int32 `protobuf:"varint,3,opt,name=split_version,json=splitVersion,proto3" json:"split_version"`
}

func (x *PartitionPeerInfo) Reset() {
	*x = PartitionPeerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionPeerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionPeerInfo) ProtoMessage() {}

func (x *PartitionPeerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionPeerInfo.ProtoReflect.Descriptor instead.
func (*PartitionPeerInfo) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_service_proto_rawDescGZIP(), []int{3}
}

func (x *PartitionPeerInfo) GetMembershipVersion() int64 {
	if x != nil {
		return x.MembershipVersion
	}
	return 0
}

func (x *PartitionPeerInfo) GetPeers() []*PartitionReplica {
	if x != nil {
		return x.Peers
	}
	return nil
}

func (x *PartitionPeerInfo) GetSplitVersion() int32 {
	if x != nil {
		return x.SplitVersion
	}
	return 0
}

type DynamicTableInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartitionNum      int32 `protobuf:"varint,1,opt,name=partition_num,json=partitionNum,proto3" json:"partition_num"`
	TableSplitVersion int32 `protobuf:"varint,2,opt,name=table_split_version,json=tableSplitVersion,proto3" json:"table_split_version"`
}

func (x *DynamicTableInfo) Reset() {
	*x = DynamicTableInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicTableInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicTableInfo) ProtoMessage() {}

func (x *DynamicTableInfo) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicTableInfo.ProtoReflect.Descriptor instead.
func (*DynamicTableInfo) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_service_proto_rawDescGZIP(), []int{4}
}

func (x *DynamicTableInfo) GetPartitionNum() int32 {
	if x != nil {
		return x.PartitionNum
	}
	return 0
}

func (x *DynamicTableInfo) GetTableSplitVersion() int32 {
	if x != nil {
		return x.TableSplitVersion
	}
	return 0
}

type PartitionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartitionId  int32  `protobuf:"varint,1,opt,name=partition_id,json=partitionId,proto3" json:"partition_id"`
	TableId      int32  `protobuf:"varint,2,opt,name=table_id,json=tableId,proto3" json:"table_id"`
	TableName    string `protobuf:"bytes,3,opt,name=table_name,json=tableName,proto3" json:"table_name"`
	ServiceType  string `protobuf:"bytes,5,opt,name=service_type,json=serviceType,proto3" json:"service_type"`
	PartitionNum int32  `protobuf:"varint,6,opt,name=partition_num,json=partitionNum,proto3" json:"partition_num"`
	// stable configs for table
	TableJsonArgs string `protobuf:"bytes,4,opt,name=table_json_args,json=tableJsonArgs,proto3" json:"table_json_args"`
	// dynamic configs for table
	TableKconfPath    string `protobuf:"bytes,7,opt,name=table_kconf_path,json=tableKconfPath,proto3" json:"table_kconf_path"`
	TableSplitVersion int32  `protobuf:"varint,8,opt,name=table_split_version,json=tableSplitVersion,proto3" json:"table_split_version"`
}

func (x *PartitionInfo) Reset() {
	*x = PartitionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionInfo) ProtoMessage() {}

func (x *PartitionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionInfo.ProtoReflect.Descriptor instead.
func (*PartitionInfo) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_service_proto_rawDescGZIP(), []int{5}
}

func (x *PartitionInfo) GetPartitionId() int32 {
	if x != nil {
		return x.PartitionId
	}
	return 0
}

func (x *PartitionInfo) GetTableId() int32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *PartitionInfo) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *PartitionInfo) GetServiceType() string {
	if x != nil {
		return x.ServiceType
	}
	return ""
}

func (x *PartitionInfo) GetPartitionNum() int32 {
	if x != nil {
		return x.PartitionNum
	}
	return 0
}

func (x *PartitionInfo) GetTableJsonArgs() string {
	if x != nil {
		return x.TableJsonArgs
	}
	return ""
}

func (x *PartitionInfo) GetTableKconfPath() string {
	if x != nil {
		return x.TableKconfPath
	}
	return ""
}

func (x *PartitionInfo) GetTableSplitVersion() int32 {
	if x != nil {
		return x.TableSplitVersion
	}
	return 0
}

// ======= add replica ==========
type AddReplicaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Part     *PartitionInfo     `protobuf:"bytes,1,opt,name=part,proto3" json:"part"`
	PeerInfo *PartitionPeerInfo `protobuf:"bytes,2,opt,name=peer_info,json=peerInfo,proto3" json:"peer_info"`
	// this field give the max replicas assigned to this rpc node for this table
	EstimatedReplicas int32 `protobuf:"varint,3,opt,name=estimated_replicas,json=estimatedReplicas,proto3" json:"estimated_replicas"`
	// this value is true if the adding replica request is sent in restoring, otherwise false
	ForRestore bool               `protobuf:"varint,4,opt,name=for_restore,json=forRestore,proto3" json:"for_restore"`
	AuthKey    string             `protobuf:"bytes,5,opt,name=auth_key,json=authKey,proto3" json:"auth_key"`
	ParentInfo *PartitionPeerInfo `protobuf:"bytes,6,opt,name=parent_info,json=parentInfo,proto3" json:"parent_info"`
}

func (x *AddReplicaRequest) Reset() {
	*x = AddReplicaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddReplicaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddReplicaRequest) ProtoMessage() {}

func (x *AddReplicaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddReplicaRequest.ProtoReflect.Descriptor instead.
func (*AddReplicaRequest) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_service_proto_rawDescGZIP(), []int{6}
}

func (x *AddReplicaRequest) GetPart() *PartitionInfo {
	if x != nil {
		return x.Part
	}
	return nil
}

func (x *AddReplicaRequest) GetPeerInfo() *PartitionPeerInfo {
	if x != nil {
		return x.PeerInfo
	}
	return nil
}

func (x *AddReplicaRequest) GetEstimatedReplicas() int32 {
	if x != nil {
		return x.EstimatedReplicas
	}
	return 0
}

func (x *AddReplicaRequest) GetForRestore() bool {
	if x != nil {
		return x.ForRestore
	}
	return false
}

func (x *AddReplicaRequest) GetAuthKey() string {
	if x != nil {
		return x.AuthKey
	}
	return ""
}

func (x *AddReplicaRequest) GetParentInfo() *PartitionPeerInfo {
	if x != nil {
		return x.ParentInfo
	}
	return nil
}

// ===== replica reconfigure ========
type ReconfigPartitionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartitionId int32              `protobuf:"varint,1,opt,name=partition_id,json=partitionId,proto3" json:"partition_id"`
	TableId     int32              `protobuf:"varint,2,opt,name=table_id,json=tableId,proto3" json:"table_id"`
	PeerInfo    *PartitionPeerInfo `protobuf:"bytes,3,opt,name=peer_info,json=peerInfo,proto3" json:"peer_info"`
	AuthKey     string             `protobuf:"bytes,4,opt,name=auth_key,json=authKey,proto3" json:"auth_key"`
	ParentInfo  *PartitionPeerInfo `protobuf:"bytes,5,opt,name=parent_info,json=parentInfo,proto3" json:"parent_info"`
	TableInfo   *DynamicTableInfo  `protobuf:"bytes,6,opt,name=table_info,json=tableInfo,proto3" json:"table_info"`
}

func (x *ReconfigPartitionRequest) Reset() {
	*x = ReconfigPartitionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReconfigPartitionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReconfigPartitionRequest) ProtoMessage() {}

func (x *ReconfigPartitionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReconfigPartitionRequest.ProtoReflect.Descriptor instead.
func (*ReconfigPartitionRequest) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_service_proto_rawDescGZIP(), []int{7}
}

func (x *ReconfigPartitionRequest) GetPartitionId() int32 {
	if x != nil {
		return x.PartitionId
	}
	return 0
}

func (x *ReconfigPartitionRequest) GetTableId() int32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *ReconfigPartitionRequest) GetPeerInfo() *PartitionPeerInfo {
	if x != nil {
		return x.PeerInfo
	}
	return nil
}

func (x *ReconfigPartitionRequest) GetAuthKey() string {
	if x != nil {
		return x.AuthKey
	}
	return ""
}

func (x *ReconfigPartitionRequest) GetParentInfo() *PartitionPeerInfo {
	if x != nil {
		return x.ParentInfo
	}
	return nil
}

func (x *ReconfigPartitionRequest) GetTableInfo() *DynamicTableInfo {
	if x != nil {
		return x.TableInfo
	}
	return nil
}

// ====== remove replica ===========
type RemoveReplicaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartitionId int32              `protobuf:"varint,1,opt,name=partition_id,json=partitionId,proto3" json:"partition_id"`
	TableId     int32              `protobuf:"varint,2,opt,name=table_id,json=tableId,proto3" json:"table_id"`
	PeerInfo    *PartitionPeerInfo `protobuf:"bytes,3,opt,name=peer_info,json=peerInfo,proto3" json:"peer_info"`
	// this field give the max replicas assigned to this rpc node for this table
	EstimatedReplicas int32  `protobuf:"varint,4,opt,name=estimated_replicas,json=estimatedReplicas,proto3" json:"estimated_replicas"`
	AuthKey           string `protobuf:"bytes,5,opt,name=auth_key,json=authKey,proto3" json:"auth_key"`
}

func (x *RemoveReplicaRequest) Reset() {
	*x = RemoveReplicaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveReplicaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveReplicaRequest) ProtoMessage() {}

func (x *RemoveReplicaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveReplicaRequest.ProtoReflect.Descriptor instead.
func (*RemoveReplicaRequest) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_service_proto_rawDescGZIP(), []int{8}
}

func (x *RemoveReplicaRequest) GetPartitionId() int32 {
	if x != nil {
		return x.PartitionId
	}
	return 0
}

func (x *RemoveReplicaRequest) GetTableId() int32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *RemoveReplicaRequest) GetPeerInfo() *PartitionPeerInfo {
	if x != nil {
		return x.PeerInfo
	}
	return nil
}

func (x *RemoveReplicaRequest) GetEstimatedReplicas() int32 {
	if x != nil {
		return x.EstimatedReplicas
	}
	return 0
}

func (x *RemoveReplicaRequest) GetAuthKey() string {
	if x != nil {
		return x.AuthKey
	}
	return ""
}

// ======= collect ============
type ReplicaReportInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartitionId int32              `protobuf:"varint,1,opt,name=partition_id,json=partitionId,proto3" json:"partition_id"`
	TableId     int32              `protobuf:"varint,2,opt,name=table_id,json=tableId,proto3" json:"table_id"`
	PeerInfo    *PartitionPeerInfo `protobuf:"bytes,3,opt,name=peer_info,json=peerInfo,proto3" json:"peer_info"`
}

func (x *ReplicaReportInfo) Reset() {
	*x = ReplicaReportInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicaReportInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicaReportInfo) ProtoMessage() {}

func (x *ReplicaReportInfo) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicaReportInfo.ProtoReflect.Descriptor instead.
func (*ReplicaReportInfo) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_service_proto_rawDescGZIP(), []int{9}
}

func (x *ReplicaReportInfo) GetPartitionId() int32 {
	if x != nil {
		return x.PartitionId
	}
	return 0
}

func (x *ReplicaReportInfo) GetTableId() int32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *ReplicaReportInfo) GetPeerInfo() *PartitionPeerInfo {
	if x != nil {
		return x.PeerInfo
	}
	return nil
}

type GetReplicasRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// may specified which replica to collect
	// if empty then collect all replicas
	Infos []*ReplicaReportInfo `protobuf:"bytes,1,rep,name=infos,proto3" json:"infos"`
	// if this request isn't sent from partition_keeper, then skip estimated_replicas field
	FromPartitionKeeper bool `protobuf:"varint,2,opt,name=from_partition_keeper,json=fromPartitionKeeper,proto3" json:"from_partition_keeper"`
	// table_id -> estimated_replicas
	EstimatedReplicas map[int32]int32 `protobuf:"bytes,3,rep,name=estimated_replicas,json=estimatedReplicas,proto3" json:"estimated_replicas" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	AuthKey           string          `protobuf:"bytes,4,opt,name=auth_key,json=authKey,proto3" json:"auth_key"`
}

func (x *GetReplicasRequest) Reset() {
	*x = GetReplicasRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReplicasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReplicasRequest) ProtoMessage() {}

func (x *GetReplicasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReplicasRequest.ProtoReflect.Descriptor instead.
func (*GetReplicasRequest) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_service_proto_rawDescGZIP(), []int{10}
}

func (x *GetReplicasRequest) GetInfos() []*ReplicaReportInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetReplicasRequest) GetFromPartitionKeeper() bool {
	if x != nil {
		return x.FromPartitionKeeper
	}
	return false
}

func (x *GetReplicasRequest) GetEstimatedReplicas() map[int32]int32 {
	if x != nil {
		return x.EstimatedReplicas
	}
	return nil
}

func (x *GetReplicasRequest) GetAuthKey() string {
	if x != nil {
		return x.AuthKey
	}
	return ""
}

type ServerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName    string            `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name"`
	NodeId         string            `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id"`
	Node           *RpcNode          `protobuf:"bytes,3,opt,name=node,proto3" json:"node"`
	BelongToHub    string            `protobuf:"bytes,4,opt,name=belong_to_hub,json=belongToHub,proto3" json:"belong_to_hub"`
	StatisticsInfo map[string]string `protobuf:"bytes,5,rep,name=statistics_info,json=statisticsInfo,proto3" json:"statistics_info" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ServerInfo) Reset() {
	*x = ServerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerInfo) ProtoMessage() {}

func (x *ServerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerInfo.ProtoReflect.Descriptor instead.
func (*ServerInfo) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_service_proto_rawDescGZIP(), []int{11}
}

func (x *ServerInfo) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *ServerInfo) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *ServerInfo) GetNode() *RpcNode {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *ServerInfo) GetBelongToHub() string {
	if x != nil {
		return x.BelongToHub
	}
	return ""
}

func (x *ServerInfo) GetStatisticsInfo() map[string]string {
	if x != nil {
		return x.StatisticsInfo
	}
	return nil
}

type GetReplicasResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerResult *ErrorStatus         `protobuf:"bytes,4,opt,name=server_result,json=serverResult,proto3" json:"server_result"`
	ServerInfo   *ServerInfo          `protobuf:"bytes,1,opt,name=server_info,json=serverInfo,proto3" json:"server_info"`
	Results      []*ErrorStatus       `protobuf:"bytes,2,rep,name=results,proto3" json:"results"`
	Infos        []*ReplicaReportInfo `protobuf:"bytes,3,rep,name=infos,proto3" json:"infos"`
}

func (x *GetReplicasResponse) Reset() {
	*x = GetReplicasResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReplicasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReplicasResponse) ProtoMessage() {}

func (x *GetReplicasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReplicasResponse.ProtoReflect.Descriptor instead.
func (*GetReplicasResponse) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_service_proto_rawDescGZIP(), []int{12}
}

func (x *GetReplicasResponse) GetServerResult() *ErrorStatus {
	if x != nil {
		return x.ServerResult
	}
	return nil
}

func (x *GetReplicasResponse) GetServerInfo() *ServerInfo {
	if x != nil {
		return x.ServerInfo
	}
	return nil
}

func (x *GetReplicasResponse) GetResults() []*ErrorStatus {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *GetReplicasResponse) GetInfos() []*ReplicaReportInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

// ========= custom command ==============
type CustomCommandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartitionId           int32             `protobuf:"varint,1,opt,name=partition_id,json=partitionId,proto3" json:"partition_id"`
	TableId               int32             `protobuf:"varint,2,opt,name=table_id,json=tableId,proto3" json:"table_id"`
	CommandSessionId      int64             `protobuf:"varint,3,opt,name=command_session_id,json=commandSessionId,proto3" json:"command_session_id"`
	CommandIssueTimestamp int64             `protobuf:"varint,4,opt,name=command_issue_timestamp,json=commandIssueTimestamp,proto3" json:"command_issue_timestamp"`
	CommandName           string            `protobuf:"bytes,5,opt,name=command_name,json=commandName,proto3" json:"command_name"`
	Args                  map[string]string `protobuf:"bytes,6,rep,name=args,proto3" json:"args" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AuthKey               string            `protobuf:"bytes,7,opt,name=auth_key,json=authKey,proto3" json:"auth_key"`
}

func (x *CustomCommandRequest) Reset() {
	*x = CustomCommandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomCommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomCommandRequest) ProtoMessage() {}

func (x *CustomCommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomCommandRequest.ProtoReflect.Descriptor instead.
func (*CustomCommandRequest) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_service_proto_rawDescGZIP(), []int{13}
}

func (x *CustomCommandRequest) GetPartitionId() int32 {
	if x != nil {
		return x.PartitionId
	}
	return 0
}

func (x *CustomCommandRequest) GetTableId() int32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *CustomCommandRequest) GetCommandSessionId() int64 {
	if x != nil {
		return x.CommandSessionId
	}
	return 0
}

func (x *CustomCommandRequest) GetCommandIssueTimestamp() int64 {
	if x != nil {
		return x.CommandIssueTimestamp
	}
	return 0
}

func (x *CustomCommandRequest) GetCommandName() string {
	if x != nil {
		return x.CommandName
	}
	return ""
}

func (x *CustomCommandRequest) GetArgs() map[string]string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *CustomCommandRequest) GetAuthKey() string {
	if x != nil {
		return x.AuthKey
	}
	return ""
}

type CustomCommandResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *ErrorStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status"`
	Progress int32        `protobuf:"varint,2,opt,name=progress,proto3" json:"progress"`
}

func (x *CustomCommandResponse) Reset() {
	*x = CustomCommandResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomCommandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomCommandResponse) ProtoMessage() {}

func (x *CustomCommandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomCommandResponse.ProtoReflect.Descriptor instead.
func (*CustomCommandResponse) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_service_proto_rawDescGZIP(), []int{14}
}

func (x *CustomCommandResponse) GetStatus() *ErrorStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CustomCommandResponse) GetProgress() int32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

// ========= change authentication ==============
type ChangeAuthenticationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthKey string `protobuf:"bytes,1,opt,name=auth_key,json=authKey,proto3" json:"auth_key"`
}

func (x *ChangeAuthenticationRequest) Reset() {
	*x = ChangeAuthenticationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeAuthenticationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeAuthenticationRequest) ProtoMessage() {}

func (x *ChangeAuthenticationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeAuthenticationRequest.ProtoReflect.Descriptor instead.
func (*ChangeAuthenticationRequest) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_service_proto_rawDescGZIP(), []int{15}
}

func (x *ChangeAuthenticationRequest) GetAuthKey() string {
	if x != nil {
		return x.AuthKey
	}
	return ""
}

// ========= split ==============
type ReplicaSplitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId      int32              `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id"`
	PartitionId  int32              `protobuf:"varint,2,opt,name=partition_id,json=partitionId,proto3" json:"partition_id"`
	NewTableInfo *DynamicTableInfo  `protobuf:"bytes,3,opt,name=new_table_info,json=newTableInfo,proto3" json:"new_table_info"`
	Peers        *PartitionPeerInfo `protobuf:"bytes,4,opt,name=peers,proto3" json:"peers"`
	ChildPeers   *PartitionPeerInfo `protobuf:"bytes,5,opt,name=child_peers,json=childPeers,proto3" json:"child_peers"`
}

func (x *ReplicaSplitRequest) Reset() {
	*x = ReplicaSplitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicaSplitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicaSplitRequest) ProtoMessage() {}

func (x *ReplicaSplitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicaSplitRequest.ProtoReflect.Descriptor instead.
func (*ReplicaSplitRequest) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_service_proto_rawDescGZIP(), []int{16}
}

func (x *ReplicaSplitRequest) GetTableId() int32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *ReplicaSplitRequest) GetPartitionId() int32 {
	if x != nil {
		return x.PartitionId
	}
	return 0
}

func (x *ReplicaSplitRequest) GetNewTableInfo() *DynamicTableInfo {
	if x != nil {
		return x.NewTableInfo
	}
	return nil
}

func (x *ReplicaSplitRequest) GetPeers() *PartitionPeerInfo {
	if x != nil {
		return x.Peers
	}
	return nil
}

func (x *ReplicaSplitRequest) GetChildPeers() *PartitionPeerInfo {
	if x != nil {
		return x.ChildPeers
	}
	return nil
}

// ========= split clean up ===============
type ReplicaSplitCleanupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId               int32 `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id"`
	PartitionId           int32 `protobuf:"varint,2,opt,name=partition_id,json=partitionId,proto3" json:"partition_id"`
	PartitionSplitVersion int32 `protobuf:"varint,3,opt,name=partition_split_version,json=partitionSplitVersion,proto3" json:"partition_split_version"`
}

func (x *ReplicaSplitCleanupRequest) Reset() {
	*x = ReplicaSplitCleanupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicaSplitCleanupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicaSplitCleanupRequest) ProtoMessage() {}

func (x *ReplicaSplitCleanupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicaSplitCleanupRequest.ProtoReflect.Descriptor instead.
func (*ReplicaSplitCleanupRequest) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_service_proto_rawDescGZIP(), []int{17}
}

func (x *ReplicaSplitCleanupRequest) GetTableId() int32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *ReplicaSplitCleanupRequest) GetPartitionId() int32 {
	if x != nil {
		return x.PartitionId
	}
	return 0
}

func (x *ReplicaSplitCleanupRequest) GetPartitionSplitVersion() int32 {
	if x != nil {
		return x.PartitionSplitVersion
	}
	return 0
}

type PrepareSwitchPrimaryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId     int32 `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id"`
	PartitionId int32 `protobuf:"varint,2,opt,name=partition_id,json=partitionId,proto3" json:"partition_id"`
}

func (x *PrepareSwitchPrimaryRequest) Reset() {
	*x = PrepareSwitchPrimaryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareSwitchPrimaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareSwitchPrimaryRequest) ProtoMessage() {}

func (x *PrepareSwitchPrimaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareSwitchPrimaryRequest.ProtoReflect.Descriptor instead.
func (*PrepareSwitchPrimaryRequest) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_service_proto_rawDescGZIP(), []int{18}
}

func (x *PrepareSwitchPrimaryRequest) GetTableId() int32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *PrepareSwitchPrimaryRequest) GetPartitionId() int32 {
	if x != nil {
		return x.PartitionId
	}
	return 0
}

type ReplicateInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReplicateInfoRequest) Reset() {
	*x = ReplicateInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicateInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicateInfoRequest) ProtoMessage() {}

func (x *ReplicateInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicateInfoRequest.ProtoReflect.Descriptor instead.
func (*ReplicateInfoRequest) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_service_proto_rawDescGZIP(), []int{19}
}

type ReplicateInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplicatePort int32 `protobuf:"varint,1,opt,name=replicate_port,json=replicatePort,proto3" json:"replicate_port"`
}

func (x *ReplicateInfoResponse) Reset() {
	*x = ReplicateInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_reco_arch_colossusdb_proto_partition_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicateInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicateInfoResponse) ProtoMessage() {}

func (x *ReplicateInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teams_reco_arch_colossusdb_proto_partition_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicateInfoResponse.ProtoReflect.Descriptor instead.
func (*ReplicateInfoResponse) Descriptor() ([]byte, []int) {
	return file_teams_reco_arch_colossusdb_proto_partition_service_proto_rawDescGZIP(), []int{20}
}

func (x *ReplicateInfoResponse) GetReplicatePort() int32 {
	if x != nil {
		return x.ReplicatePort
	}
	return 0
}

var File_teams_reco_arch_colossusdb_proto_partition_service_proto protoreflect.FileDescriptor

var file_teams_reco_arch_colossusdb_proto_partition_service_proto_rawDesc = []byte{
	0x0a, 0x38, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x2d, 0x61, 0x72, 0x63,
	0x68, 0x2f, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x63, 0x6f, 0x6c, 0x6f,
	0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x1a, 0x2d, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2f, 0x72, 0x65,
	0x63, 0x6f, 0x2d, 0x61, 0x72, 0x63, 0x68, 0x2f, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73,
	0x64, 0x62, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa2, 0x01, 0x0a, 0x0e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x8f, 0x01, 0x0a, 0x04, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x07, 0x0a, 0x03, 0x6b, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x10, 0x01, 0x12, 0x15,
	0x0a, 0x11, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x6b, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x45, 0x78, 0x68, 0x61, 0x75, 0x73, 0x74, 0x65, 0x64, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x6b,
	0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x06, 0x22, 0x3a, 0x0a, 0x07, 0x52, 0x70,
	0x63, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0xce, 0x03, 0x0a, 0x10, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x12, 0x2b, 0x0a, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6c, 0x6f,
	0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x6f,
	0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75,
	0x73, 0x64, 0x62, 0x2e, 0x52, 0x70, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64,
	0x65, 0x12, 0x59, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6c,
	0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x10,
	0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x65, 0x61, 0x64, 0x79, 0x54, 0x6f, 0x50,
	0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x75, 0x62, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x75, 0x62, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x55,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x32, 0x0a, 0x15, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x75,
	0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x13, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x41, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9b, 0x01, 0x0a, 0x11, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a,
	0x12, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x05,
	0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f,
	0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x67, 0x0a, 0x10, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x2e,
	0x0a, 0x13, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xb6,
	0x02, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6a,
	0x73, 0x6f, 0x6e, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x4a, 0x73, 0x6f, 0x6e, 0x41, 0x72, 0x67, 0x73, 0x12, 0x28, 0x0a,
	0x10, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6b, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x63,
	0x6f, 0x6e, 0x66, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x70, 0x6c, 0x69, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xa9, 0x02, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a,
	0x04, 0x70, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f,
	0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x70, 0x61, 0x72, 0x74, 0x12, 0x3a, 0x0a, 0x09,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08,
	0x70, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x12, 0x65, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x5f, 0x72,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x66, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68,
	0x4b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73,
	0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0xac, 0x02, 0x0a, 0x18, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x3a,
	0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x75,
	0x74, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x75,
	0x74, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6c,
	0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6c, 0x6f,
	0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0xda, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x09, 0x70, 0x65, 0x65,
	0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63,
	0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x70, 0x65, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x12, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x11, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x22,
	0x8d, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75,
	0x73, 0x64, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0xc4, 0x02, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73,
	0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65,
	0x65, 0x70, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x66, 0x72, 0x6f, 0x6d,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x12,
	0x64, 0x0a, 0x12, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f,
	0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x11, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79,
	0x1a, 0x44, 0x0a, 0x16, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xad, 0x02, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x12, 0x27, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x52, 0x70, 0x63,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x65,
	0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x68, 0x75, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x54, 0x6f, 0x48, 0x75, 0x62, 0x12, 0x53,
	0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73,
	0x75, 0x73, 0x64, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x1a, 0x41, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf4, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c,
	0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73,
	0x64, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x37, 0x0a, 0x0b,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75,
	0x73, 0x64, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x05, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73,
	0x75, 0x73, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0xf1, 0x02,
	0x0a, 0x14, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a,
	0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f,
	0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x72,
	0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x1a, 0x37, 0x0a, 0x09, 0x41, 0x72, 0x67, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x64, 0x0a, 0x15, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6c,
	0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0x38, 0x0a, 0x1b, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68, 0x4b, 0x65,
	0x79, 0x22, 0x8c, 0x02, 0x0a, 0x13, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x70, 0x6c,
	0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x44, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x6e,
	0x65, 0x77, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a, 0x05, 0x70,
	0x65, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6c,
	0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73,
	0x12, 0x3e, 0x0a, 0x0b, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73,
	0x64, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x50, 0x65, 0x65, 0x72, 0x73,
	0x22, 0x92, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x70, 0x6c, 0x69,
	0x74, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x36, 0x0a,
	0x17, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x5b, 0x0a, 0x1b, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x22, 0x16, 0x0a, 0x14, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x3e, 0x0a, 0x15, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x32, 0xcd, 0x06, 0x0a, 0x10, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x44, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x12, 0x1d, 0x2e,
	0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x63,
	0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4c, 0x0a, 0x0b, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x65, 0x12, 0x24, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64,
	0x62, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x63, 0x6f, 0x6c,
	0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x4a, 0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x12, 0x20, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64,
	0x62, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75,
	0x73, 0x64, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x4e, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x1e,
	0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5a, 0x0a, 0x13, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x20, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75,
	0x73, 0x64, 0x62, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73,
	0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x14, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x27, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x63,
	0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x48, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x53, 0x70, 0x6c, 0x69, 0x74, 0x12, 0x1f, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73,
	0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75,
	0x73, 0x64, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x56, 0x0a, 0x13, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x43,
	0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x12, 0x26, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75,
	0x73, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x70, 0x6c, 0x69, 0x74,
	0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17,
	0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x58, 0x0a, 0x14, 0x50, 0x72, 0x65, 0x70, 0x61,
	0x72, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12,
	0x27, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x50, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73,
	0x73, 0x75, 0x73, 0x64, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x57, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73,
	0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73,
	0x75, 0x73, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x26, 0x5a, 0x24, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x75, 0x61, 0x69, 0x73, 0x68, 0x6f,
	0x75, 0x2f, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x75, 0x73, 0x64, 0x62, 0x2f, 0x70, 0x62, 0x3b,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_teams_reco_arch_colossusdb_proto_partition_service_proto_rawDescOnce sync.Once
	file_teams_reco_arch_colossusdb_proto_partition_service_proto_rawDescData = file_teams_reco_arch_colossusdb_proto_partition_service_proto_rawDesc
)

func file_teams_reco_arch_colossusdb_proto_partition_service_proto_rawDescGZIP() []byte {
	file_teams_reco_arch_colossusdb_proto_partition_service_proto_rawDescOnce.Do(func() {
		file_teams_reco_arch_colossusdb_proto_partition_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_teams_reco_arch_colossusdb_proto_partition_service_proto_rawDescData)
	})
	return file_teams_reco_arch_colossusdb_proto_partition_service_proto_rawDescData
}

var file_teams_reco_arch_colossusdb_proto_partition_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_teams_reco_arch_colossusdb_proto_partition_service_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_teams_reco_arch_colossusdb_proto_partition_service_proto_goTypes = []interface{}{
	(PartitionError_Code)(0),            // 0: colossusdb.PartitionError.Code
	(*PartitionError)(nil),              // 1: colossusdb.PartitionError
	(*RpcNode)(nil),                     // 2: colossusdb.RpcNode
	(*PartitionReplica)(nil),            // 3: colossusdb.PartitionReplica
	(*PartitionPeerInfo)(nil),           // 4: colossusdb.PartitionPeerInfo
	(*DynamicTableInfo)(nil),            // 5: colossusdb.DynamicTableInfo
	(*PartitionInfo)(nil),               // 6: colossusdb.PartitionInfo
	(*AddReplicaRequest)(nil),           // 7: colossusdb.AddReplicaRequest
	(*ReconfigPartitionRequest)(nil),    // 8: colossusdb.ReconfigPartitionRequest
	(*RemoveReplicaRequest)(nil),        // 9: colossusdb.RemoveReplicaRequest
	(*ReplicaReportInfo)(nil),           // 10: colossusdb.ReplicaReportInfo
	(*GetReplicasRequest)(nil),          // 11: colossusdb.GetReplicasRequest
	(*ServerInfo)(nil),                  // 12: colossusdb.ServerInfo
	(*GetReplicasResponse)(nil),         // 13: colossusdb.GetReplicasResponse
	(*CustomCommandRequest)(nil),        // 14: colossusdb.CustomCommandRequest
	(*CustomCommandResponse)(nil),       // 15: colossusdb.CustomCommandResponse
	(*ChangeAuthenticationRequest)(nil), // 16: colossusdb.ChangeAuthenticationRequest
	(*ReplicaSplitRequest)(nil),         // 17: colossusdb.ReplicaSplitRequest
	(*ReplicaSplitCleanupRequest)(nil),  // 18: colossusdb.ReplicaSplitCleanupRequest
	(*PrepareSwitchPrimaryRequest)(nil), // 19: colossusdb.PrepareSwitchPrimaryRequest
	(*ReplicateInfoRequest)(nil),        // 20: colossusdb.ReplicateInfoRequest
	(*ReplicateInfoResponse)(nil),       // 21: colossusdb.ReplicateInfoResponse
	nil,                                 // 22: colossusdb.PartitionReplica.StatisticsInfoEntry
	nil,                                 // 23: colossusdb.GetReplicasRequest.EstimatedReplicasEntry
	nil,                                 // 24: colossusdb.ServerInfo.StatisticsInfoEntry
	nil,                                 // 25: colossusdb.CustomCommandRequest.ArgsEntry
	(ReplicaRole)(0),                    // 26: colossusdb.ReplicaRole
	(*ErrorStatus)(nil),                 // 27: colossusdb.ErrorStatus
}
var file_teams_reco_arch_colossusdb_proto_partition_service_proto_depIdxs = []int32{
	26, // 0: colossusdb.PartitionReplica.role:type_name -> colossusdb.ReplicaRole
	2,  // 1: colossusdb.PartitionReplica.node:type_name -> colossusdb.RpcNode
	22, // 2: colossusdb.PartitionReplica.statistics_info:type_name -> colossusdb.PartitionReplica.StatisticsInfoEntry
	3,  // 3: colossusdb.PartitionPeerInfo.peers:type_name -> colossusdb.PartitionReplica
	6,  // 4: colossusdb.AddReplicaRequest.part:type_name -> colossusdb.PartitionInfo
	4,  // 5: colossusdb.AddReplicaRequest.peer_info:type_name -> colossusdb.PartitionPeerInfo
	4,  // 6: colossusdb.AddReplicaRequest.parent_info:type_name -> colossusdb.PartitionPeerInfo
	4,  // 7: colossusdb.ReconfigPartitionRequest.peer_info:type_name -> colossusdb.PartitionPeerInfo
	4,  // 8: colossusdb.ReconfigPartitionRequest.parent_info:type_name -> colossusdb.PartitionPeerInfo
	5,  // 9: colossusdb.ReconfigPartitionRequest.table_info:type_name -> colossusdb.DynamicTableInfo
	4,  // 10: colossusdb.RemoveReplicaRequest.peer_info:type_name -> colossusdb.PartitionPeerInfo
	4,  // 11: colossusdb.ReplicaReportInfo.peer_info:type_name -> colossusdb.PartitionPeerInfo
	10, // 12: colossusdb.GetReplicasRequest.infos:type_name -> colossusdb.ReplicaReportInfo
	23, // 13: colossusdb.GetReplicasRequest.estimated_replicas:type_name -> colossusdb.GetReplicasRequest.EstimatedReplicasEntry
	2,  // 14: colossusdb.ServerInfo.node:type_name -> colossusdb.RpcNode
	24, // 15: colossusdb.ServerInfo.statistics_info:type_name -> colossusdb.ServerInfo.StatisticsInfoEntry
	27, // 16: colossusdb.GetReplicasResponse.server_result:type_name -> colossusdb.ErrorStatus
	12, // 17: colossusdb.GetReplicasResponse.server_info:type_name -> colossusdb.ServerInfo
	27, // 18: colossusdb.GetReplicasResponse.results:type_name -> colossusdb.ErrorStatus
	10, // 19: colossusdb.GetReplicasResponse.infos:type_name -> colossusdb.ReplicaReportInfo
	25, // 20: colossusdb.CustomCommandRequest.args:type_name -> colossusdb.CustomCommandRequest.ArgsEntry
	27, // 21: colossusdb.CustomCommandResponse.status:type_name -> colossusdb.ErrorStatus
	5,  // 22: colossusdb.ReplicaSplitRequest.new_table_info:type_name -> colossusdb.DynamicTableInfo
	4,  // 23: colossusdb.ReplicaSplitRequest.peers:type_name -> colossusdb.PartitionPeerInfo
	4,  // 24: colossusdb.ReplicaSplitRequest.child_peers:type_name -> colossusdb.PartitionPeerInfo
	7,  // 25: colossusdb.PartitionService.AddReplica:input_type -> colossusdb.AddReplicaRequest
	8,  // 26: colossusdb.PartitionService.Reconfigure:input_type -> colossusdb.ReconfigPartitionRequest
	9,  // 27: colossusdb.PartitionService.RemoveReplica:input_type -> colossusdb.RemoveReplicaRequest
	11, // 28: colossusdb.PartitionService.GetReplicas:input_type -> colossusdb.GetReplicasRequest
	14, // 29: colossusdb.PartitionService.HandleCustomCommand:input_type -> colossusdb.CustomCommandRequest
	16, // 30: colossusdb.PartitionService.ChangeAuthentication:input_type -> colossusdb.ChangeAuthenticationRequest
	17, // 31: colossusdb.PartitionService.ReplicaSplit:input_type -> colossusdb.ReplicaSplitRequest
	18, // 32: colossusdb.PartitionService.ReplicaSplitCleanup:input_type -> colossusdb.ReplicaSplitCleanupRequest
	19, // 33: colossusdb.PartitionService.PrepareSwitchPrimary:input_type -> colossusdb.PrepareSwitchPrimaryRequest
	20, // 34: colossusdb.PartitionService.GetReplicateInfo:input_type -> colossusdb.ReplicateInfoRequest
	27, // 35: colossusdb.PartitionService.AddReplica:output_type -> colossusdb.ErrorStatus
	27, // 36: colossusdb.PartitionService.Reconfigure:output_type -> colossusdb.ErrorStatus
	27, // 37: colossusdb.PartitionService.RemoveReplica:output_type -> colossusdb.ErrorStatus
	13, // 38: colossusdb.PartitionService.GetReplicas:output_type -> colossusdb.GetReplicasResponse
	15, // 39: colossusdb.PartitionService.HandleCustomCommand:output_type -> colossusdb.CustomCommandResponse
	27, // 40: colossusdb.PartitionService.ChangeAuthentication:output_type -> colossusdb.ErrorStatus
	27, // 41: colossusdb.PartitionService.ReplicaSplit:output_type -> colossusdb.ErrorStatus
	27, // 42: colossusdb.PartitionService.ReplicaSplitCleanup:output_type -> colossusdb.ErrorStatus
	27, // 43: colossusdb.PartitionService.PrepareSwitchPrimary:output_type -> colossusdb.ErrorStatus
	21, // 44: colossusdb.PartitionService.GetReplicateInfo:output_type -> colossusdb.ReplicateInfoResponse
	35, // [35:45] is the sub-list for method output_type
	25, // [25:35] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_teams_reco_arch_colossusdb_proto_partition_service_proto_init() }
func file_teams_reco_arch_colossusdb_proto_partition_service_proto_init() {
	if File_teams_reco_arch_colossusdb_proto_partition_service_proto != nil {
		return
	}
	file_teams_reco_arch_colossusdb_proto_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_teams_reco_arch_colossusdb_proto_partition_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RpcNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionReplica); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionPeerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamicTableInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddReplicaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReconfigPartitionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveReplicaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicaReportInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReplicasRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReplicasResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomCommandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomCommandResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeAuthenticationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicaSplitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicaSplitCleanupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareSwitchPrimaryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicateInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_reco_arch_colossusdb_proto_partition_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicateInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_teams_reco_arch_colossusdb_proto_partition_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_teams_reco_arch_colossusdb_proto_partition_service_proto_goTypes,
		DependencyIndexes: file_teams_reco_arch_colossusdb_proto_partition_service_proto_depIdxs,
		EnumInfos:         file_teams_reco_arch_colossusdb_proto_partition_service_proto_enumTypes,
		MessageInfos:      file_teams_reco_arch_colossusdb_proto_partition_service_proto_msgTypes,
	}.Build()
	File_teams_reco_arch_colossusdb_proto_partition_service_proto = out.File
	file_teams_reco_arch_colossusdb_proto_partition_service_proto_rawDesc = nil
	file_teams_reco_arch_colossusdb_proto_partition_service_proto_goTypes = nil
	file_teams_reco_arch_colossusdb_proto_partition_service_proto_depIdxs = nil
}
